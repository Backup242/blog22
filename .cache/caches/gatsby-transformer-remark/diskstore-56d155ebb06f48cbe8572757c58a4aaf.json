{"expireTime":9007200907909667000,"key":"transformer-remark-markdown-html-ast-dc2f1eb87d765c64206f26f31e502930--","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Data structures","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":16,"offset":16}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":16,"offset":16}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<br>","position":{"start":{"line":4,"column":1,"offset":18},"end":{"line":4,"column":5,"offset":22}}},{"type":"element","tagName":"a","properties":{"href":"https://ds-unit-5-lambda.netlify.app/#"},"children":[{"type":"text","value":"https://ds-unit-5-lambda.netlify.app/#","position":{"start":{"line":4,"column":5,"offset":22},"end":{"line":4,"column":43,"offset":60}}}],"position":{"start":{"line":4,"column":5,"offset":22},"end":{"line":4,"column":43,"offset":60}}},{"type":"text","value":".\n","position":{"start":{"line":4,"column":43,"offset":60},"end":{"line":5,"column":1,"offset":62}}},{"type":"raw","value":"<br>","position":{"start":{"line":5,"column":1,"offset":62},"end":{"line":5,"column":5,"offset":66}}},{"type":"text","value":"\n","position":{"start":{"line":5,"column":5,"offset":66},"end":{"line":6,"column":1,"offset":67}}},{"type":"raw","value":"<br>","position":{"start":{"line":6,"column":1,"offset":67},"end":{"line":6,"column":5,"offset":71}}},{"type":"text","value":"\n","position":{"start":{"line":6,"column":5,"offset":71},"end":{"line":7,"column":1,"offset":72}}},{"type":"raw","value":"<br>","position":{"start":{"line":7,"column":1,"offset":72},"end":{"line":7,"column":5,"offset":76}}}],"position":{"start":{"line":4,"column":1,"offset":18},"end":{"line":7,"column":5,"offset":76}}},{"type":"text","value":"\n"},{"type":"raw","value":"<h1>   Algorithms </h1>\n<br>\n<iframe sandbox=\"allow-scripts\" style=\"resize:both; overflow:scroll;\"     style=\"z-index:-1!important; overflow:scroll;resize:both;\"  src=\"https://bgoonz-branch-the-algos.vercel.app/\" height=\"800px\" width=\"1000px\" scrolling=\"yes\"   frameborder=\"yes\" loading=\"lazy\"  allowfullscreen=\"true\"  frameborder=\"0\" ></iframe>\n<br>\n<br>\n<br>","position":{"start":{"line":9,"column":1,"offset":78},"end":{"line":14,"column":5,"offset":438}}},{"type":"text","value":"\n"},{"type":"raw","value":"<h1>  The Algos Bgoonz Branch </h1>\n<br>\n<iframe sandbox=\"allow-scripts\" style=\"resize:both; overflow:scroll;\"     style=\"z-index:-1!important; overflow:scroll;resize:both;\"  src=\"https://thealgorithms.netlify.app/\" height=\"800px\" width=\"1000px\" scrolling=\"yes\"   frameborder=\"yes\" loading=\"lazy\"  allowfullscreen=\"true\"  frameborder=\"0\" ></iframe>\n<br>\n<br>\n<br>\n<br>","position":{"start":{"line":16,"column":1,"offset":440},"end":{"line":22,"column":5,"offset":808}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>\n<br>\n<br>","position":{"start":{"line":25,"column":1,"offset":811},"end":{"line":28,"column":5,"offset":830}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>\n<br>","position":{"start":{"line":31,"column":1,"offset":833},"end":{"line":33,"column":5,"offset":847}}},{"type":"text","value":"\n"},{"type":"raw","value":"<h1>  Python Data Structures</h1>\n<br>\n<iframe sandbox=\"allow-scripts\" style=\"resize:both; overflow:scroll;\"     style=\"z-index:-1!important; overflow:scroll;resize:both;\"  src=\"https://ds-unit-5-lambda.netlify.app/\" height=\"800px\" width=\"1000px\" scrolling=\"yes\"   frameborder=\"yes\" loading=\"lazy\"  allowfullscreen=\"true\"  frameborder=\"0\" ></iframe>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>","position":{"start":{"line":35,"column":1,"offset":849},"end":{"line":43,"column":5,"offset":1228}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>\n<br>\n<br>","position":{"start":{"line":46,"column":1,"offset":1231},"end":{"line":49,"column":5,"offset":1250}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>\n<br>\n<br>\n<h1>   Leetcode </h1>\n<br>\n<iframe sandbox=\"allow-scripts\" style=\"resize:both; overflow:scroll;\"     style=\"z-index:-1!important; overflow:scroll;resize:both;\"  src=\"https://bgoonz.github.io/Leetcode-JS-PY-MD/\" height=\"800px\" width=\"1000px\" scrolling=\"yes\"   frameborder=\"yes\" loading=\"lazy\"  allowfullscreen=\"true\"  frameborder=\"0\" ></iframe>\n<br>\n<br>\n<br>","position":{"start":{"line":52,"column":1,"offset":1253},"end":{"line":61,"column":5,"offset":1631}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>\n<br>\n<h1>   Algorithms </h1>\n<br>\n<iframe sandbox=\"allow-scripts\" style=\"resize:both; overflow:scroll;\"     style=\"z-index:-1!important; overflow:scroll;resize:both;\"  src=\"https://bgoonz-branch-the-algos.vercel.app/\" height=\"800px\" width=\"1000px\" scrolling=\"yes\"   frameborder=\"yes\" loading=\"lazy\"  allowfullscreen=\"true\"  frameborder=\"0\" ></iframe>\n<br>\n<br>\n<br>","position":{"start":{"line":63,"column":1,"offset":1633},"end":{"line":71,"column":5,"offset":2008}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Data structures in JavaScript","position":{"start":{"line":73,"column":5,"offset":2014},"end":{"line":73,"column":34,"offset":2043}}}],"position":{"start":{"line":73,"column":1,"offset":2010},"end":{"line":73,"column":34,"offset":2043}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"graf-dropCap\">","position":{"start":{"line":75,"column":1,"offset":2045},"end":{"line":75,"column":28,"offset":2072}}},{"type":"text","value":"H","position":{"start":{"line":75,"column":28,"offset":2072},"end":{"line":75,"column":29,"offset":2073}}},{"type":"raw","value":"</span>","position":{"start":{"line":75,"column":29,"offset":2073},"end":{"line":75,"column":36,"offset":2080}}},{"type":"text","value":"ere's a website I created to practice data structures!","position":{"start":{"line":75,"column":36,"offset":2080},"end":{"line":75,"column":90,"offset":2134}}}],"position":{"start":{"line":75,"column":1,"offset":2045},"end":{"line":75,"column":90,"offset":2134}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<a href=\"https://ds-algo-official-c3dw6uapg-bgoonz.vercel.app/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://ds-algo-official-c3dw6uapg-bgoonz.vercel.app/\">","position":{"start":{"line":77,"column":1,"offset":2136},"end":{"line":77,"column":178,"offset":2313}}},{"type":"raw","value":"<strong>","position":{"start":{"line":77,"column":178,"offset":2313},"end":{"line":77,"column":186,"offset":2321}}},{"type":"text","value":"directory","position":{"start":{"line":77,"column":186,"offset":2321},"end":{"line":77,"column":195,"offset":2330}}},{"type":"raw","value":"</strong>","position":{"start":{"line":77,"column":195,"offset":2330},"end":{"line":77,"column":204,"offset":2339}}},{"type":"raw","value":"<br />","position":{"start":{"line":77,"column":204,"offset":2339},"end":{"line":77,"column":210,"offset":2345}}},{"type":"text","value":"\n","position":{"start":{"line":77,"column":210,"offset":2345},"end":{"line":78,"column":1,"offset":2346}}},{"type":"raw","value":"<em>","position":{"start":{"line":78,"column":1,"offset":2346},"end":{"line":78,"column":5,"offset":2350}}},{"type":"text","value":"Edit description","position":{"start":{"line":78,"column":5,"offset":2350},"end":{"line":78,"column":21,"offset":2366}}},{"type":"raw","value":"</em>","position":{"start":{"line":78,"column":21,"offset":2366},"end":{"line":78,"column":26,"offset":2371}}},{"type":"text","value":"ds-algo-official-c3dw6uapg-bgoonz.vercel.app","position":{"start":{"line":78,"column":26,"offset":2371},"end":{"line":78,"column":70,"offset":2415}}},{"type":"raw","value":"</a>","position":{"start":{"line":78,"column":70,"offset":2415},"end":{"line":78,"column":74,"offset":2419}}},{"type":"raw","value":"<a href=\"https://ds-algo-official-c3dw6uapg-bgoonz.vercel.app/\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\">","position":{"start":{"line":78,"column":74,"offset":2419},"end":{"line":78,"column":209,"offset":2554}}},{"type":"raw","value":"</a>","position":{"start":{"line":78,"column":209,"offset":2554},"end":{"line":78,"column":213,"offset":2558}}}],"position":{"start":{"line":77,"column":1,"offset":2136},"end":{"line":78,"column":213,"offset":2558}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"graf-dropCap\">","position":{"start":{"line":80,"column":1,"offset":2560},"end":{"line":80,"column":28,"offset":2587}}},{"type":"text","value":"H","position":{"start":{"line":80,"column":28,"offset":2587},"end":{"line":80,"column":29,"offset":2588}}},{"type":"raw","value":"</span>","position":{"start":{"line":80,"column":29,"offset":2588},"end":{"line":80,"column":36,"offset":2595}}},{"type":"text","value":"ere's the repo that the website is built on:","position":{"start":{"line":80,"column":36,"offset":2595},"end":{"line":80,"column":80,"offset":2639}}}],"position":{"start":{"line":80,"column":1,"offset":2560},"end":{"line":80,"column":80,"offset":2639}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<a href=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\">","position":{"start":{"line":82,"column":1,"offset":2641},"end":{"line":82,"column":156,"offset":2796}}},{"type":"raw","value":"<strong>","position":{"start":{"line":82,"column":156,"offset":2796},"end":{"line":82,"column":164,"offset":2804}}},{"type":"text","value":"bgoonz/DS-ALGO-OFFICIAL","position":{"start":{"line":82,"column":164,"offset":2804},"end":{"line":82,"column":187,"offset":2827}}},{"type":"raw","value":"</strong>","position":{"start":{"line":82,"column":187,"offset":2827},"end":{"line":82,"column":196,"offset":2836}}},{"type":"raw","value":"<br />","position":{"start":{"line":82,"column":196,"offset":2836},"end":{"line":82,"column":202,"offset":2842}}},{"type":"text","value":"\n","position":{"start":{"line":82,"column":202,"offset":2842},"end":{"line":83,"column":1,"offset":2843}}},{"type":"raw","value":"<em>","position":{"start":{"line":83,"column":1,"offset":2843},"end":{"line":83,"column":5,"offset":2847}}},{"type":"text","value":"Navigation ####Author:Bryan Guner Big O notation is the language we use for talking about how long an algorithm takes…","position":{"start":{"line":83,"column":5,"offset":2847},"end":{"line":83,"column":123,"offset":2965}}},{"type":"raw","value":"</em>","position":{"start":{"line":83,"column":123,"offset":2965},"end":{"line":83,"column":128,"offset":2970}}},{"type":"text","value":"github.com","position":{"start":{"line":83,"column":128,"offset":2970},"end":{"line":83,"column":138,"offset":2980}}},{"type":"raw","value":"</a>","position":{"start":{"line":83,"column":138,"offset":2980},"end":{"line":83,"column":142,"offset":2984}}},{"type":"raw","value":"<a href=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\">","position":{"start":{"line":83,"column":142,"offset":2984},"end":{"line":83,"column":246,"offset":3088}}},{"type":"raw","value":"</a>","position":{"start":{"line":83,"column":246,"offset":3088},"end":{"line":83,"column":250,"offset":3092}}}],"position":{"start":{"line":82,"column":1,"offset":2641},"end":{"line":83,"column":250,"offset":3092}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"graf-dropCap\">","position":{"start":{"line":85,"column":1,"offset":3094},"end":{"line":85,"column":28,"offset":3121}}},{"type":"text","value":"H","position":{"start":{"line":85,"column":28,"offset":3121},"end":{"line":85,"column":29,"offset":3122}}},{"type":"raw","value":"</span>","position":{"start":{"line":85,"column":29,"offset":3122},"end":{"line":85,"column":36,"offset":3129}}},{"type":"text","value":"ere's a live code editor where you can mess with any of the examples…","position":{"start":{"line":85,"column":36,"offset":3129},"end":{"line":85,"column":105,"offset":3198}}}],"position":{"start":{"line":85,"column":1,"offset":3094},"end":{"line":85,"column":105,"offset":3198}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Resources (article content below):","position":{"start":{"line":87,"column":5,"offset":3204},"end":{"line":87,"column":39,"offset":3238}}}],"position":{"start":{"line":87,"column":1,"offset":3200},"end":{"line":87,"column":39,"offset":3238}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Videos","position":{"start":{"line":89,"column":6,"offset":3245},"end":{"line":89,"column":12,"offset":3251}}}],"position":{"start":{"line":89,"column":1,"offset":3240},"end":{"line":89,"column":12,"offset":3251}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"53c4\">","position":{"start":{"line":91,"column":5,"offset":3257},"end":{"line":91,"column":21,"offset":3273}}},{"type":"raw","value":"<a href=\"https://www.youtube.com/watch?v=0IAPZzGSbME&amp;list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&amp;index=2&amp;t=0s\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":91,"column":21,"offset":3273},"end":{"line":91,"column":181,"offset":3433}}},{"type":"text","value":"Abdul Bari: YouTubeChannel for Algorithms","position":{"start":{"line":91,"column":181,"offset":3433},"end":{"line":91,"column":222,"offset":3474}}},{"type":"raw","value":"</a>","position":{"start":{"line":91,"column":222,"offset":3474},"end":{"line":91,"column":226,"offset":3478}}},{"type":"raw","value":"</span>","position":{"start":{"line":91,"column":226,"offset":3478},"end":{"line":91,"column":233,"offset":3485}}}],"position":{"start":{"line":91,"column":1,"offset":3253},"end":{"line":91,"column":233,"offset":3485}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"ab93\">","position":{"start":{"line":92,"column":5,"offset":3490},"end":{"line":92,"column":21,"offset":3506}}},{"type":"raw","value":"<a href=\"https://www.youtube.com/watch?v=lxja8wBwN0k&amp;list=PLKKfKV1b9e8ps6dD3QA5KFfHdiWj9cB1s\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":92,"column":21,"offset":3506},"end":{"line":92,"column":160,"offset":3645}}},{"type":"text","value":"Data Structures and algorithms","position":{"start":{"line":92,"column":160,"offset":3645},"end":{"line":92,"column":190,"offset":3675}}},{"type":"raw","value":"</a>","position":{"start":{"line":92,"column":190,"offset":3675},"end":{"line":92,"column":194,"offset":3679}}},{"type":"raw","value":"</span>","position":{"start":{"line":92,"column":194,"offset":3679},"end":{"line":92,"column":201,"offset":3686}}}],"position":{"start":{"line":92,"column":1,"offset":3486},"end":{"line":92,"column":201,"offset":3686}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"e614\">","position":{"start":{"line":93,"column":5,"offset":3691},"end":{"line":93,"column":21,"offset":3707}}},{"type":"raw","value":"<a href=\"https://www.youtube.com/playlist?list=PLmGElG-9wxc9Us6IK6Qy-KHlG_F3IS6Q9\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":93,"column":21,"offset":3707},"end":{"line":93,"column":145,"offset":3831}}},{"type":"text","value":"Data Structures and algorithms Course","position":{"start":{"line":93,"column":145,"offset":3831},"end":{"line":93,"column":182,"offset":3868}}},{"type":"raw","value":"</a>","position":{"start":{"line":93,"column":182,"offset":3868},"end":{"line":93,"column":186,"offset":3872}}},{"type":"raw","value":"</span>","position":{"start":{"line":93,"column":186,"offset":3872},"end":{"line":93,"column":193,"offset":3879}}}],"position":{"start":{"line":93,"column":1,"offset":3687},"end":{"line":93,"column":193,"offset":3879}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"3d48\">","position":{"start":{"line":94,"column":5,"offset":3884},"end":{"line":94,"column":21,"offset":3900}}},{"type":"raw","value":"<a href=\"https://www.khanacademy.org/computing/computer-science/algorithms\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":94,"column":21,"offset":3900},"end":{"line":94,"column":138,"offset":4017}}},{"type":"text","value":"Khan Academy","position":{"start":{"line":94,"column":138,"offset":4017},"end":{"line":94,"column":150,"offset":4029}}},{"type":"raw","value":"</a>","position":{"start":{"line":94,"column":150,"offset":4029},"end":{"line":94,"column":154,"offset":4033}}},{"type":"raw","value":"</span>","position":{"start":{"line":94,"column":154,"offset":4033},"end":{"line":94,"column":161,"offset":4040}}}],"position":{"start":{"line":94,"column":1,"offset":3880},"end":{"line":94,"column":161,"offset":4040}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"ac90\">","position":{"start":{"line":95,"column":5,"offset":4045},"end":{"line":95,"column":21,"offset":4061}}},{"type":"raw","value":"<a href=\"https://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":95,"column":21,"offset":4061},"end":{"line":95,"column":145,"offset":4185}}},{"type":"text","value":"Data structures by mycodeschool","position":{"start":{"line":95,"column":145,"offset":4185},"end":{"line":95,"column":176,"offset":4216}}},{"type":"raw","value":"</a>","position":{"start":{"line":95,"column":176,"offset":4216},"end":{"line":95,"column":180,"offset":4220}}},{"type":"text","value":"Pre-requisite for this lesson is good understanding of pointers in C.","position":{"start":{"line":95,"column":180,"offset":4220},"end":{"line":95,"column":249,"offset":4289}}},{"type":"raw","value":"</span>","position":{"start":{"line":95,"column":249,"offset":4289},"end":{"line":95,"column":256,"offset":4296}}}],"position":{"start":{"line":95,"column":1,"offset":4041},"end":{"line":95,"column":256,"offset":4296}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"9bd9\">","position":{"start":{"line":96,"column":5,"offset":4301},"end":{"line":96,"column":21,"offset":4317}}},{"type":"raw","value":"<a href=\"https://www.youtube.com/watch?v=HtSuA80QTyo&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":96,"column":21,"offset":4317},"end":{"line":96,"column":160,"offset":4456}}},{"type":"text","value":"MIT 6.006: Intro to Algorithms(2011)","position":{"start":{"line":96,"column":160,"offset":4456},"end":{"line":96,"column":196,"offset":4492}}},{"type":"raw","value":"</a>","position":{"start":{"line":96,"column":196,"offset":4492},"end":{"line":96,"column":200,"offset":4496}}},{"type":"raw","value":"</span>","position":{"start":{"line":96,"column":200,"offset":4496},"end":{"line":96,"column":207,"offset":4503}}}],"position":{"start":{"line":96,"column":1,"offset":4297},"end":{"line":96,"column":207,"offset":4503}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"71f0\">","position":{"start":{"line":97,"column":5,"offset":4508},"end":{"line":97,"column":21,"offset":4524}}},{"type":"raw","value":"<a href=\"https://www.youtube.com/watch?v=5_5oE5lgrhw&amp;list=PLu0W_9lII9ahIappRPN0MCAgtOu3lQjQi\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":97,"column":21,"offset":4524},"end":{"line":97,"column":160,"offset":4663}}},{"type":"text","value":"Data Structures and Algorithms by Codewithharry","position":{"start":{"line":97,"column":160,"offset":4663},"end":{"line":97,"column":207,"offset":4710}}},{"type":"raw","value":"</a>","position":{"start":{"line":97,"column":207,"offset":4710},"end":{"line":97,"column":211,"offset":4714}}},{"type":"raw","value":"</span>","position":{"start":{"line":97,"column":211,"offset":4714},"end":{"line":97,"column":218,"offset":4721}}}],"position":{"start":{"line":97,"column":1,"offset":4504},"end":{"line":97,"column":218,"offset":4721}}},{"type":"text","value":"\n"}],"position":{"start":{"line":91,"column":1,"offset":3253},"end":{"line":97,"column":218,"offset":4721}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Books","position":{"start":{"line":99,"column":6,"offset":4728},"end":{"line":99,"column":11,"offset":4733}}}],"position":{"start":{"line":99,"column":1,"offset":4723},"end":{"line":99,"column":11,"offset":4733}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"2eac\">","position":{"start":{"line":101,"column":5,"offset":4739},"end":{"line":101,"column":21,"offset":4755}}},{"type":"raw","value":"<a href=\"https://edutechlearners.com/download/Introduction_to_algorithms-3rd%20Edition.pdf\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":101,"column":21,"offset":4755},"end":{"line":101,"column":154,"offset":4888}}},{"type":"text","value":"Introduction to Algorithms","position":{"start":{"line":101,"column":154,"offset":4888},"end":{"line":101,"column":180,"offset":4914}}},{"type":"raw","value":"</a>","position":{"start":{"line":101,"column":180,"offset":4914},"end":{"line":101,"column":184,"offset":4918}}},{"type":"text","value":" by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein","position":{"start":{"line":101,"column":184,"offset":4918},"end":{"line":101,"column":264,"offset":4998}}},{"type":"raw","value":"</span>","position":{"start":{"line":101,"column":264,"offset":4998},"end":{"line":101,"column":271,"offset":5005}}}],"position":{"start":{"line":101,"column":1,"offset":4735},"end":{"line":101,"column":271,"offset":5005}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"3e8d\">","position":{"start":{"line":102,"column":5,"offset":5010},"end":{"line":102,"column":21,"offset":5026}}},{"type":"raw","value":"<a href=\"http://www.sso.sy/sites/default/files/competitive%20programming%203_1.pdf\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":102,"column":21,"offset":5026},"end":{"line":102,"column":146,"offset":5151}}},{"type":"text","value":"Competitive Programming 3","position":{"start":{"line":102,"column":146,"offset":5151},"end":{"line":102,"column":171,"offset":5176}}},{"type":"raw","value":"</a>","position":{"start":{"line":102,"column":171,"offset":5176},"end":{"line":102,"column":175,"offset":5180}}},{"type":"text","value":" by Steven Halim and Felix Halim","position":{"start":{"line":102,"column":175,"offset":5180},"end":{"line":102,"column":207,"offset":5212}}},{"type":"raw","value":"</span>","position":{"start":{"line":102,"column":207,"offset":5212},"end":{"line":102,"column":214,"offset":5219}}}],"position":{"start":{"line":102,"column":1,"offset":5006},"end":{"line":102,"column":214,"offset":5219}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"3aa3\">","position":{"start":{"line":103,"column":5,"offset":5224},"end":{"line":103,"column":21,"offset":5240}}},{"type":"raw","value":"<a href=\"https://cses.fi/book/book.pdf\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":103,"column":21,"offset":5240},"end":{"line":103,"column":102,"offset":5321}}},{"type":"text","value":"Competitive Programmers Hand Book","position":{"start":{"line":103,"column":102,"offset":5321},"end":{"line":103,"column":135,"offset":5354}}},{"type":"raw","value":"</a>","position":{"start":{"line":103,"column":135,"offset":5354},"end":{"line":103,"column":139,"offset":5358}}},{"type":"text","value":" Beginner friendly hand book for competitive programmers.","position":{"start":{"line":103,"column":139,"offset":5358},"end":{"line":103,"column":196,"offset":5415}}},{"type":"raw","value":"</span>","position":{"start":{"line":103,"column":196,"offset":5415},"end":{"line":103,"column":203,"offset":5422}}}],"position":{"start":{"line":103,"column":1,"offset":5220},"end":{"line":103,"column":203,"offset":5422}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"3c02\">","position":{"start":{"line":104,"column":5,"offset":5427},"end":{"line":104,"column":21,"offset":5443}}},{"type":"raw","value":"<a href=\"https://github.com/Amchuz/My-Data-Structures-and-Algorithms-Resources/raw/master/Books/Data%20Structures%20and%20Algorithms%20-%20Narasimha%20Karumanchi.pdf\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":104,"column":21,"offset":5443},"end":{"line":104,"column":229,"offset":5651}}},{"type":"text","value":"Data Structures and Algorithms Made Easy","position":{"start":{"line":104,"column":229,"offset":5651},"end":{"line":104,"column":269,"offset":5691}}},{"type":"raw","value":"</a>","position":{"start":{"line":104,"column":269,"offset":5691},"end":{"line":104,"column":273,"offset":5695}}},{"type":"text","value":" by Narasimha Karumanchi","position":{"start":{"line":104,"column":273,"offset":5695},"end":{"line":104,"column":297,"offset":5719}}},{"type":"raw","value":"</span>","position":{"start":{"line":104,"column":297,"offset":5719},"end":{"line":104,"column":304,"offset":5726}}}],"position":{"start":{"line":104,"column":1,"offset":5423},"end":{"line":104,"column":304,"offset":5726}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"93ec\">","position":{"start":{"line":105,"column":5,"offset":5731},"end":{"line":105,"column":21,"offset":5747}}},{"type":"raw","value":"<a href=\"https://github.com/Amchuz/My-Data-Structures-and-Algorithms-Resources/raw/master/Books/Learning%20Algorithms%20Through%20Programming%20and%20Puzzle%20Solving.pdf\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":105,"column":21,"offset":5747},"end":{"line":105,"column":234,"offset":5960}}},{"type":"text","value":"Learning Algorithms Through Programming and Puzzle Solving","position":{"start":{"line":105,"column":234,"offset":5960},"end":{"line":105,"column":292,"offset":6018}}},{"type":"raw","value":"</a>","position":{"start":{"line":105,"column":292,"offset":6018},"end":{"line":105,"column":296,"offset":6022}}},{"type":"text","value":" by Alexander Kulikov and Pavel Pevzner","position":{"start":{"line":105,"column":296,"offset":6022},"end":{"line":105,"column":335,"offset":6061}}},{"type":"raw","value":"</span>","position":{"start":{"line":105,"column":335,"offset":6061},"end":{"line":105,"column":342,"offset":6068}}}],"position":{"start":{"line":105,"column":1,"offset":5727},"end":{"line":105,"column":342,"offset":6068}}},{"type":"text","value":"\n"}],"position":{"start":{"line":101,"column":1,"offset":4735},"end":{"line":105,"column":342,"offset":6068}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Coding practice","position":{"start":{"line":107,"column":6,"offset":6075},"end":{"line":107,"column":21,"offset":6090}}}],"position":{"start":{"line":107,"column":1,"offset":6070},"end":{"line":107,"column":21,"offset":6090}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"824c\">","position":{"start":{"line":109,"column":5,"offset":6096},"end":{"line":109,"column":21,"offset":6112}}},{"type":"raw","value":"<a href=\"https://leetcode.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":109,"column":21,"offset":6112},"end":{"line":109,"column":94,"offset":6185}}},{"type":"text","value":"LeetCode","position":{"start":{"line":109,"column":94,"offset":6185},"end":{"line":109,"column":102,"offset":6193}}},{"type":"raw","value":"</a>","position":{"start":{"line":109,"column":102,"offset":6193},"end":{"line":109,"column":106,"offset":6197}}},{"type":"raw","value":"</span>","position":{"start":{"line":109,"column":106,"offset":6197},"end":{"line":109,"column":113,"offset":6204}}}],"position":{"start":{"line":109,"column":1,"offset":6092},"end":{"line":109,"column":113,"offset":6204}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"a528\">","position":{"start":{"line":110,"column":5,"offset":6209},"end":{"line":110,"column":21,"offset":6225}}},{"type":"raw","value":"<a href=\"https://www.interviewbit.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":110,"column":21,"offset":6225},"end":{"line":110,"column":102,"offset":6306}}},{"type":"text","value":"InterviewBit","position":{"start":{"line":110,"column":102,"offset":6306},"end":{"line":110,"column":114,"offset":6318}}},{"type":"raw","value":"</a>","position":{"start":{"line":110,"column":114,"offset":6318},"end":{"line":110,"column":118,"offset":6322}}},{"type":"raw","value":"</span>","position":{"start":{"line":110,"column":118,"offset":6322},"end":{"line":110,"column":125,"offset":6329}}}],"position":{"start":{"line":110,"column":1,"offset":6205},"end":{"line":110,"column":125,"offset":6329}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"fa41\">","position":{"start":{"line":111,"column":5,"offset":6334},"end":{"line":111,"column":21,"offset":6350}}},{"type":"raw","value":"<a href=\"https://codility.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":111,"column":21,"offset":6350},"end":{"line":111,"column":94,"offset":6423}}},{"type":"text","value":"Codility","position":{"start":{"line":111,"column":94,"offset":6423},"end":{"line":111,"column":102,"offset":6431}}},{"type":"raw","value":"</a>","position":{"start":{"line":111,"column":102,"offset":6431},"end":{"line":111,"column":106,"offset":6435}}},{"type":"raw","value":"</span>","position":{"start":{"line":111,"column":106,"offset":6435},"end":{"line":111,"column":113,"offset":6442}}}],"position":{"start":{"line":111,"column":1,"offset":6330},"end":{"line":111,"column":113,"offset":6442}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"6c61\">","position":{"start":{"line":112,"column":5,"offset":6447},"end":{"line":112,"column":21,"offset":6463}}},{"type":"raw","value":"<a href=\"https://www.hackerrank.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":112,"column":21,"offset":6463},"end":{"line":112,"column":100,"offset":6542}}},{"type":"text","value":"HackerRank","position":{"start":{"line":112,"column":100,"offset":6542},"end":{"line":112,"column":110,"offset":6552}}},{"type":"raw","value":"</a>","position":{"start":{"line":112,"column":110,"offset":6552},"end":{"line":112,"column":114,"offset":6556}}},{"type":"raw","value":"</span>","position":{"start":{"line":112,"column":114,"offset":6556},"end":{"line":112,"column":121,"offset":6563}}}],"position":{"start":{"line":112,"column":1,"offset":6443},"end":{"line":112,"column":121,"offset":6563}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"dff6\">","position":{"start":{"line":113,"column":5,"offset":6568},"end":{"line":113,"column":21,"offset":6584}}},{"type":"raw","value":"<a href=\"https://projecteuler.net/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":113,"column":21,"offset":6584},"end":{"line":113,"column":98,"offset":6661}}},{"type":"text","value":"Project Euler","position":{"start":{"line":113,"column":98,"offset":6661},"end":{"line":113,"column":111,"offset":6674}}},{"type":"raw","value":"</a>","position":{"start":{"line":113,"column":111,"offset":6674},"end":{"line":113,"column":115,"offset":6678}}},{"type":"raw","value":"</span>","position":{"start":{"line":113,"column":115,"offset":6678},"end":{"line":113,"column":122,"offset":6685}}}],"position":{"start":{"line":113,"column":1,"offset":6564},"end":{"line":113,"column":122,"offset":6685}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"b2dd\">","position":{"start":{"line":114,"column":5,"offset":6690},"end":{"line":114,"column":21,"offset":6706}}},{"type":"raw","value":"<a href=\"https://spoj.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":114,"column":21,"offset":6706},"end":{"line":114,"column":90,"offset":6775}}},{"type":"text","value":"Spoj","position":{"start":{"line":114,"column":90,"offset":6775},"end":{"line":114,"column":94,"offset":6779}}},{"type":"raw","value":"</a>","position":{"start":{"line":114,"column":94,"offset":6779},"end":{"line":114,"column":98,"offset":6783}}},{"type":"raw","value":"</span>","position":{"start":{"line":114,"column":98,"offset":6783},"end":{"line":114,"column":105,"offset":6790}}}],"position":{"start":{"line":114,"column":1,"offset":6686},"end":{"line":114,"column":105,"offset":6790}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"c8e8\">","position":{"start":{"line":115,"column":5,"offset":6795},"end":{"line":115,"column":21,"offset":6811}}},{"type":"raw","value":"<a href=\"https://code.google.com/codejam/contests.html\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":115,"column":21,"offset":6811},"end":{"line":115,"column":118,"offset":6908}}},{"type":"text","value":"Google Code Jam practice problems","position":{"start":{"line":115,"column":118,"offset":6908},"end":{"line":115,"column":151,"offset":6941}}},{"type":"raw","value":"</a>","position":{"start":{"line":115,"column":151,"offset":6941},"end":{"line":115,"column":155,"offset":6945}}},{"type":"raw","value":"</span>","position":{"start":{"line":115,"column":155,"offset":6945},"end":{"line":115,"column":162,"offset":6952}}}],"position":{"start":{"line":115,"column":1,"offset":6791},"end":{"line":115,"column":162,"offset":6952}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"e8bb\">","position":{"start":{"line":116,"column":5,"offset":6957},"end":{"line":116,"column":21,"offset":6973}}},{"type":"raw","value":"<a href=\"https://www.hackerearth.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":116,"column":21,"offset":6973},"end":{"line":116,"column":101,"offset":7053}}},{"type":"text","value":"HackerEarth","position":{"start":{"line":116,"column":101,"offset":7053},"end":{"line":116,"column":112,"offset":7064}}},{"type":"raw","value":"</a>","position":{"start":{"line":116,"column":112,"offset":7064},"end":{"line":116,"column":116,"offset":7068}}},{"type":"raw","value":"</span>","position":{"start":{"line":116,"column":116,"offset":7068},"end":{"line":116,"column":123,"offset":7075}}}],"position":{"start":{"line":116,"column":1,"offset":6953},"end":{"line":116,"column":123,"offset":7075}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"e803\">","position":{"start":{"line":117,"column":5,"offset":7080},"end":{"line":117,"column":21,"offset":7096}}},{"type":"raw","value":"<a href=\"https://www.topcoder.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":117,"column":21,"offset":7096},"end":{"line":117,"column":98,"offset":7173}}},{"type":"text","value":"Top Coder","position":{"start":{"line":117,"column":98,"offset":7173},"end":{"line":117,"column":107,"offset":7182}}},{"type":"raw","value":"</a>","position":{"start":{"line":117,"column":107,"offset":7182},"end":{"line":117,"column":111,"offset":7186}}},{"type":"raw","value":"</span>","position":{"start":{"line":117,"column":111,"offset":7186},"end":{"line":117,"column":118,"offset":7193}}}],"position":{"start":{"line":117,"column":1,"offset":7076},"end":{"line":117,"column":118,"offset":7193}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"294e\">","position":{"start":{"line":118,"column":5,"offset":7198},"end":{"line":118,"column":21,"offset":7214}}},{"type":"raw","value":"<a href=\"https://www.codechef.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":118,"column":21,"offset":7214},"end":{"line":118,"column":98,"offset":7291}}},{"type":"text","value":"CodeChef","position":{"start":{"line":118,"column":98,"offset":7291},"end":{"line":118,"column":106,"offset":7299}}},{"type":"raw","value":"</a>","position":{"start":{"line":118,"column":106,"offset":7299},"end":{"line":118,"column":110,"offset":7303}}},{"type":"raw","value":"</span>","position":{"start":{"line":118,"column":110,"offset":7303},"end":{"line":118,"column":117,"offset":7310}}}],"position":{"start":{"line":118,"column":1,"offset":7194},"end":{"line":118,"column":117,"offset":7310}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"9c05\">","position":{"start":{"line":119,"column":5,"offset":7315},"end":{"line":119,"column":21,"offset":7331}}},{"type":"raw","value":"<a href=\"https://www.codewars.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":119,"column":21,"offset":7331},"end":{"line":119,"column":98,"offset":7408}}},{"type":"text","value":"Codewars","position":{"start":{"line":119,"column":98,"offset":7408},"end":{"line":119,"column":106,"offset":7416}}},{"type":"raw","value":"</a>","position":{"start":{"line":119,"column":106,"offset":7416},"end":{"line":119,"column":110,"offset":7420}}},{"type":"raw","value":"</span>","position":{"start":{"line":119,"column":110,"offset":7420},"end":{"line":119,"column":117,"offset":7427}}}],"position":{"start":{"line":119,"column":1,"offset":7311},"end":{"line":119,"column":117,"offset":7427}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"356e\">","position":{"start":{"line":120,"column":5,"offset":7432},"end":{"line":120,"column":21,"offset":7448}}},{"type":"raw","value":"<a href=\"https://codesignal.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":120,"column":21,"offset":7448},"end":{"line":120,"column":96,"offset":7523}}},{"type":"text","value":"CodeSignal","position":{"start":{"line":120,"column":96,"offset":7523},"end":{"line":120,"column":106,"offset":7533}}},{"type":"raw","value":"</a>","position":{"start":{"line":120,"column":106,"offset":7533},"end":{"line":120,"column":110,"offset":7537}}},{"type":"raw","value":"</span>","position":{"start":{"line":120,"column":110,"offset":7537},"end":{"line":120,"column":117,"offset":7544}}}],"position":{"start":{"line":120,"column":1,"offset":7428},"end":{"line":120,"column":117,"offset":7544}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"2d20\">","position":{"start":{"line":121,"column":5,"offset":7549},"end":{"line":121,"column":21,"offset":7565}}},{"type":"raw","value":"<a href=\"http://codekata.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":121,"column":21,"offset":7565},"end":{"line":121,"column":93,"offset":7637}}},{"type":"text","value":"CodeKata","position":{"start":{"line":121,"column":93,"offset":7637},"end":{"line":121,"column":101,"offset":7645}}},{"type":"raw","value":"</a>","position":{"start":{"line":121,"column":101,"offset":7645},"end":{"line":121,"column":105,"offset":7649}}},{"type":"raw","value":"</span>","position":{"start":{"line":121,"column":105,"offset":7649},"end":{"line":121,"column":112,"offset":7656}}}],"position":{"start":{"line":121,"column":1,"offset":7545},"end":{"line":121,"column":112,"offset":7656}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"d3bf\">","position":{"start":{"line":122,"column":5,"offset":7661},"end":{"line":122,"column":21,"offset":7677}}},{"type":"raw","value":"<a href=\"https://www.firecode.io/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":122,"column":21,"offset":7677},"end":{"line":122,"column":97,"offset":7753}}},{"type":"text","value":"Firecode","position":{"start":{"line":122,"column":97,"offset":7753},"end":{"line":122,"column":105,"offset":7761}}},{"type":"raw","value":"</a>","position":{"start":{"line":122,"column":105,"offset":7761},"end":{"line":122,"column":109,"offset":7765}}},{"type":"raw","value":"</span>","position":{"start":{"line":122,"column":109,"offset":7765},"end":{"line":122,"column":116,"offset":7772}}}],"position":{"start":{"line":122,"column":1,"offset":7657},"end":{"line":122,"column":116,"offset":7772}}},{"type":"text","value":"\n"}],"position":{"start":{"line":109,"column":1,"offset":6092},"end":{"line":122,"column":116,"offset":7772}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Courses","position":{"start":{"line":124,"column":6,"offset":7779},"end":{"line":124,"column":13,"offset":7786}}}],"position":{"start":{"line":124,"column":1,"offset":7774},"end":{"line":124,"column":13,"offset":7786}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"eac2\">","position":{"start":{"line":126,"column":5,"offset":7792},"end":{"line":126,"column":21,"offset":7808}}},{"type":"raw","value":"<a href=\"https://academy.zerotomastery.io/p/master-the-coding-interview-faang-interview-prep\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":126,"column":21,"offset":7808},"end":{"line":126,"column":156,"offset":7943}}},{"type":"text","value":"Master the Coding Interview: Big Tech (FAANG) Interviews","position":{"start":{"line":126,"column":156,"offset":7943},"end":{"line":126,"column":212,"offset":7999}}},{"type":"raw","value":"</a>","position":{"start":{"line":126,"column":212,"offset":7999},"end":{"line":126,"column":216,"offset":8003}}},{"type":"text","value":" Course by Andrei and his team.","position":{"start":{"line":126,"column":216,"offset":8003},"end":{"line":126,"column":247,"offset":8034}}},{"type":"raw","value":"</span>","position":{"start":{"line":126,"column":247,"offset":8034},"end":{"line":126,"column":254,"offset":8041}}}],"position":{"start":{"line":126,"column":1,"offset":7788},"end":{"line":126,"column":254,"offset":8041}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"36ca\">","position":{"start":{"line":127,"column":5,"offset":8046},"end":{"line":127,"column":21,"offset":8062}}},{"type":"raw","value":"<a href=\"https://realpython.com/python-data-structures\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":127,"column":21,"offset":8062},"end":{"line":127,"column":118,"offset":8159}}},{"type":"text","value":"Common Python Data Structures","position":{"start":{"line":127,"column":118,"offset":8159},"end":{"line":127,"column":147,"offset":8188}}},{"type":"raw","value":"</a>","position":{"start":{"line":127,"column":147,"offset":8188},"end":{"line":127,"column":151,"offset":8192}}},{"type":"text","value":" Data structures are the fundamental constructs around which you build your programs. Each data structure provides a particular way of organizing data so it can be accessed efficiently, depending on your use case. Python ships with an extensive set of data structures in its standard library.","position":{"start":{"line":127,"column":151,"offset":8192},"end":{"line":127,"column":443,"offset":8484}}},{"type":"raw","value":"</span>","position":{"start":{"line":127,"column":443,"offset":8484},"end":{"line":127,"column":450,"offset":8491}}}],"position":{"start":{"line":127,"column":1,"offset":8042},"end":{"line":127,"column":450,"offset":8491}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"cdc9\">","position":{"start":{"line":128,"column":5,"offset":8496},"end":{"line":128,"column":21,"offset":8512}}},{"type":"raw","value":"<a href=\"https://www.geeksforgeeks.org/fork-cpp-course-structure\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":128,"column":21,"offset":8512},"end":{"line":128,"column":128,"offset":8619}}},{"type":"text","value":"Fork CPP","position":{"start":{"line":128,"column":128,"offset":8619},"end":{"line":128,"column":136,"offset":8627}}},{"type":"raw","value":"</a>","position":{"start":{"line":128,"column":136,"offset":8627},"end":{"line":128,"column":140,"offset":8631}}},{"type":"text","value":" A good course for beginners.","position":{"start":{"line":128,"column":140,"offset":8631},"end":{"line":128,"column":169,"offset":8660}}},{"type":"raw","value":"</span>","position":{"start":{"line":128,"column":169,"offset":8660},"end":{"line":128,"column":176,"offset":8667}}}],"position":{"start":{"line":128,"column":1,"offset":8492},"end":{"line":128,"column":176,"offset":8667}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"6d47\">","position":{"start":{"line":129,"column":5,"offset":8672},"end":{"line":129,"column":21,"offset":8688}}},{"type":"raw","value":"<a href=\"https://codeforces.com/edu/course/2\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":129,"column":21,"offset":8688},"end":{"line":129,"column":108,"offset":8775}}},{"type":"text","value":"EDU","position":{"start":{"line":129,"column":108,"offset":8775},"end":{"line":129,"column":111,"offset":8778}}},{"type":"raw","value":"</a>","position":{"start":{"line":129,"column":111,"offset":8778},"end":{"line":129,"column":115,"offset":8782}}},{"type":"text","value":" Advanced course.","position":{"start":{"line":129,"column":115,"offset":8782},"end":{"line":129,"column":132,"offset":8799}}},{"type":"raw","value":"</span>","position":{"start":{"line":129,"column":132,"offset":8799},"end":{"line":129,"column":139,"offset":8806}}}],"position":{"start":{"line":129,"column":1,"offset":8668},"end":{"line":129,"column":139,"offset":8806}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"8bb5\">","position":{"start":{"line":130,"column":5,"offset":8811},"end":{"line":130,"column":21,"offset":8827}}},{"type":"raw","value":"<a href=\"https://www.udacity.com/course/c-for-programmers--ud210\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":130,"column":21,"offset":8827},"end":{"line":130,"column":128,"offset":8934}}},{"type":"text","value":"C++ For Programmers","position":{"start":{"line":130,"column":128,"offset":8934},"end":{"line":130,"column":147,"offset":8953}}},{"type":"raw","value":"</a>","position":{"start":{"line":130,"column":147,"offset":8953},"end":{"line":130,"column":151,"offset":8957}}},{"type":"text","value":" Learn features and constructs for C++.","position":{"start":{"line":130,"column":151,"offset":8957},"end":{"line":130,"column":190,"offset":8996}}},{"type":"raw","value":"</span>","position":{"start":{"line":130,"column":190,"offset":8996},"end":{"line":130,"column":197,"offset":9003}}}],"position":{"start":{"line":130,"column":1,"offset":8807},"end":{"line":130,"column":197,"offset":9003}}},{"type":"text","value":"\n"}],"position":{"start":{"line":126,"column":1,"offset":7788},"end":{"line":130,"column":197,"offset":9003}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Guides","position":{"start":{"line":132,"column":6,"offset":9010},"end":{"line":132,"column":12,"offset":9016}}}],"position":{"start":{"line":132,"column":1,"offset":9005},"end":{"line":132,"column":12,"offset":9016}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"e9e9\">","position":{"start":{"line":134,"column":5,"offset":9022},"end":{"line":134,"column":21,"offset":9038}}},{"type":"raw","value":"<a href=\"http://www.geeksforgeeks.org/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":134,"column":21,"offset":9038},"end":{"line":134,"column":102,"offset":9119}}},{"type":"text","value":"GeeksForGeeks — A CS portal for geeks","position":{"start":{"line":134,"column":102,"offset":9119},"end":{"line":134,"column":139,"offset":9156}}},{"type":"raw","value":"</a>","position":{"start":{"line":134,"column":139,"offset":9156},"end":{"line":134,"column":143,"offset":9160}}},{"type":"raw","value":"</span>","position":{"start":{"line":134,"column":143,"offset":9160},"end":{"line":134,"column":150,"offset":9167}}}],"position":{"start":{"line":134,"column":1,"offset":9018},"end":{"line":134,"column":150,"offset":9167}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"a228\">","position":{"start":{"line":135,"column":5,"offset":9172},"end":{"line":135,"column":21,"offset":9188}}},{"type":"raw","value":"<a href=\"https://www.learneroo.com/subjects/8\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":135,"column":21,"offset":9188},"end":{"line":135,"column":109,"offset":9276}}},{"type":"text","value":"Learneroo — Algorithms","position":{"start":{"line":135,"column":109,"offset":9276},"end":{"line":135,"column":131,"offset":9298}}},{"type":"raw","value":"</a>","position":{"start":{"line":135,"column":131,"offset":9298},"end":{"line":135,"column":135,"offset":9302}}},{"type":"raw","value":"</span>","position":{"start":{"line":135,"column":135,"offset":9302},"end":{"line":135,"column":142,"offset":9309}}}],"position":{"start":{"line":135,"column":1,"offset":9168},"end":{"line":135,"column":142,"offset":9309}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"a2f0\">","position":{"start":{"line":136,"column":5,"offset":9314},"end":{"line":136,"column":21,"offset":9330}}},{"type":"raw","value":"<a href=\"http://www.topcoder.com/tc?d1=tutorials&amp;d2=alg_index&amp;module=Static\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":136,"column":21,"offset":9330},"end":{"line":136,"column":147,"offset":9456}}},{"type":"text","value":"Top Coder tutorials","position":{"start":{"line":136,"column":147,"offset":9456},"end":{"line":136,"column":166,"offset":9475}}},{"type":"raw","value":"</a>","position":{"start":{"line":136,"column":166,"offset":9475},"end":{"line":136,"column":170,"offset":9479}}},{"type":"raw","value":"</span>","position":{"start":{"line":136,"column":170,"offset":9479},"end":{"line":136,"column":177,"offset":9486}}}],"position":{"start":{"line":136,"column":1,"offset":9310},"end":{"line":136,"column":177,"offset":9486}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"f3ec\">","position":{"start":{"line":137,"column":5,"offset":9491},"end":{"line":137,"column":21,"offset":9507}}},{"type":"raw","value":"<a href=\"http://www.infoarena.ro/training-path\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":137,"column":21,"offset":9507},"end":{"line":137,"column":110,"offset":9596}}},{"type":"text","value":"Infoarena training path","position":{"start":{"line":137,"column":110,"offset":9596},"end":{"line":137,"column":133,"offset":9619}}},{"type":"raw","value":"</a>","position":{"start":{"line":137,"column":133,"offset":9619},"end":{"line":137,"column":137,"offset":9623}}},{"type":"text","value":" (RO)","position":{"start":{"line":137,"column":137,"offset":9623},"end":{"line":137,"column":142,"offset":9628}}},{"type":"raw","value":"</span>","position":{"start":{"line":137,"column":142,"offset":9628},"end":{"line":137,"column":149,"offset":9635}}}],"position":{"start":{"line":137,"column":1,"offset":9487},"end":{"line":137,"column":149,"offset":9635}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"ec93\">","position":{"start":{"line":138,"column":5,"offset":9640},"end":{"line":138,"column":21,"offset":9656}}},{"type":"text","value":"Steven & Felix Halim — ","position":{"start":{"line":138,"column":21,"offset":9656},"end":{"line":138,"column":44,"offset":9679}}},{"type":"raw","value":"<a href=\"https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=118\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":138,"column":44,"offset":9679},"end":{"line":138,"column":186,"offset":9821}}},{"type":"text","value":"Increasing the Lower Bound of Programming Contests","position":{"start":{"line":138,"column":186,"offset":9821},"end":{"line":138,"column":236,"offset":9871}}},{"type":"raw","value":"</a>","position":{"start":{"line":138,"column":236,"offset":9871},"end":{"line":138,"column":240,"offset":9875}}},{"type":"text","value":" (UVA Online Judge)","position":{"start":{"line":138,"column":240,"offset":9875},"end":{"line":138,"column":259,"offset":9894}}},{"type":"raw","value":"</span>","position":{"start":{"line":138,"column":259,"offset":9894},"end":{"line":138,"column":266,"offset":9901}}}],"position":{"start":{"line":138,"column":1,"offset":9636},"end":{"line":138,"column":266,"offset":9901}}},{"type":"text","value":"\n"}],"position":{"start":{"line":134,"column":1,"offset":9018},"end":{"line":138,"column":266,"offset":9901}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"space","position":{"start":{"line":140,"column":8,"offset":9910},"end":{"line":140,"column":13,"offset":9915}}}],"position":{"start":{"line":140,"column":7,"offset":9909},"end":{"line":140,"column":14,"offset":9916}}}],"position":{"start":{"line":140,"column":5,"offset":9907},"end":{"line":140,"column":16,"offset":9918}}}],"position":{"start":{"line":140,"column":1,"offset":9903},"end":{"line":140,"column":16,"offset":9918}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The space complexity represents the memory consumption of a data structure. As for most of the things in life, you can't have it all, so it is with the data structures. You will generally need to trade some time for space or the other way around.","position":{"start":{"line":142,"column":4,"offset":9923},"end":{"line":142,"column":250,"offset":10169}}}],"position":{"start":{"line":142,"column":3,"offset":9922},"end":{"line":142,"column":251,"offset":10170}}}],"position":{"start":{"line":142,"column":3,"offset":9922},"end":{"line":142,"column":251,"offset":10170}}},{"type":"text","value":"\n"}],"position":{"start":{"line":142,"column":1,"offset":9920},"end":{"line":142,"column":251,"offset":10170}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"time","position":{"start":{"line":144,"column":6,"offset":10177},"end":{"line":144,"column":10,"offset":10181}}}],"position":{"start":{"line":144,"column":5,"offset":10176},"end":{"line":144,"column":11,"offset":10182}}}],"position":{"start":{"line":144,"column":1,"offset":10172},"end":{"line":144,"column":11,"offset":10182}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The time complexity for a data structure is in general more diverse than its space complexity.","position":{"start":{"line":146,"column":4,"offset":10187},"end":{"line":146,"column":98,"offset":10281}}}],"position":{"start":{"line":146,"column":3,"offset":10186},"end":{"line":146,"column":99,"offset":10282}}}],"position":{"start":{"line":146,"column":3,"offset":10186},"end":{"line":146,"column":99,"offset":10282}}},{"type":"text","value":"\n"}],"position":{"start":{"line":146,"column":1,"offset":10184},"end":{"line":146,"column":99,"offset":10282}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Several operations","position":{"start":{"line":148,"column":6,"offset":10289},"end":{"line":148,"column":24,"offset":10307}}}],"position":{"start":{"line":148,"column":5,"offset":10288},"end":{"line":148,"column":25,"offset":10308}}}],"position":{"start":{"line":148,"column":1,"offset":10284},"end":{"line":148,"column":25,"offset":10308}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"In contrary to algorithms, when you look at the time complexity for data structures you need to express it for several operations that you can do with data structures. It can be adding elements, deleting elements, accessing an element or even searching for an element.","position":{"start":{"line":150,"column":4,"offset":10313},"end":{"line":150,"column":272,"offset":10581}}}],"position":{"start":{"line":150,"column":3,"offset":10312},"end":{"line":150,"column":273,"offset":10582}}}],"position":{"start":{"line":150,"column":3,"offset":10312},"end":{"line":150,"column":273,"offset":10582}}},{"type":"text","value":"\n"}],"position":{"start":{"line":150,"column":1,"offset":10310},"end":{"line":150,"column":273,"offset":10582}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Dependent on data","position":{"start":{"line":152,"column":6,"offset":10589},"end":{"line":152,"column":23,"offset":10606}}}],"position":{"start":{"line":152,"column":5,"offset":10588},"end":{"line":152,"column":24,"offset":10607}}}],"position":{"start":{"line":152,"column":1,"offset":10584},"end":{"line":152,"column":24,"offset":10607}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Something that data structure and algorithms have in common when talking about time complexity is that they are both dealing with data. When you deal with data you become dependent on them and as a result the time complexity is also dependent of the data that you received. To solve this problem we talk about 3 different time complexity.","position":{"start":{"line":154,"column":4,"offset":10612},"end":{"line":154,"column":342,"offset":10950}}}],"position":{"start":{"line":154,"column":3,"offset":10611},"end":{"line":154,"column":343,"offset":10951}}}],"position":{"start":{"line":154,"column":3,"offset":10611},"end":{"line":154,"column":343,"offset":10951}}},{"type":"text","value":"\n"}],"position":{"start":{"line":154,"column":1,"offset":10609},"end":{"line":154,"column":343,"offset":10951}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"bc8d\">","position":{"start":{"line":156,"column":5,"offset":10957},"end":{"line":156,"column":21,"offset":10973}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"The best-case complexity: when the data looks the best","position":{"start":{"line":156,"column":23,"offset":10975},"end":{"line":156,"column":77,"offset":11029}}}],"position":{"start":{"line":156,"column":21,"offset":10973},"end":{"line":156,"column":79,"offset":11031}}},{"type":"raw","value":"</span>","position":{"start":{"line":156,"column":79,"offset":11031},"end":{"line":156,"column":86,"offset":11038}}}],"position":{"start":{"line":156,"column":1,"offset":10953},"end":{"line":156,"column":86,"offset":11038}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"8b06\">","position":{"start":{"line":157,"column":5,"offset":11043},"end":{"line":157,"column":21,"offset":11059}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"The worst-case complexity: when the data looks the worst","position":{"start":{"line":157,"column":23,"offset":11061},"end":{"line":157,"column":79,"offset":11117}}}],"position":{"start":{"line":157,"column":21,"offset":11059},"end":{"line":157,"column":81,"offset":11119}}},{"type":"raw","value":"</span>","position":{"start":{"line":157,"column":81,"offset":11119},"end":{"line":157,"column":88,"offset":11126}}}],"position":{"start":{"line":157,"column":1,"offset":11039},"end":{"line":157,"column":88,"offset":11126}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"881c\">","position":{"start":{"line":158,"column":5,"offset":11131},"end":{"line":158,"column":21,"offset":11147}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"The average-case complexity: when the data looks average","position":{"start":{"line":158,"column":23,"offset":11149},"end":{"line":158,"column":79,"offset":11205}}}],"position":{"start":{"line":158,"column":21,"offset":11147},"end":{"line":158,"column":81,"offset":11207}}},{"type":"raw","value":"</span>","position":{"start":{"line":158,"column":81,"offset":11207},"end":{"line":158,"column":88,"offset":11214}}}],"position":{"start":{"line":158,"column":1,"offset":11127},"end":{"line":158,"column":88,"offset":11214}}},{"type":"text","value":"\n"}],"position":{"start":{"line":156,"column":1,"offset":10953},"end":{"line":158,"column":88,"offset":11214}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Big O notation","position":{"start":{"line":160,"column":5,"offset":11220},"end":{"line":160,"column":19,"offset":11234}}}],"position":{"start":{"line":160,"column":1,"offset":11216},"end":{"line":160,"column":19,"offset":11234}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The complexity is usually expressed with the Big O notation. The wikipedia page about this subject is pretty complex but you can find here a good summary of the different complexity for the most famous data structures and sorting algorithms.","position":{"start":{"line":162,"column":1,"offset":11236},"end":{"line":162,"column":242,"offset":11477}}}],"position":{"start":{"line":162,"column":1,"offset":11236},"end":{"line":162,"column":242,"offset":11477}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Array data structure","position":{"start":{"line":164,"column":5,"offset":11483},"end":{"line":164,"column":29,"offset":11507}}}],"position":{"start":{"line":164,"column":1,"offset":11479},"end":{"line":164,"column":29,"offset":11507}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Qk3UYgeqXamRrFLR.gif\" class=\"graf-image\" /></figure>### Definition","position":{"start":{"line":166,"column":1,"offset":11509},"end":{"line":166,"column":127,"offset":11635}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"An Array data structure, or simply an Array, is a data structure consisting of a collection of elements (values or variables), each identified by at least one array index or key. The simplest type of data structure is a linear array, also called one-dimensional array. From Wikipedia","position":{"start":{"line":168,"column":1,"offset":11637},"end":{"line":168,"column":284,"offset":11920}}}],"position":{"start":{"line":168,"column":1,"offset":11637},"end":{"line":168,"column":284,"offset":11920}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Arrays are among the oldest and most important data structures and are used by every program. They are also used to implement many other data structures.","position":{"start":{"line":170,"column":1,"offset":11922},"end":{"line":170,"column":154,"offset":12075}}}],"position":{"start":{"line":170,"column":1,"offset":11922},"end":{"line":170,"column":154,"offset":12075}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Complexity","position":{"start":{"line":172,"column":2,"offset":12078},"end":{"line":172,"column":12,"offset":12088}}}],"position":{"start":{"line":172,"column":1,"offset":12077},"end":{"line":172,"column":13,"offset":12089}}},{"type":"text","value":"\n","position":{"start":{"line":172,"column":13,"offset":12089},"end":{"line":173,"column":1,"offset":12090}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Average","position":{"start":{"line":173,"column":2,"offset":12091},"end":{"line":173,"column":9,"offset":12098}}}],"position":{"start":{"line":173,"column":1,"offset":12090},"end":{"line":173,"column":10,"offset":12099}}},{"type":"text","value":"\n","position":{"start":{"line":173,"column":10,"offset":12099},"end":{"line":174,"column":1,"offset":12100}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Access Search Insertion Deletion","position":{"start":{"line":174,"column":2,"offset":12101},"end":{"line":174,"column":34,"offset":12133}}}],"position":{"start":{"line":174,"column":1,"offset":12100},"end":{"line":174,"column":35,"offset":12134}}}],"position":{"start":{"line":172,"column":1,"offset":12077},"end":{"line":174,"column":35,"offset":12134}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"O(1) O(n) O(1) O(n)","position":{"start":{"line":176,"column":1,"offset":12136},"end":{"line":176,"column":20,"offset":12155}}}],"position":{"start":{"line":176,"column":1,"offset":12136},"end":{"line":176,"column":20,"offset":12155}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*-BJ2hU-CZO2kuzu4x5a53g.png\" class=\"graf-image\" /></figure>indexvalue0 … this is the first value, stored at zero position","position":{"start":{"line":178,"column":1,"offset":12157},"end":{"line":178,"column":181,"offset":12337}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"b953\">","position":{"start":{"line":180,"column":5,"offset":12343},"end":{"line":180,"column":21,"offset":12359}}},{"type":"text","value":"The index of an array ","position":{"start":{"line":180,"column":21,"offset":12359},"end":{"line":180,"column":43,"offset":12381}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"runs in sequence","position":{"start":{"line":180,"column":45,"offset":12383},"end":{"line":180,"column":61,"offset":12399}}}],"position":{"start":{"line":180,"column":43,"offset":12381},"end":{"line":180,"column":63,"offset":12401}}},{"type":"raw","value":"</span>","position":{"start":{"line":180,"column":63,"offset":12401},"end":{"line":180,"column":70,"offset":12408}}}],"position":{"start":{"line":180,"column":1,"offset":12339},"end":{"line":181,"column":1,"offset":12409}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"This could be useful for storing data that are required to be ordered, such as rankings or queues","position":{"start":{"line":182,"column":5,"offset":12414},"end":{"line":182,"column":102,"offset":12511}}}],"position":{"start":{"line":182,"column":1,"offset":12410},"end":{"line":183,"column":1,"offset":12512}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"In JavaScript, array's value could be mixed; meaning value of each index could be of different data, be it String, Number or even Objects","position":{"start":{"line":184,"column":5,"offset":12517},"end":{"line":184,"column":142,"offset":12654}}}],"position":{"start":{"line":184,"column":1,"offset":12513},"end":{"line":184,"column":142,"offset":12654}}},{"type":"text","value":"\n"}],"position":{"start":{"line":180,"column":1,"offset":12339},"end":{"line":184,"column":142,"offset":12654}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"2. Objects","position":{"start":{"line":186,"column":5,"offset":12660},"end":{"line":186,"column":15,"offset":12670}}}],"position":{"start":{"line":186,"column":1,"offset":12656},"end":{"line":186,"column":15,"offset":12670}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Think of objects as a logical grouping of a bunch of properties.","position":{"start":{"line":188,"column":1,"offset":12672},"end":{"line":188,"column":65,"offset":12736}}}],"position":{"start":{"line":188,"column":1,"offset":12672},"end":{"line":188,"column":65,"offset":12736}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Properties could be some variable that it's storing or some methods that it's using.","position":{"start":{"line":190,"column":1,"offset":12738},"end":{"line":190,"column":85,"offset":12822}}}],"position":{"start":{"line":190,"column":1,"offset":12738},"end":{"line":190,"column":85,"offset":12822}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I also visualize an object as a table.","position":{"start":{"line":192,"column":1,"offset":12824},"end":{"line":192,"column":39,"offset":12862}}}],"position":{"start":{"line":192,"column":1,"offset":12824},"end":{"line":192,"column":39,"offset":12862}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The main difference is that object's \"index\" need not be numbers and is not necessarily sequenced.","position":{"start":{"line":194,"column":1,"offset":12864},"end":{"line":194,"column":99,"offset":12962}}}],"position":{"start":{"line":194,"column":1,"offset":12864},"end":{"line":194,"column":99,"offset":12962}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/1200/1*KVZkD2zrgEa_47igW8Hq8g.png\" class=\"graf-image\" /></figure>","position":{"start":{"line":196,"column":1,"offset":12964},"end":{"line":196,"column":120,"offset":13083}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Hash Table","position":{"start":{"line":198,"column":5,"offset":13089},"end":{"line":198,"column":19,"offset":13103}}}],"position":{"start":{"line":198,"column":1,"offset":13085},"end":{"line":198,"column":19,"offset":13103}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*avbxLAFocSV6vsl5.gif\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*3GJiRoLyEoZ_aIlO\" class=\"graf-image\" /></figure>### *Definition*","position":{"start":{"line":200,"column":1,"offset":13105},"end":{"line":200,"column":237,"offset":13341}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Hash Table (Hash Map) is a data structure used to implement an associative array, a structure that can map keys to values. A Hash Table uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found. From Wikipedia","position":{"start":{"line":202,"column":4,"offset":13346},"end":{"line":202,"column":275,"offset":13617}}}],"position":{"start":{"line":202,"column":3,"offset":13345},"end":{"line":202,"column":276,"offset":13618}}}],"position":{"start":{"line":202,"column":3,"offset":13345},"end":{"line":202,"column":276,"offset":13618}}},{"type":"text","value":"\n"}],"position":{"start":{"line":202,"column":1,"offset":13343},"end":{"line":202,"column":276,"offset":13618}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hash Tables are considered the more efficient data structure for lookup and for this reason, they are widely used.","position":{"start":{"line":204,"column":1,"offset":13620},"end":{"line":204,"column":115,"offset":13734}}}],"position":{"start":{"line":204,"column":1,"offset":13620},"end":{"line":204,"column":115,"offset":13734}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Complexity\nAverage\nAccess Search Insertion Deletion","position":{"start":{"line":206,"column":1,"offset":13736},"end":{"line":208,"column":33,"offset":13787}}}],"position":{"start":{"line":206,"column":1,"offset":13736},"end":{"line":208,"column":33,"offset":13787}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"f63f\">","position":{"start":{"line":210,"column":5,"offset":13793},"end":{"line":210,"column":21,"offset":13809}}},{"type":"text","value":"O(1) O(1) O(1)","position":{"start":{"line":210,"column":21,"offset":13809},"end":{"line":210,"column":35,"offset":13823}}},{"type":"raw","value":"</span>","position":{"start":{"line":210,"column":35,"offset":13823},"end":{"line":210,"column":42,"offset":13830}}}],"position":{"start":{"line":210,"column":1,"offset":13789},"end":{"line":210,"column":42,"offset":13830}}},{"type":"text","value":"\n"}],"position":{"start":{"line":210,"column":1,"offset":13789},"end":{"line":210,"column":42,"offset":13830}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The code","position":{"start":{"line":212,"column":4,"offset":13835},"end":{"line":212,"column":12,"offset":13843}}}],"position":{"start":{"line":212,"column":3,"offset":13834},"end":{"line":212,"column":13,"offset":13844}}}],"position":{"start":{"line":212,"column":3,"offset":13834},"end":{"line":212,"column":13,"offset":13844}}},{"type":"text","value":"\n"}],"position":{"start":{"line":212,"column":1,"offset":13832},"end":{"line":212,"column":13,"offset":13844}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note, here I am storing another object for every hash in my Hash Table.","position":{"start":{"line":214,"column":1,"offset":13846},"end":{"line":214,"column":72,"offset":13917}}}],"position":{"start":{"line":214,"column":1,"offset":13846},"end":{"line":214,"column":72,"offset":13917}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Set","position":{"start":{"line":216,"column":5,"offset":13923},"end":{"line":216,"column":12,"offset":13930}}}],"position":{"start":{"line":216,"column":1,"offset":13919},"end":{"line":216,"column":12,"offset":13930}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Sets","position":{"start":{"line":218,"column":5,"offset":13936},"end":{"line":218,"column":9,"offset":13940}}}],"position":{"start":{"line":218,"column":1,"offset":13932},"end":{"line":218,"column":9,"offset":13940}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sets are pretty much what it sounds like. It's the same intuition as Set in Mathematics. I visualize Sets as Venn Diagrams.","position":{"start":{"line":220,"column":1,"offset":13942},"end":{"line":220,"column":124,"offset":14065}}}],"position":{"start":{"line":220,"column":1,"offset":13942},"end":{"line":220,"column":124,"offset":14065}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*AIQljh9p8Baw9TnE.png\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*gOE33ANZP2ujbjIG\" class=\"graf-image\" /></figure>### *Definition*","position":{"start":{"line":222,"column":1,"offset":14067},"end":{"line":222,"column":237,"offset":14303}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Set is an abstract data type that can store certain values, without any particular order, and no repeated values. It is a computer implementation of the mathematical concept of a finite Set. From Wikipedia","position":{"start":{"line":224,"column":4,"offset":14308},"end":{"line":224,"column":211,"offset":14515}}}],"position":{"start":{"line":224,"column":3,"offset":14307},"end":{"line":224,"column":212,"offset":14516}}}],"position":{"start":{"line":224,"column":3,"offset":14307},"end":{"line":224,"column":212,"offset":14516}}},{"type":"text","value":"\n"}],"position":{"start":{"line":224,"column":1,"offset":14305},"end":{"line":224,"column":212,"offset":14516}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The Set data structure is usually used to test whether elements belong to set of values. Rather then only containing elements, Sets are more used to perform operations on multiple values at once with methods such as union, intersect, etc…","position":{"start":{"line":226,"column":1,"offset":14518},"end":{"line":226,"column":239,"offset":14756}}}],"position":{"start":{"line":226,"column":1,"offset":14518},"end":{"line":226,"column":239,"offset":14756}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Complexity\nAverage\nAccess Search Insertion Deletion","position":{"start":{"line":228,"column":1,"offset":14758},"end":{"line":230,"column":33,"offset":14809}}}],"position":{"start":{"line":228,"column":1,"offset":14758},"end":{"line":230,"column":33,"offset":14809}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"daa6\">","position":{"start":{"line":232,"column":5,"offset":14815},"end":{"line":232,"column":21,"offset":14831}}},{"type":"text","value":"O(n) O(n) O(n)","position":{"start":{"line":232,"column":21,"offset":14831},"end":{"line":232,"column":35,"offset":14845}}},{"type":"raw","value":"</span>","position":{"start":{"line":232,"column":35,"offset":14845},"end":{"line":232,"column":42,"offset":14852}}}],"position":{"start":{"line":232,"column":1,"offset":14811},"end":{"line":232,"column":42,"offset":14852}}},{"type":"text","value":"\n"}],"position":{"start":{"line":232,"column":1,"offset":14811},"end":{"line":232,"column":42,"offset":14852}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The code","position":{"start":{"line":234,"column":4,"offset":14857},"end":{"line":234,"column":12,"offset":14865}}}],"position":{"start":{"line":234,"column":3,"offset":14856},"end":{"line":234,"column":13,"offset":14866}}}],"position":{"start":{"line":234,"column":3,"offset":14856},"end":{"line":234,"column":13,"offset":14866}}},{"type":"text","value":"\n"}],"position":{"start":{"line":234,"column":1,"offset":14854},"end":{"line":234,"column":13,"offset":14866}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Singly Linked List","position":{"start":{"line":236,"column":5,"offset":14872},"end":{"line":236,"column":27,"offset":14894}}}],"position":{"start":{"line":236,"column":1,"offset":14868},"end":{"line":236,"column":27,"offset":14894}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*fLs64rV-Xq19aVCA.gif\" class=\"graf-image\" /></figure>### *Definition*","position":{"start":{"line":238,"column":1,"offset":14896},"end":{"line":238,"column":129,"offset":15024}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Singly Linked List is a linear collection of data elements, called nodes pointing to the next node by means of pointer. It is a data structure consisting of a group of nodes which together represent a sequence. Under the simplest form, each node is composed of data and a reference (in other words, a link) to the next node in the sequence.","position":{"start":{"line":240,"column":4,"offset":15029},"end":{"line":240,"column":346,"offset":15371}}}],"position":{"start":{"line":240,"column":3,"offset":15028},"end":{"line":240,"column":347,"offset":15372}}}],"position":{"start":{"line":240,"column":3,"offset":15028},"end":{"line":240,"column":347,"offset":15372}}},{"type":"text","value":"\n"}],"position":{"start":{"line":240,"column":1,"offset":15026},"end":{"line":240,"column":347,"offset":15372}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Linked Lists are among the simplest and most common data structures because it allows for efficient insertion or removal of elements from any position in the sequence.","position":{"start":{"line":242,"column":1,"offset":15374},"end":{"line":242,"column":168,"offset":15541}}}],"position":{"start":{"line":242,"column":1,"offset":15374},"end":{"line":242,"column":168,"offset":15541}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)","position":{"start":{"line":244,"column":1,"offset":15543},"end":{"line":247,"column":20,"offset":15614}}}],"position":{"start":{"line":244,"column":1,"offset":15543},"end":{"line":247,"column":20,"offset":15614}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The code","position":{"start":{"line":249,"column":4,"offset":15619},"end":{"line":249,"column":12,"offset":15627}}}],"position":{"start":{"line":249,"column":3,"offset":15618},"end":{"line":249,"column":13,"offset":15628}}}],"position":{"start":{"line":249,"column":3,"offset":15618},"end":{"line":249,"column":13,"offset":15628}}},{"type":"text","value":"\n"}],"position":{"start":{"line":249,"column":1,"offset":15616},"end":{"line":249,"column":13,"offset":15628}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":251,"column":1,"offset":15630},"end":{"line":251,"column":4,"offset":15633}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Doubly Linked List","position":{"start":{"line":253,"column":5,"offset":15639},"end":{"line":253,"column":27,"offset":15661}}}],"position":{"start":{"line":253,"column":1,"offset":15635},"end":{"line":253,"column":27,"offset":15661}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*TQXiR-L_itiG3WP-.gif\" class=\"graf-image\" /></figure>### *Definition*","position":{"start":{"line":255,"column":1,"offset":15663},"end":{"line":255,"column":129,"offset":15791}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Doubly Linked List is a linked data structure that consists of a set of sequentially linked records called nodes. Each node contains two fields, called links, that are references to the previous and to the next node in the sequence of nodes. From Wikipedia","position":{"start":{"line":257,"column":4,"offset":15796},"end":{"line":257,"column":262,"offset":16054}}}],"position":{"start":{"line":257,"column":3,"offset":15795},"end":{"line":257,"column":263,"offset":16055}}}],"position":{"start":{"line":257,"column":3,"offset":15795},"end":{"line":257,"column":263,"offset":16055}}},{"type":"text","value":"\n"}],"position":{"start":{"line":257,"column":1,"offset":15793},"end":{"line":257,"column":263,"offset":16055}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Having two node links allow traversal in either direction but adding or removing a node in a doubly linked list requires changing more links than the same operations on a Singly Linked List.","position":{"start":{"line":259,"column":1,"offset":16057},"end":{"line":259,"column":191,"offset":16247}}}],"position":{"start":{"line":259,"column":1,"offset":16057},"end":{"line":259,"column":191,"offset":16247}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)","position":{"start":{"line":261,"column":1,"offset":16249},"end":{"line":264,"column":20,"offset":16320}}}],"position":{"start":{"line":261,"column":1,"offset":16249},"end":{"line":264,"column":20,"offset":16320}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The code","position":{"start":{"line":266,"column":4,"offset":16325},"end":{"line":266,"column":12,"offset":16333}}}],"position":{"start":{"line":266,"column":3,"offset":16324},"end":{"line":266,"column":13,"offset":16334}}}],"position":{"start":{"line":266,"column":3,"offset":16324},"end":{"line":266,"column":13,"offset":16334}}},{"type":"text","value":"\n"}],"position":{"start":{"line":266,"column":1,"offset":16322},"end":{"line":266,"column":13,"offset":16334}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Stack","position":{"start":{"line":268,"column":5,"offset":16340},"end":{"line":268,"column":14,"offset":16349}}}],"position":{"start":{"line":268,"column":1,"offset":16336},"end":{"line":268,"column":14,"offset":16349}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/1200/0*qsjYW-Lvfo22ecLE.gif\" class=\"graf-image\" /></figure>","position":{"start":{"line":270,"column":1,"offset":16351},"end":{"line":270,"column":114,"offset":16464}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Definition","position":{"start":{"line":272,"column":6,"offset":16471},"end":{"line":272,"column":16,"offset":16481}}}],"position":{"start":{"line":272,"column":5,"offset":16470},"end":{"line":272,"column":17,"offset":16482}}}],"position":{"start":{"line":272,"column":1,"offset":16466},"end":{"line":272,"column":17,"offset":16482}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Stack is an abstract data type that serves as a collection of elements, with two principal operations: push, which adds an element to the collection, and pop, which removes the most recently added element that was not yet removed. The order in which elements come off a Stack gives rise to its alternative name, LIFO (for last in, first out). From Wikipedia","position":{"start":{"line":274,"column":4,"offset":16487},"end":{"line":274,"column":363,"offset":16846}}}],"position":{"start":{"line":274,"column":3,"offset":16486},"end":{"line":274,"column":364,"offset":16847}}}],"position":{"start":{"line":274,"column":3,"offset":16486},"end":{"line":274,"column":364,"offset":16847}}},{"type":"text","value":"\n"}],"position":{"start":{"line":274,"column":1,"offset":16484},"end":{"line":274,"column":364,"offset":16847}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A Stack often has a third method peek which allows to check the last pushed element without popping it.","position":{"start":{"line":276,"column":1,"offset":16849},"end":{"line":276,"column":104,"offset":16952}}}],"position":{"start":{"line":276,"column":1,"offset":16849},"end":{"line":276,"column":104,"offset":16952}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)","position":{"start":{"line":278,"column":1,"offset":16954},"end":{"line":281,"column":20,"offset":17025}}}],"position":{"start":{"line":278,"column":1,"offset":16954},"end":{"line":281,"column":20,"offset":17025}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The code","position":{"start":{"line":283,"column":4,"offset":17030},"end":{"line":283,"column":12,"offset":17038}}}],"position":{"start":{"line":283,"column":3,"offset":17029},"end":{"line":283,"column":13,"offset":17039}}}],"position":{"start":{"line":283,"column":3,"offset":17029},"end":{"line":283,"column":13,"offset":17039}}},{"type":"text","value":"\n"}],"position":{"start":{"line":283,"column":1,"offset":17027},"end":{"line":283,"column":13,"offset":17039}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Queue","position":{"start":{"line":285,"column":5,"offset":17045},"end":{"line":285,"column":14,"offset":17054}}}],"position":{"start":{"line":285,"column":1,"offset":17041},"end":{"line":285,"column":14,"offset":17054}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*YvfuX5tKP7-V0p7v.gif\" class=\"graf-image\" /></figure>### *Definition*","position":{"start":{"line":287,"column":1,"offset":17056},"end":{"line":287,"column":129,"offset":17184}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Queue is a particular kind of abstract data type or collection in which the entities in the collection are kept in order and the principal operations are the addition of entities to the rear terminal position, known as enqueue, and removal of entities from the front terminal position, known as dequeue. This makes the Queue a First-In-First-Out (FIFO) data structure. In a FIFO data structure, the first element added to the Queue will be the first one to be removed.","position":{"start":{"line":289,"column":4,"offset":17189},"end":{"line":289,"column":474,"offset":17659}}}],"position":{"start":{"line":289,"column":3,"offset":17188},"end":{"line":289,"column":475,"offset":17660}}}],"position":{"start":{"line":289,"column":3,"offset":17188},"end":{"line":289,"column":475,"offset":17660}}},{"type":"text","value":"\n"}],"position":{"start":{"line":289,"column":1,"offset":17186},"end":{"line":289,"column":475,"offset":17660}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As for the Stack data structure, a peek operation is often added to the Queue data structure. It returns the value of the front element without dequeuing it.","position":{"start":{"line":291,"column":1,"offset":17662},"end":{"line":291,"column":158,"offset":17819}}}],"position":{"start":{"line":291,"column":1,"offset":17662},"end":{"line":291,"column":158,"offset":17819}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(n)","position":{"start":{"line":293,"column":1,"offset":17821},"end":{"line":296,"column":20,"offset":17892}}}],"position":{"start":{"line":293,"column":1,"offset":17821},"end":{"line":296,"column":20,"offset":17892}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The code","position":{"start":{"line":298,"column":4,"offset":17897},"end":{"line":298,"column":12,"offset":17905}}}],"position":{"start":{"line":298,"column":3,"offset":17896},"end":{"line":298,"column":13,"offset":17906}}}],"position":{"start":{"line":298,"column":3,"offset":17896},"end":{"line":298,"column":13,"offset":17906}}},{"type":"text","value":"\n"}],"position":{"start":{"line":298,"column":1,"offset":17894},"end":{"line":298,"column":13,"offset":17906}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Tree","position":{"start":{"line":300,"column":5,"offset":17912},"end":{"line":300,"column":13,"offset":17920}}}],"position":{"start":{"line":300,"column":1,"offset":17908},"end":{"line":300,"column":13,"offset":17920}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*yUiQ-NaPKeLQnN7n\" class=\"graf-image\" /></figure>### *Definition*","position":{"start":{"line":302,"column":1,"offset":17922},"end":{"line":302,"column":125,"offset":18046}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Tree is a widely used data structure that simulates a hierarchical tree structure, with a root value and subtrees of children with a parent node. A tree data structure can be defined recursively as a collection of nodes (starting at a root node), where each node is a data structure consisting of a value, together with a list of references to nodes (the \"children\"), with the constraints that no reference is duplicated, and none points to the root node. From Wikipedia","position":{"start":{"line":304,"column":4,"offset":18051},"end":{"line":304,"column":476,"offset":18523}}}],"position":{"start":{"line":304,"column":3,"offset":18050},"end":{"line":304,"column":477,"offset":18524}}}],"position":{"start":{"line":304,"column":3,"offset":18050},"end":{"line":304,"column":477,"offset":18524}}},{"type":"text","value":"\n"}],"position":{"start":{"line":304,"column":1,"offset":18048},"end":{"line":304,"column":477,"offset":18524}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(n) O(n)\nTo get a full overview of the time and space complexity of the Tree data structure, have a look to this excellent Big O cheat sheet.","position":{"start":{"line":306,"column":1,"offset":18526},"end":{"line":310,"column":133,"offset":18730}}}],"position":{"start":{"line":306,"column":1,"offset":18526},"end":{"line":310,"column":133,"offset":18730}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*DCdQiB6XqBJCrFRz12BwqA.png\" class=\"graf-image\" /></figure>*The code*","position":{"start":{"line":312,"column":1,"offset":18732},"end":{"line":312,"column":129,"offset":18860}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Graph","position":{"start":{"line":314,"column":5,"offset":18866},"end":{"line":314,"column":14,"offset":18875}}}],"position":{"start":{"line":314,"column":1,"offset":18862},"end":{"line":314,"column":14,"offset":18875}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*q31mL1kjFWlIzw3l.gif\" class=\"graf-image\" /></figure>### *Definition*","position":{"start":{"line":316,"column":1,"offset":18877},"end":{"line":316,"column":129,"offset":19005}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Graph data structure consists of a finite (and possibly mutable) set of vertices or nodes or points, together with a set of unordered pairs of these vertices for an undirected Graph or a set of ordered pairs for a directed Graph. These pairs are known as edges, arcs, or lines for an undirected Graph and as arrows, directed edges, directed arcs, or directed lines for a directed Graph. The vertices may be part of the Graph structure, or may be external entities represented by integer indices or references.","position":{"start":{"line":318,"column":4,"offset":19010},"end":{"line":318,"column":515,"offset":19521}}}],"position":{"start":{"line":318,"column":3,"offset":19009},"end":{"line":318,"column":516,"offset":19522}}}],"position":{"start":{"line":318,"column":3,"offset":19009},"end":{"line":318,"column":516,"offset":19522}}},{"type":"text","value":"\n"}],"position":{"start":{"line":318,"column":1,"offset":19007},"end":{"line":318,"column":516,"offset":19522}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"f896\">","position":{"start":{"line":320,"column":5,"offset":19528},"end":{"line":320,"column":21,"offset":19544}}},{"type":"text","value":"A graph is ","position":{"start":{"line":320,"column":21,"offset":19544},"end":{"line":320,"column":32,"offset":19555}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"any","position":{"start":{"line":320,"column":34,"offset":19557},"end":{"line":320,"column":37,"offset":19560}}}],"position":{"start":{"line":320,"column":32,"offset":19555},"end":{"line":320,"column":39,"offset":19562}}},{"type":"text","value":" collection of nodes and edges.","position":{"start":{"line":320,"column":39,"offset":19562},"end":{"line":320,"column":70,"offset":19593}}},{"type":"raw","value":"</span>","position":{"start":{"line":320,"column":70,"offset":19593},"end":{"line":320,"column":77,"offset":19600}}}],"position":{"start":{"line":320,"column":1,"offset":19524},"end":{"line":320,"column":77,"offset":19600}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"fbda\">","position":{"start":{"line":321,"column":5,"offset":19605},"end":{"line":321,"column":21,"offset":19621}}},{"type":"text","value":"Much more relaxed in structure than a tree.","position":{"start":{"line":321,"column":21,"offset":19621},"end":{"line":321,"column":64,"offset":19664}}},{"type":"raw","value":"</span>","position":{"start":{"line":321,"column":64,"offset":19664},"end":{"line":321,"column":71,"offset":19671}}}],"position":{"start":{"line":321,"column":1,"offset":19601},"end":{"line":321,"column":71,"offset":19671}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"5281\">","position":{"start":{"line":322,"column":5,"offset":19676},"end":{"line":322,"column":21,"offset":19692}}},{"type":"text","value":"It doesn't need to have a root node (not every node needs to be accessible from a single node)","position":{"start":{"line":322,"column":21,"offset":19692},"end":{"line":322,"column":115,"offset":19786}}},{"type":"raw","value":"</span>","position":{"start":{"line":322,"column":115,"offset":19786},"end":{"line":322,"column":122,"offset":19793}}}],"position":{"start":{"line":322,"column":1,"offset":19672},"end":{"line":322,"column":122,"offset":19793}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"0c79\">","position":{"start":{"line":323,"column":5,"offset":19798},"end":{"line":323,"column":21,"offset":19814}}},{"type":"text","value":"It can have cycles (a group of nodes whose paths begin and end at the same node)","position":{"start":{"line":323,"column":21,"offset":19814},"end":{"line":323,"column":101,"offset":19894}}},{"type":"raw","value":"</span>","position":{"start":{"line":323,"column":101,"offset":19894},"end":{"line":323,"column":108,"offset":19901}}}],"position":{"start":{"line":323,"column":1,"offset":19794},"end":{"line":323,"column":108,"offset":19901}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"4afc\">","position":{"start":{"line":324,"column":5,"offset":19906},"end":{"line":324,"column":21,"offset":19922}}},{"type":"text","value":"Cycles are not always \"isolated\", they can be one part of a larger graph. You can detect them by starting your search on a specific node and finding a path that takes you back to that same node.","position":{"start":{"line":324,"column":21,"offset":19922},"end":{"line":324,"column":215,"offset":20116}}},{"type":"raw","value":"</span>","position":{"start":{"line":324,"column":215,"offset":20116},"end":{"line":324,"column":222,"offset":20123}}}],"position":{"start":{"line":324,"column":1,"offset":19902},"end":{"line":324,"column":222,"offset":20123}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"8f45\">","position":{"start":{"line":325,"column":5,"offset":20128},"end":{"line":325,"column":21,"offset":20144}}},{"type":"text","value":"Any number of edges may leave a given node","position":{"start":{"line":325,"column":21,"offset":20144},"end":{"line":325,"column":63,"offset":20186}}},{"type":"raw","value":"</span>","position":{"start":{"line":325,"column":63,"offset":20186},"end":{"line":325,"column":70,"offset":20193}}}],"position":{"start":{"line":325,"column":1,"offset":20124},"end":{"line":325,"column":70,"offset":20193}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"51cf\">","position":{"start":{"line":326,"column":5,"offset":20198},"end":{"line":326,"column":21,"offset":20214}}},{"type":"text","value":"A Path is a sequence of nodes on a graph","position":{"start":{"line":326,"column":21,"offset":20214},"end":{"line":326,"column":61,"offset":20254}}},{"type":"raw","value":"</span>","position":{"start":{"line":326,"column":61,"offset":20254},"end":{"line":326,"column":68,"offset":20261}}}],"position":{"start":{"line":326,"column":1,"offset":20194},"end":{"line":326,"column":68,"offset":20261}}},{"type":"text","value":"\n"}],"position":{"start":{"line":320,"column":1,"offset":19524},"end":{"line":326,"column":68,"offset":20261}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Cycle Visual","position":{"start":{"line":328,"column":5,"offset":20267},"end":{"line":328,"column":17,"offset":20279}}}],"position":{"start":{"line":328,"column":1,"offset":20263},"end":{"line":328,"column":17,"offset":20279}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*dn1BqCdXdFg4FCVSz6uArA.png\" class=\"graf-image\" /></figure>A Graph data structure may also associate to each edge some edge value, such as a symbolic label or a numeric attribute (cost, capacity, length, etc.).","position":{"start":{"line":330,"column":1,"offset":20281},"end":{"line":330,"column":270,"offset":20550}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Representation\nThere are different ways of representing a graph, each of them with its own advantages and disadvantages. Here are the main 2:","position":{"start":{"line":332,"column":1,"offset":20552},"end":{"line":333,"column":127,"offset":20693}}}],"position":{"start":{"line":332,"column":1,"offset":20552},"end":{"line":333,"column":127,"offset":20693}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Adjacency list: For every vertex a list of adjacent vertices is stored. This can be viewed as storing the list of edges. This data structure allows the storage of additional data on the vertices and edges.\nAdjacency matrix: Data are stored in a two-dimensional matrix, in which the rows represent source vertices and columns represent destination vertices. The data on the edges and vertices must be stored externally.","position":{"start":{"line":335,"column":1,"offset":20695},"end":{"line":336,"column":213,"offset":21113}}}],"position":{"start":{"line":335,"column":1,"offset":20695},"end":{"line":336,"column":213,"offset":21113}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Graph","position":{"start":{"line":338,"column":1,"offset":21115},"end":{"line":338,"column":6,"offset":21120}}}],"position":{"start":{"line":338,"column":1,"offset":21115},"end":{"line":338,"column":6,"offset":21120}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The code","position":{"start":{"line":340,"column":4,"offset":21125},"end":{"line":340,"column":12,"offset":21133}}}],"position":{"start":{"line":340,"column":3,"offset":21124},"end":{"line":340,"column":13,"offset":21134}}}],"position":{"start":{"line":340,"column":3,"offset":21124},"end":{"line":340,"column":13,"offset":21134}}},{"type":"text","value":"\n"}],"position":{"start":{"line":340,"column":1,"offset":21122},"end":{"line":340,"column":13,"offset":21134}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":342,"column":1,"offset":21136},"end":{"line":342,"column":4,"offset":21139}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Leetcode","position":{"start":{"line":344,"column":3,"offset":21143},"end":{"line":344,"column":11,"offset":21151}}}],"position":{"start":{"line":344,"column":1,"offset":21141},"end":{"line":344,"column":11,"offset":21151}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Data Structures & Algorithms","position":{"start":{"line":346,"column":4,"offset":21156},"end":{"line":346,"column":32,"offset":21184}}}],"position":{"start":{"line":346,"column":1,"offset":21153},"end":{"line":346,"column":32,"offset":21184}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/Data-Structures-Algos-Codebase"},"children":[{"type":"text","value":"DS Algo Codebase","position":{"start":{"line":348,"column":2,"offset":21187},"end":{"line":348,"column":18,"offset":21203}}}],"position":{"start":{"line":348,"column":1,"offset":21186},"end":{"line":348,"column":77,"offset":21262}}}],"position":{"start":{"line":348,"column":1,"offset":21186},"end":{"line":348,"column":77,"offset":21262}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#115-distinct-subsequenceshttpsleetcodecomproblemsdistinct-subsequencesdescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":350,"column":2,"offset":21265},"end":{"line":350,"column":142,"offset":21405}}}],"position":{"start":{"line":350,"column":1,"offset":21264},"end":{"line":350,"column":227,"offset":21490}}}],"position":{"start":{"line":350,"column":1,"offset":21264},"end":{"line":350,"column":227,"offset":21490}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":352,"column":4,"offset":21495},"end":{"line":352,"column":6,"offset":21497}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/distinct-subsequences/description/"},"children":[{"type":"text","value":"115. Distinct Subsequences","position":{"start":{"line":352,"column":7,"offset":21498},"end":{"line":352,"column":33,"offset":21524}}}],"position":{"start":{"line":352,"column":6,"offset":21497},"end":{"line":352,"column":100,"offset":21591}}}],"position":{"start":{"line":352,"column":1,"offset":21492},"end":{"line":352,"column":100,"offset":21591}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":354,"column":5,"offset":21597},"end":{"line":354,"column":13,"offset":21605}}}],"position":{"start":{"line":354,"column":1,"offset":21593},"end":{"line":354,"column":13,"offset":21605}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a string ","position":{"start":{"line":356,"column":1,"offset":21607},"end":{"line":356,"column":16,"offset":21622}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"S","position":{"start":{"line":356,"column":18,"offset":21624},"end":{"line":356,"column":19,"offset":21625}}}],"position":{"start":{"line":356,"column":16,"offset":21622},"end":{"line":356,"column":21,"offset":21627}}},{"type":"text","value":" and a string ","position":{"start":{"line":356,"column":21,"offset":21627},"end":{"line":356,"column":35,"offset":21641}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"T","position":{"start":{"line":356,"column":37,"offset":21643},"end":{"line":356,"column":38,"offset":21644}}}],"position":{"start":{"line":356,"column":35,"offset":21641},"end":{"line":356,"column":40,"offset":21646}}},{"type":"text","value":", count the number of distinct subsequences of ","position":{"start":{"line":356,"column":40,"offset":21646},"end":{"line":356,"column":87,"offset":21693}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"S","position":{"start":{"line":356,"column":89,"offset":21695},"end":{"line":356,"column":90,"offset":21696}}}],"position":{"start":{"line":356,"column":87,"offset":21693},"end":{"line":356,"column":92,"offset":21698}}},{"type":"text","value":" which equals ","position":{"start":{"line":356,"column":92,"offset":21698},"end":{"line":356,"column":106,"offset":21712}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"T","position":{"start":{"line":356,"column":108,"offset":21714},"end":{"line":356,"column":109,"offset":21715}}}],"position":{"start":{"line":356,"column":106,"offset":21712},"end":{"line":356,"column":111,"offset":21717}}},{"type":"text","value":".","position":{"start":{"line":356,"column":111,"offset":21717},"end":{"line":356,"column":112,"offset":21718}}}],"position":{"start":{"line":356,"column":1,"offset":21607},"end":{"line":356,"column":112,"offset":21718}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, ","position":{"start":{"line":358,"column":1,"offset":21720},"end":{"line":358,"column":209,"offset":21928}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"\"ACE\""}],"position":{"start":{"line":358,"column":209,"offset":21928},"end":{"line":358,"column":216,"offset":21935}}},{"type":"text","value":" is a subsequence of ","position":{"start":{"line":358,"column":216,"offset":21935},"end":{"line":358,"column":237,"offset":21956}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"\"ABCDE\""}],"position":{"start":{"line":358,"column":237,"offset":21956},"end":{"line":358,"column":246,"offset":21965}}},{"type":"text","value":" while ","position":{"start":{"line":358,"column":246,"offset":21965},"end":{"line":358,"column":253,"offset":21972}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"\"AEC\""}],"position":{"start":{"line":358,"column":253,"offset":21972},"end":{"line":358,"column":260,"offset":21979}}},{"type":"text","value":" is not).","position":{"start":{"line":358,"column":260,"offset":21979},"end":{"line":358,"column":269,"offset":21988}}}],"position":{"start":{"line":358,"column":1,"offset":21720},"end":{"line":358,"column":269,"offset":21988}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":360,"column":3,"offset":21992},"end":{"line":360,"column":13,"offset":22002}}}],"position":{"start":{"line":360,"column":1,"offset":21990},"end":{"line":360,"column":15,"offset":22004}}}],"position":{"start":{"line":360,"column":1,"offset":21990},"end":{"line":360,"column":15,"offset":22004}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: S = \"rabbbit\", T = \"rabbit\"\nOutput: 3\nExplanation:\n\nAs shown below, there are 3 ways you can generate \"rabbit\" from S.\n(The caret symbol ^ means the chosen letters)\n\nrabbbit\n^^^^ ^^\nrabbbit\n^^ ^^^^\nrabbbit\n^^^ ^^^\n"}],"position":{"start":{"line":362,"column":1,"offset":22006},"end":{"line":374,"column":12,"offset":22270}}}],"position":{"start":{"line":362,"column":1,"offset":22006},"end":{"line":374,"column":12,"offset":22270}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":376,"column":3,"offset":22274},"end":{"line":376,"column":13,"offset":22284}}}],"position":{"start":{"line":376,"column":1,"offset":22272},"end":{"line":376,"column":15,"offset":22286}}}],"position":{"start":{"line":376,"column":1,"offset":22272},"end":{"line":376,"column":15,"offset":22286}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: S = \"babgbag\", T = \"bag\"\nOutput: 5\nExplanation:\n\nAs shown below, there are 5 ways you can generate \"bag\" from S.\n(The caret symbol ^ means the chosen letters)\n\nbabgbag\n^^ ^\nbabgbag\n^^    ^\nbabgbag\n^    ^^\nbabgbag\n  ^  ^^\nbabgbag\n    ^^^\n"}],"position":{"start":{"line":378,"column":1,"offset":22288},"end":{"line":394,"column":12,"offset":22591}}}],"position":{"start":{"line":378,"column":1,"offset":22288},"end":{"line":394,"column":12,"offset":22591}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":396,"column":5,"offset":22597},"end":{"line":396,"column":14,"offset":22606}}}],"position":{"start":{"line":396,"column":1,"offset":22593},"end":{"line":396,"column":14,"offset":22606}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define ","position":{"start":{"line":398,"column":1,"offset":22608},"end":{"line":398,"column":8,"offset":22615}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"f(i, j)"}],"position":{"start":{"line":398,"column":8,"offset":22615},"end":{"line":398,"column":17,"offset":22624}}},{"type":"text","value":" to be the number of ways that generate ","position":{"start":{"line":398,"column":17,"offset":22624},"end":{"line":398,"column":57,"offset":22664}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"T[0...j)"}],"position":{"start":{"line":398,"column":57,"offset":22664},"end":{"line":398,"column":67,"offset":22674}}},{"type":"text","value":" from ","position":{"start":{"line":398,"column":67,"offset":22674},"end":{"line":398,"column":73,"offset":22680}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"S[0...i)"}],"position":{"start":{"line":398,"column":73,"offset":22680},"end":{"line":398,"column":83,"offset":22690}}},{"type":"text","value":".","position":{"start":{"line":398,"column":83,"offset":22690},"end":{"line":398,"column":84,"offset":22691}}}],"position":{"start":{"line":398,"column":1,"offset":22608},"end":{"line":398,"column":84,"offset":22691}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For ","position":{"start":{"line":400,"column":1,"offset":22693},"end":{"line":400,"column":5,"offset":22697}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"f(i, j)"}],"position":{"start":{"line":400,"column":5,"offset":22697},"end":{"line":400,"column":14,"offset":22706}}},{"type":"text","value":" you can always skip ","position":{"start":{"line":400,"column":14,"offset":22706},"end":{"line":400,"column":35,"offset":22727}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"S[i-1]"}],"position":{"start":{"line":400,"column":35,"offset":22727},"end":{"line":400,"column":43,"offset":22735}}},{"type":"text","value":", but can only take it when ","position":{"start":{"line":400,"column":43,"offset":22735},"end":{"line":400,"column":71,"offset":22763}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"S[i-1] === T[j-1]"}],"position":{"start":{"line":400,"column":71,"offset":22763},"end":{"line":400,"column":90,"offset":22782}}},{"type":"text","value":".","position":{"start":{"line":400,"column":90,"offset":22782},"end":{"line":400,"column":91,"offset":22783}}}],"position":{"start":{"line":400,"column":1,"offset":22693},"end":{"line":400,"column":91,"offset":22783}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"f(0, j) = 0, j > 0 // nothing to delete\nf(i, 0) = 1 // delete all\nf(i, j) = f(i-1, j) + (S[i-1] === T[j-1] ? f(i-1, j-1) : 0)\n"}],"position":{"start":{"line":402,"column":1,"offset":22785},"end":{"line":406,"column":4,"offset":22920}}}],"position":{"start":{"line":402,"column":1,"offset":22785},"end":{"line":406,"column":4,"offset":22920}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Dynamic array can be used.","position":{"start":{"line":408,"column":1,"offset":22922},"end":{"line":408,"column":27,"offset":22948}}}],"position":{"start":{"line":408,"column":1,"offset":22922},"end":{"line":408,"column":27,"offset":22948}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {string} s\n * @param {string} t\n * @return {number}\n */\nlet numDistinct = function (s, t) {\n    const lens = s.length;\n    const lent = t.length;\n    const dp = new Array(lent + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= lens; i++) {\n        for (let j = lent; j >= 1; j--) {\n            if (s[i - 1] === t[j - 1]) {\n                dp[j] += dp[j - 1];\n            }\n        }\n    }\n    return dp[lent];\n};\n"}],"position":{"start":{"line":410,"column":1,"offset":22950},"end":{"line":430,"column":4,"offset":23389}}}],"position":{"start":{"line":410,"column":1,"offset":22950},"end":{"line":430,"column":4,"offset":23389}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":432,"column":1,"offset":23391},"end":{"line":432,"column":4,"offset":23394}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Medium\nRelated Topics:\n\"Tree\": ","position":{"start":{"line":434,"column":1,"offset":23396},"end":{"line":436,"column":9,"offset":23439}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/tree"},"children":[{"type":"text","value":"https://leetcode.com/tag/tree","position":{"start":{"line":436,"column":9,"offset":23439},"end":{"line":436,"column":38,"offset":23468}}}],"position":{"start":{"line":436,"column":9,"offset":23439},"end":{"line":436,"column":38,"offset":23468}}},{"type":"text","value":"\n\"Depth-first Search\": ","position":{"start":{"line":436,"column":38,"offset":23468},"end":{"line":437,"column":23,"offset":23491}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/depth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/depth-first-search","position":{"start":{"line":437,"column":23,"offset":23491},"end":{"line":437,"column":66,"offset":23534}}}],"position":{"start":{"line":437,"column":23,"offset":23491},"end":{"line":437,"column":66,"offset":23534}}},{"type":"text","value":"\nSimilar Questions:\n\"Populating Next Right Pointers in Each Node II\": ","position":{"start":{"line":437,"column":66,"offset":23534},"end":{"line":439,"column":51,"offset":23604}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii"},"children":[{"type":"text","value":"https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii","position":{"start":{"line":439,"column":51,"offset":23604},"end":{"line":439,"column":127,"offset":23680}}}],"position":{"start":{"line":439,"column":51,"offset":23604},"end":{"line":439,"column":127,"offset":23680}}},{"type":"text","value":"\n\"Binary Tree Right Side View\": ","position":{"start":{"line":439,"column":127,"offset":23680},"end":{"line":440,"column":32,"offset":23712}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/binary-tree-right-side-view"},"children":[{"type":"text","value":"https://leetcode.com/problems/binary-tree-right-side-view","position":{"start":{"line":440,"column":32,"offset":23712},"end":{"line":440,"column":89,"offset":23769}}}],"position":{"start":{"line":440,"column":32,"offset":23712},"end":{"line":440,"column":89,"offset":23769}}}],"position":{"start":{"line":434,"column":1,"offset":23396},"end":{"line":440,"column":89,"offset":23769}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":442,"column":1,"offset":23771},"end":{"line":442,"column":4,"offset":23774}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#116-populating-next-right-pointers-in-each-nodehttpsleetcodecomproblemspopulating-next-right-pointers-in-each-nodedescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":444,"column":2,"offset":23777},"end":{"line":444,"column":142,"offset":23917}}}],"position":{"start":{"line":444,"column":1,"offset":23776},"end":{"line":444,"column":271,"offset":24046}}}],"position":{"start":{"line":444,"column":1,"offset":23776},"end":{"line":444,"column":271,"offset":24046}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":446,"column":4,"offset":24051},"end":{"line":446,"column":6,"offset":24053}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/populating-next-right-pointers-in-each-node/description/"},"children":[{"type":"text","value":"116. Populating Next Right Pointers in Each Node","position":{"start":{"line":446,"column":7,"offset":24054},"end":{"line":446,"column":55,"offset":24102}}}],"position":{"start":{"line":446,"column":6,"offset":24053},"end":{"line":446,"column":144,"offset":24191}}}],"position":{"start":{"line":446,"column":1,"offset":24048},"end":{"line":446,"column":144,"offset":24191}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":448,"column":5,"offset":24197},"end":{"line":448,"column":13,"offset":24205}}}],"position":{"start":{"line":448,"column":1,"offset":24193},"end":{"line":448,"column":13,"offset":24205}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a binary tree","position":{"start":{"line":450,"column":1,"offset":24207},"end":{"line":450,"column":20,"offset":24226}}}],"position":{"start":{"line":450,"column":1,"offset":24207},"end":{"line":450,"column":20,"offset":24226}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"struct TreeLinkNode {\n  TreeLinkNode *left;\n  TreeLinkNode *right;\n  TreeLinkNode *next;\n}\n"}],"position":{"start":{"line":452,"column":1,"offset":24228},"end":{"line":459,"column":4,"offset":24327}}}],"position":{"start":{"line":452,"column":1,"offset":24228},"end":{"line":459,"column":4,"offset":24327}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to ","position":{"start":{"line":461,"column":1,"offset":24329},"end":{"line":461,"column":127,"offset":24455}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NULL"}],"position":{"start":{"line":461,"column":127,"offset":24455},"end":{"line":461,"column":133,"offset":24461}}},{"type":"text","value":".","position":{"start":{"line":461,"column":133,"offset":24461},"end":{"line":461,"column":134,"offset":24462}}}],"position":{"start":{"line":461,"column":1,"offset":24329},"end":{"line":461,"column":134,"offset":24462}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Initially, all next pointers are set to ","position":{"start":{"line":463,"column":1,"offset":24464},"end":{"line":463,"column":41,"offset":24504}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NULL"}],"position":{"start":{"line":463,"column":41,"offset":24504},"end":{"line":463,"column":47,"offset":24510}}},{"type":"text","value":".","position":{"start":{"line":463,"column":47,"offset":24510},"end":{"line":463,"column":48,"offset":24511}}}],"position":{"start":{"line":463,"column":1,"offset":24464},"end":{"line":463,"column":48,"offset":24511}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":465,"column":3,"offset":24515},"end":{"line":465,"column":8,"offset":24520}}}],"position":{"start":{"line":465,"column":1,"offset":24513},"end":{"line":465,"column":10,"offset":24522}}}],"position":{"start":{"line":465,"column":1,"offset":24513},"end":{"line":465,"column":10,"offset":24522}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You may only use constant extra space.","position":{"start":{"line":467,"column":5,"offset":24528},"end":{"line":467,"column":43,"offset":24566}}}],"position":{"start":{"line":467,"column":1,"offset":24524},"end":{"line":467,"column":43,"offset":24566}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Recursive approach is fine, implicit stack space does not count as extra space for this problem.","position":{"start":{"line":468,"column":5,"offset":24571},"end":{"line":468,"column":101,"offset":24667}}}],"position":{"start":{"line":468,"column":1,"offset":24567},"end":{"line":468,"column":101,"offset":24667}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).","position":{"start":{"line":469,"column":5,"offset":24672},"end":{"line":469,"column":127,"offset":24794}}}],"position":{"start":{"line":469,"column":1,"offset":24668},"end":{"line":469,"column":127,"offset":24794}}},{"type":"text","value":"\n"}],"position":{"start":{"line":467,"column":1,"offset":24524},"end":{"line":469,"column":127,"offset":24794}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":471,"column":3,"offset":24798},"end":{"line":471,"column":11,"offset":24806}}}],"position":{"start":{"line":471,"column":1,"offset":24796},"end":{"line":471,"column":13,"offset":24808}}}],"position":{"start":{"line":471,"column":1,"offset":24796},"end":{"line":471,"column":13,"offset":24808}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given the following perfect binary tree,","position":{"start":{"line":473,"column":1,"offset":24810},"end":{"line":473,"column":41,"offset":24850}}}],"position":{"start":{"line":473,"column":1,"offset":24810},"end":{"line":473,"column":41,"offset":24850}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"     1\n   /  \\\n  2    3\n / \\  / \\\n4  5  6  7\n"}],"position":{"start":{"line":475,"column":1,"offset":24852},"end":{"line":482,"column":4,"offset":24905}}}],"position":{"start":{"line":475,"column":1,"offset":24852},"end":{"line":482,"column":4,"offset":24905}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After calling your function, the tree should look like:","position":{"start":{"line":484,"column":1,"offset":24907},"end":{"line":484,"column":56,"offset":24962}}}],"position":{"start":{"line":484,"column":1,"offset":24907},"end":{"line":484,"column":56,"offset":24962}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"     1 -> NULL\n   /  \\\n  2 -> 3 -> NULL\n / \\  / \\\n4->5->6->7 -> NULL\n"}],"position":{"start":{"line":486,"column":1,"offset":24964},"end":{"line":493,"column":4,"offset":25041}}}],"position":{"start":{"line":486,"column":1,"offset":24964},"end":{"line":493,"column":4,"offset":25041}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":495,"column":5,"offset":25047},"end":{"line":495,"column":14,"offset":25056}}}],"position":{"start":{"line":495,"column":1,"offset":25043},"end":{"line":495,"column":14,"offset":25056}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"ONE","position":{"start":{"line":497,"column":6,"offset":25063},"end":{"line":497,"column":9,"offset":25066}}}],"position":{"start":{"line":497,"column":1,"offset":25058},"end":{"line":497,"column":9,"offset":25066}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Recursive.","position":{"start":{"line":499,"column":1,"offset":25068},"end":{"line":499,"column":11,"offset":25078}}}],"position":{"start":{"line":499,"column":1,"offset":25068},"end":{"line":499,"column":11,"offset":25078}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For every ","position":{"start":{"line":501,"column":1,"offset":25080},"end":{"line":501,"column":11,"offset":25090}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node"}],"position":{"start":{"line":501,"column":11,"offset":25090},"end":{"line":501,"column":17,"offset":25096}}},{"type":"text","value":":","position":{"start":{"line":501,"column":17,"offset":25096},"end":{"line":501,"column":18,"offset":25097}}}],"position":{"start":{"line":501,"column":1,"offset":25080},"end":{"line":501,"column":18,"offset":25097}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Left child: points to ","position":{"start":{"line":503,"column":5,"offset":25103},"end":{"line":503,"column":27,"offset":25125}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.right"}],"position":{"start":{"line":503,"column":27,"offset":25125},"end":{"line":503,"column":39,"offset":25137}}},{"type":"text","value":".","position":{"start":{"line":503,"column":39,"offset":25137},"end":{"line":503,"column":40,"offset":25138}}}],"position":{"start":{"line":503,"column":1,"offset":25099},"end":{"line":503,"column":40,"offset":25138}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Right child: points to ","position":{"start":{"line":504,"column":5,"offset":25143},"end":{"line":504,"column":28,"offset":25166}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.next.left"}],"position":{"start":{"line":504,"column":28,"offset":25166},"end":{"line":504,"column":44,"offset":25182}}},{"type":"text","value":" if ","position":{"start":{"line":504,"column":44,"offset":25182},"end":{"line":504,"column":48,"offset":25186}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.next"}],"position":{"start":{"line":504,"column":48,"offset":25186},"end":{"line":504,"column":59,"offset":25197}}},{"type":"text","value":" exists.","position":{"start":{"line":504,"column":59,"offset":25197},"end":{"line":504,"column":67,"offset":25205}}}],"position":{"start":{"line":504,"column":1,"offset":25139},"end":{"line":504,"column":67,"offset":25205}}},{"type":"text","value":"\n"}],"position":{"start":{"line":503,"column":1,"offset":25099},"end":{"line":504,"column":67,"offset":25205}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for binary tree with next pointer.\n * function TreeLinkNode(val) {\n *     this.val = val;\n *     this.left = this.right = this.next = null;\n * }\n */\n\n/**\n * @param {TreeLinkNode} root\n * @return {void} Do not return anything, modify tree in-place instead.\n */\nlet connect = function (root) {\n    if (!root) {\n        return;\n    }\n    if (root.left !== null) {\n        root.left.next = root.right;\n        connect(root.left);\n    }\n    if (root.right !== null) {\n        if (root.next !== null) {\n            root.right.next = root.next.left;\n        }\n        connect(root.right);\n    }\n};\n"}],"position":{"start":{"line":506,"column":1,"offset":25207},"end":{"line":534,"column":4,"offset":25825}}}],"position":{"start":{"line":506,"column":1,"offset":25207},"end":{"line":534,"column":4,"offset":25825}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"TWO","position":{"start":{"line":536,"column":6,"offset":25832},"end":{"line":536,"column":9,"offset":25835}}}],"position":{"start":{"line":536,"column":1,"offset":25827},"end":{"line":536,"column":9,"offset":25835}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Level order traversal.","position":{"start":{"line":538,"column":1,"offset":25837},"end":{"line":538,"column":23,"offset":25859}}}],"position":{"start":{"line":538,"column":1,"offset":25837},"end":{"line":538,"column":23,"offset":25859}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for binary tree with next pointer.\n * function TreeLinkNode(val) {\n *     this.val = val;\n *     this.left = this.right = this.next = null;\n * }\n */\n\n/**\n * @param {TreeLinkNode} root\n * @return {void} Do not return anything, modify tree in-place instead.\n */\nlet connect = function (root) {\n    if (!root) {\n        return;\n    }\n\n    const queue = [NaN, root];\n    while (queue.length > 1) {\n        const node = queue.shift();\n        if (node !== node) {\n            for (let i = 0; i < queue.length; i++) {\n                queue[i].next = queue[i + 1] || null;\n            }\n            queue.push(NaN);\n        } else {\n            if (node.left !== null) {\n                queue.push(node.left);\n            }\n            if (node.right !== null) {\n                queue.push(node.right);\n            }\n        }\n    }\n};\n"}],"position":{"start":{"line":540,"column":1,"offset":25861},"end":{"line":576,"column":4,"offset":26717}}}],"position":{"start":{"line":540,"column":1,"offset":25861},"end":{"line":576,"column":4,"offset":26717}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":578,"column":1,"offset":26719},"end":{"line":578,"column":4,"offset":26722}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Medium\nRelated Topics:\n\"Tree\": ","position":{"start":{"line":580,"column":1,"offset":26724},"end":{"line":582,"column":9,"offset":26767}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/tree"},"children":[{"type":"text","value":"https://leetcode.com/tag/tree","position":{"start":{"line":582,"column":9,"offset":26767},"end":{"line":582,"column":38,"offset":26796}}}],"position":{"start":{"line":582,"column":9,"offset":26767},"end":{"line":582,"column":38,"offset":26796}}},{"type":"text","value":"\n\"Depth-first Search\": ","position":{"start":{"line":582,"column":38,"offset":26796},"end":{"line":583,"column":23,"offset":26819}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/depth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/depth-first-search","position":{"start":{"line":583,"column":23,"offset":26819},"end":{"line":583,"column":66,"offset":26862}}}],"position":{"start":{"line":583,"column":23,"offset":26819},"end":{"line":583,"column":66,"offset":26862}}},{"type":"text","value":"\nSimilar Questions:\n\"Populating Next Right Pointers in Each Node\": ","position":{"start":{"line":583,"column":66,"offset":26862},"end":{"line":585,"column":48,"offset":26929}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/populating-next-right-pointers-in-each-node"},"children":[{"type":"text","value":"https://leetcode.com/problems/populating-next-right-pointers-in-each-node","position":{"start":{"line":585,"column":48,"offset":26929},"end":{"line":585,"column":121,"offset":27002}}}],"position":{"start":{"line":585,"column":48,"offset":26929},"end":{"line":585,"column":121,"offset":27002}}}],"position":{"start":{"line":580,"column":1,"offset":26724},"end":{"line":585,"column":121,"offset":27002}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":587,"column":1,"offset":27004},"end":{"line":587,"column":4,"offset":27007}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#117-populating-next-right-pointers-in-each-node-iihttpsleetcodecomproblemspopulating-next-right-pointers-in-each-node-iidescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":589,"column":2,"offset":27010},"end":{"line":589,"column":142,"offset":27150}}}],"position":{"start":{"line":589,"column":1,"offset":27009},"end":{"line":589,"column":277,"offset":27285}}}],"position":{"start":{"line":589,"column":1,"offset":27009},"end":{"line":589,"column":277,"offset":27285}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":591,"column":4,"offset":27290},"end":{"line":591,"column":6,"offset":27292}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/description/"},"children":[{"type":"text","value":"117. Populating Next Right Pointers in Each Node II","position":{"start":{"line":591,"column":7,"offset":27293},"end":{"line":591,"column":58,"offset":27344}}}],"position":{"start":{"line":591,"column":6,"offset":27292},"end":{"line":591,"column":150,"offset":27436}}}],"position":{"start":{"line":591,"column":1,"offset":27287},"end":{"line":591,"column":150,"offset":27436}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":593,"column":5,"offset":27442},"end":{"line":593,"column":13,"offset":27450}}}],"position":{"start":{"line":593,"column":1,"offset":27438},"end":{"line":593,"column":13,"offset":27450}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a binary tree","position":{"start":{"line":595,"column":1,"offset":27452},"end":{"line":595,"column":20,"offset":27471}}}],"position":{"start":{"line":595,"column":1,"offset":27452},"end":{"line":595,"column":20,"offset":27471}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"struct TreeLinkNode {\n  TreeLinkNode *left;\n  TreeLinkNode *right;\n  TreeLinkNode *next;\n}\n"}],"position":{"start":{"line":597,"column":1,"offset":27473},"end":{"line":604,"column":4,"offset":27572}}}],"position":{"start":{"line":597,"column":1,"offset":27473},"end":{"line":604,"column":4,"offset":27572}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to ","position":{"start":{"line":606,"column":1,"offset":27574},"end":{"line":606,"column":127,"offset":27700}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NULL"}],"position":{"start":{"line":606,"column":127,"offset":27700},"end":{"line":606,"column":133,"offset":27706}}},{"type":"text","value":".","position":{"start":{"line":606,"column":133,"offset":27706},"end":{"line":606,"column":134,"offset":27707}}}],"position":{"start":{"line":606,"column":1,"offset":27574},"end":{"line":606,"column":134,"offset":27707}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Initially, all next pointers are set to ","position":{"start":{"line":608,"column":1,"offset":27709},"end":{"line":608,"column":41,"offset":27749}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NULL"}],"position":{"start":{"line":608,"column":41,"offset":27749},"end":{"line":608,"column":47,"offset":27755}}},{"type":"text","value":".","position":{"start":{"line":608,"column":47,"offset":27755},"end":{"line":608,"column":48,"offset":27756}}}],"position":{"start":{"line":608,"column":1,"offset":27709},"end":{"line":608,"column":48,"offset":27756}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":610,"column":3,"offset":27760},"end":{"line":610,"column":8,"offset":27765}}}],"position":{"start":{"line":610,"column":1,"offset":27758},"end":{"line":610,"column":10,"offset":27767}}}],"position":{"start":{"line":610,"column":1,"offset":27758},"end":{"line":610,"column":10,"offset":27767}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You may only use constant extra space.","position":{"start":{"line":612,"column":5,"offset":27773},"end":{"line":612,"column":43,"offset":27811}}}],"position":{"start":{"line":612,"column":1,"offset":27769},"end":{"line":612,"column":43,"offset":27811}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Recursive approach is fine, implicit stack space does not count as extra space for this problem.","position":{"start":{"line":613,"column":5,"offset":27816},"end":{"line":613,"column":101,"offset":27912}}}],"position":{"start":{"line":613,"column":1,"offset":27812},"end":{"line":613,"column":101,"offset":27912}}},{"type":"text","value":"\n"}],"position":{"start":{"line":612,"column":1,"offset":27769},"end":{"line":613,"column":101,"offset":27912}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":615,"column":3,"offset":27916},"end":{"line":615,"column":11,"offset":27924}}}],"position":{"start":{"line":615,"column":1,"offset":27914},"end":{"line":615,"column":13,"offset":27926}}}],"position":{"start":{"line":615,"column":1,"offset":27914},"end":{"line":615,"column":13,"offset":27926}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given the following binary tree,","position":{"start":{"line":617,"column":1,"offset":27928},"end":{"line":617,"column":33,"offset":27960}}}],"position":{"start":{"line":617,"column":1,"offset":27928},"end":{"line":617,"column":33,"offset":27960}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"     1\n   /  \\\n  2    3\n / \\    \\\n4   5    7\n"}],"position":{"start":{"line":619,"column":1,"offset":27962},"end":{"line":626,"column":4,"offset":28015}}}],"position":{"start":{"line":619,"column":1,"offset":27962},"end":{"line":626,"column":4,"offset":28015}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After calling your function, the tree should look like:","position":{"start":{"line":628,"column":1,"offset":28017},"end":{"line":628,"column":56,"offset":28072}}}],"position":{"start":{"line":628,"column":1,"offset":28017},"end":{"line":628,"column":56,"offset":28072}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"     1 -> NULL\n   /  \\\n  2 -> 3 -> NULL\n / \\    \\\n4-> 5 -> 7 -> NULL\n"}],"position":{"start":{"line":630,"column":1,"offset":28074},"end":{"line":637,"column":4,"offset":28151}}}],"position":{"start":{"line":630,"column":1,"offset":28074},"end":{"line":637,"column":4,"offset":28151}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":639,"column":5,"offset":28157},"end":{"line":639,"column":14,"offset":28166}}}],"position":{"start":{"line":639,"column":1,"offset":28153},"end":{"line":639,"column":14,"offset":28166}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"ONE","position":{"start":{"line":641,"column":6,"offset":28173},"end":{"line":641,"column":9,"offset":28176}}}],"position":{"start":{"line":641,"column":1,"offset":28168},"end":{"line":641,"column":9,"offset":28176}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Recursive. See ","position":{"start":{"line":643,"column":1,"offset":28178},"end":{"line":643,"column":16,"offset":28193}}},{"type":"element","tagName":"a","properties":{"href":"./116.%20Populating%20Next%20Right%20Pointers%20in%20Each%20Node.md"},"children":[{"type":"text","value":"116. Populating Next Right Pointers in Each Node","position":{"start":{"line":643,"column":17,"offset":28194},"end":{"line":643,"column":65,"offset":28242}}}],"position":{"start":{"line":643,"column":16,"offset":28193},"end":{"line":643,"column":135,"offset":28312}}},{"type":"text","value":".","position":{"start":{"line":643,"column":135,"offset":28312},"end":{"line":643,"column":136,"offset":28313}}}],"position":{"start":{"line":643,"column":1,"offset":28178},"end":{"line":643,"column":136,"offset":28313}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The tree may not be perfect now. So keep finding ","position":{"start":{"line":645,"column":1,"offset":28315},"end":{"line":645,"column":50,"offset":28364}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"next"}],"position":{"start":{"line":645,"column":50,"offset":28364},"end":{"line":645,"column":56,"offset":28370}}},{"type":"text","value":" until there is a node with children, or ","position":{"start":{"line":645,"column":56,"offset":28370},"end":{"line":645,"column":97,"offset":28411}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"null"}],"position":{"start":{"line":645,"column":97,"offset":28411},"end":{"line":645,"column":103,"offset":28417}}},{"type":"text","value":".","position":{"start":{"line":645,"column":103,"offset":28417},"end":{"line":645,"column":104,"offset":28418}}}],"position":{"start":{"line":645,"column":1,"offset":28315},"end":{"line":645,"column":104,"offset":28418}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This also means post-order traversal is required.","position":{"start":{"line":647,"column":1,"offset":28420},"end":{"line":647,"column":50,"offset":28469}}}],"position":{"start":{"line":647,"column":1,"offset":28420},"end":{"line":647,"column":50,"offset":28469}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for binary tree with next pointer.\n * function TreeLinkNode(val) {\n *     this.val = val;\n *     this.left = this.right = this.next = null;\n * }\n */\n\n/**\n * @param {TreeLinkNode} root\n * @return {void} Do not return anything, modify tree in-place instead.\n */\nlet connect = function (root) {\n    if (!root) {\n        return;\n    }\n    let next = null;\n    for (let node = root.next; node !== null; node = node.next) {\n        if (node.left !== null) {\n            next = node.left;\n            break;\n        }\n        if (node.right !== null) {\n            next = node.right;\n            break;\n        }\n    }\n    if (root.right !== null) {\n        root.right.next = next;\n    }\n    if (root.left !== null) {\n        root.left.next = root.right || next;\n    }\n    connect(root.right);\n    connect(root.left);\n};\n"}],"position":{"start":{"line":649,"column":1,"offset":28471},"end":{"line":686,"column":4,"offset":29312}}}],"position":{"start":{"line":649,"column":1,"offset":28471},"end":{"line":686,"column":4,"offset":29312}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"TWO","position":{"start":{"line":688,"column":6,"offset":29319},"end":{"line":688,"column":9,"offset":29322}}}],"position":{"start":{"line":688,"column":1,"offset":29314},"end":{"line":688,"column":9,"offset":29322}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Level order traversal. Exact same as ","position":{"start":{"line":690,"column":1,"offset":29324},"end":{"line":690,"column":38,"offset":29361}}},{"type":"element","tagName":"a","properties":{"href":"./116.%20Populating%20Next%20Right%20Pointers%20in%20Each%20Node.md"},"children":[{"type":"text","value":"116. Populating Next Right Pointers in Each Node","position":{"start":{"line":690,"column":39,"offset":29362},"end":{"line":690,"column":87,"offset":29410}}}],"position":{"start":{"line":690,"column":38,"offset":29361},"end":{"line":690,"column":157,"offset":29480}}},{"type":"text","value":".","position":{"start":{"line":690,"column":157,"offset":29480},"end":{"line":690,"column":158,"offset":29481}}}],"position":{"start":{"line":690,"column":1,"offset":29324},"end":{"line":690,"column":158,"offset":29481}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for binary tree with next pointer.\n * function TreeLinkNode(val) {\n *     this.val = val;\n *     this.left = this.right = this.next = null;\n * }\n */\n\n/**\n * @param {TreeLinkNode} root\n * @return {void} Do not return anything, modify tree in-place instead.\n */\nlet connect = function (root) {\n    if (!root) {\n        return;\n    }\n\n    const queue = [NaN, root];\n    while (queue.length > 1) {\n        const node = queue.shift();\n        if (node !== node) {\n            for (let i = 0; i < queue.length; i++) {\n                queue[i].next = queue[i + 1] || null;\n            }\n            queue.push(NaN);\n        } else {\n            if (node.left !== null) {\n                queue.push(node.left);\n            }\n            if (node.right !== null) {\n                queue.push(node.right);\n            }\n        }\n    }\n};\n"}],"position":{"start":{"line":692,"column":1,"offset":29483},"end":{"line":728,"column":4,"offset":30339}}}],"position":{"start":{"line":692,"column":1,"offset":29483},"end":{"line":728,"column":4,"offset":30339}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":730,"column":1,"offset":30341},"end":{"line":730,"column":4,"offset":30344}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Easy\nRelated Topics:\n\"Array\": ","position":{"start":{"line":732,"column":1,"offset":30346},"end":{"line":734,"column":10,"offset":30388}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":734,"column":10,"offset":30388},"end":{"line":734,"column":40,"offset":30418}}}],"position":{"start":{"line":734,"column":10,"offset":30388},"end":{"line":734,"column":40,"offset":30418}}},{"type":"text","value":"\nSimilar Questions:\n\"Pascal's Triangle II\": ","position":{"start":{"line":734,"column":40,"offset":30418},"end":{"line":736,"column":25,"offset":30462}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/pascals-triangle-ii"},"children":[{"type":"text","value":"https://leetcode.com/problems/pascals-triangle-ii","position":{"start":{"line":736,"column":25,"offset":30462},"end":{"line":736,"column":74,"offset":30511}}}],"position":{"start":{"line":736,"column":25,"offset":30462},"end":{"line":736,"column":74,"offset":30511}}}],"position":{"start":{"line":732,"column":1,"offset":30346},"end":{"line":736,"column":74,"offset":30511}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":738,"column":1,"offset":30513},"end":{"line":738,"column":4,"offset":30516}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#118-pascals-trianglehttpsleetcodecomproblemspascals-triangledescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":740,"column":2,"offset":30519},"end":{"line":740,"column":142,"offset":30659}}}],"position":{"start":{"line":740,"column":1,"offset":30518},"end":{"line":740,"column":217,"offset":30734}}}],"position":{"start":{"line":740,"column":1,"offset":30518},"end":{"line":740,"column":217,"offset":30734}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":742,"column":4,"offset":30739},"end":{"line":742,"column":6,"offset":30741}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/pascals-triangle/description/"},"children":[{"type":"text","value":"118. Pascal's Triangle","position":{"start":{"line":742,"column":7,"offset":30742},"end":{"line":742,"column":29,"offset":30764}}}],"position":{"start":{"line":742,"column":6,"offset":30741},"end":{"line":742,"column":91,"offset":30826}}}],"position":{"start":{"line":742,"column":1,"offset":30736},"end":{"line":742,"column":91,"offset":30826}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":744,"column":5,"offset":30832},"end":{"line":744,"column":13,"offset":30840}}}],"position":{"start":{"line":744,"column":1,"offset":30828},"end":{"line":744,"column":13,"offset":30840}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a non-negative integer ","position":{"start":{"line":746,"column":1,"offset":30842},"end":{"line":746,"column":30,"offset":30871}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"numRows","position":{"start":{"line":746,"column":31,"offset":30872},"end":{"line":746,"column":38,"offset":30879}}}],"position":{"start":{"line":746,"column":30,"offset":30871},"end":{"line":746,"column":39,"offset":30880}}},{"type":"text","value":", generate the first ","position":{"start":{"line":746,"column":39,"offset":30880},"end":{"line":746,"column":60,"offset":30901}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"numRows","position":{"start":{"line":746,"column":61,"offset":30902},"end":{"line":746,"column":68,"offset":30909}}}],"position":{"start":{"line":746,"column":60,"offset":30901},"end":{"line":746,"column":69,"offset":30910}}},{"type":"text","value":" of Pascal's triangle.","position":{"start":{"line":746,"column":69,"offset":30910},"end":{"line":746,"column":91,"offset":30932}}}],"position":{"start":{"line":746,"column":1,"offset":30842},"end":{"line":746,"column":91,"offset":30932}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif","alt":"PascalTriangleAnimated2.gif"},"children":[],"position":{"start":{"line":748,"column":1,"offset":30934},"end":{"line":748,"column":112,"offset":31045}}}],"position":{"start":{"line":748,"column":1,"offset":30934},"end":{"line":748,"column":112,"offset":31045}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In Pascal's triangle, each number is the sum of the two numbers directly above it.","position":{"start":{"line":750,"column":1,"offset":31047},"end":{"line":750,"column":83,"offset":31129}}}],"position":{"start":{"line":750,"column":1,"offset":31047},"end":{"line":750,"column":83,"offset":31129}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":752,"column":3,"offset":31133},"end":{"line":752,"column":11,"offset":31141}}}],"position":{"start":{"line":752,"column":1,"offset":31131},"end":{"line":752,"column":13,"offset":31143}}}],"position":{"start":{"line":752,"column":1,"offset":31131},"end":{"line":752,"column":13,"offset":31143}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: 5\nOutput:\n[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n"}],"position":{"start":{"line":754,"column":1,"offset":31145},"end":{"line":765,"column":4,"offset":31233}}}],"position":{"start":{"line":754,"column":1,"offset":31145},"end":{"line":765,"column":4,"offset":31233}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":767,"column":5,"offset":31239},"end":{"line":767,"column":14,"offset":31248}}}],"position":{"start":{"line":767,"column":1,"offset":31235},"end":{"line":767,"column":14,"offset":31248}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Dynamic Programming 101.","position":{"start":{"line":769,"column":1,"offset":31250},"end":{"line":769,"column":25,"offset":31274}}}],"position":{"start":{"line":769,"column":1,"offset":31250},"end":{"line":769,"column":25,"offset":31274}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number} numRows\n * @return {number[][]}\n */\nlet generate = function (numRows) {\n    if (numRows <= 0) {\n        return [];\n    }\n\n    const result = [[1]];\n    for (let i = 1; i < numRows; i++) {\n        const lastRow = result[i - 1];\n        const row = [1];\n        for (let j = 1; j < i; j++) {\n            row[j] = lastRow[j] + lastRow[j - 1];\n        }\n        row.push(1);\n        result.push(row);\n    }\n\n    return result;\n};\n"}],"position":{"start":{"line":771,"column":1,"offset":31276},"end":{"line":794,"column":4,"offset":31734}}}],"position":{"start":{"line":771,"column":1,"offset":31276},"end":{"line":794,"column":4,"offset":31734}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":796,"column":1,"offset":31736},"end":{"line":796,"column":4,"offset":31739}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Easy\nRelated Topics:\n\"Array\": ","position":{"start":{"line":798,"column":1,"offset":31741},"end":{"line":800,"column":10,"offset":31783}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":800,"column":10,"offset":31783},"end":{"line":800,"column":40,"offset":31813}}}],"position":{"start":{"line":800,"column":10,"offset":31783},"end":{"line":800,"column":40,"offset":31813}}},{"type":"text","value":"\nSimilar Questions:\n\"Pascal's Triangle\": ","position":{"start":{"line":800,"column":40,"offset":31813},"end":{"line":802,"column":22,"offset":31854}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/pascals-triangle"},"children":[{"type":"text","value":"https://leetcode.com/problems/pascals-triangle","position":{"start":{"line":802,"column":22,"offset":31854},"end":{"line":802,"column":68,"offset":31900}}}],"position":{"start":{"line":802,"column":22,"offset":31854},"end":{"line":802,"column":68,"offset":31900}}}],"position":{"start":{"line":798,"column":1,"offset":31741},"end":{"line":802,"column":68,"offset":31900}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":804,"column":1,"offset":31902},"end":{"line":804,"column":4,"offset":31905}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#119-pascals-triangle-iihttpsleetcodecomproblemspascals-triangle-iidescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":806,"column":2,"offset":31908},"end":{"line":806,"column":142,"offset":32048}}}],"position":{"start":{"line":806,"column":1,"offset":31907},"end":{"line":806,"column":223,"offset":32129}}}],"position":{"start":{"line":806,"column":1,"offset":31907},"end":{"line":806,"column":223,"offset":32129}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":808,"column":4,"offset":32134},"end":{"line":808,"column":6,"offset":32136}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/pascals-triangle-ii/description/"},"children":[{"type":"text","value":"119. Pascal's Triangle II","position":{"start":{"line":808,"column":7,"offset":32137},"end":{"line":808,"column":32,"offset":32162}}}],"position":{"start":{"line":808,"column":6,"offset":32136},"end":{"line":808,"column":97,"offset":32227}}}],"position":{"start":{"line":808,"column":1,"offset":32131},"end":{"line":808,"column":97,"offset":32227}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":810,"column":5,"offset":32233},"end":{"line":810,"column":13,"offset":32241}}}],"position":{"start":{"line":810,"column":1,"offset":32229},"end":{"line":810,"column":13,"offset":32241}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a non-negative index ","position":{"start":{"line":812,"column":1,"offset":32243},"end":{"line":812,"column":28,"offset":32270}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"k","position":{"start":{"line":812,"column":29,"offset":32271},"end":{"line":812,"column":30,"offset":32272}}}],"position":{"start":{"line":812,"column":28,"offset":32270},"end":{"line":812,"column":31,"offset":32273}}},{"type":"text","value":" where ","position":{"start":{"line":812,"column":31,"offset":32273},"end":{"line":812,"column":38,"offset":32280}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"k","position":{"start":{"line":812,"column":39,"offset":32281},"end":{"line":812,"column":40,"offset":32282}}}],"position":{"start":{"line":812,"column":38,"offset":32280},"end":{"line":812,"column":41,"offset":32283}}},{"type":"text","value":" ≤ 33, return the ","position":{"start":{"line":812,"column":41,"offset":32283},"end":{"line":812,"column":59,"offset":32301}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"k","position":{"start":{"line":812,"column":60,"offset":32302},"end":{"line":812,"column":61,"offset":32303}}}],"position":{"start":{"line":812,"column":59,"offset":32301},"end":{"line":812,"column":62,"offset":32304}}},{"type":"text","value":"th index row of the Pascal's triangle.","position":{"start":{"line":812,"column":62,"offset":32304},"end":{"line":812,"column":100,"offset":32342}}}],"position":{"start":{"line":812,"column":1,"offset":32243},"end":{"line":812,"column":100,"offset":32342}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note that the row index starts from 0.","position":{"start":{"line":814,"column":1,"offset":32344},"end":{"line":814,"column":39,"offset":32382}}}],"position":{"start":{"line":814,"column":1,"offset":32344},"end":{"line":814,"column":39,"offset":32382}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif","alt":"PascalTriangleAnimated2.gif"},"children":[],"position":{"start":{"line":816,"column":1,"offset":32384},"end":{"line":816,"column":112,"offset":32495}}}],"position":{"start":{"line":816,"column":1,"offset":32384},"end":{"line":816,"column":112,"offset":32495}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In Pascal's triangle, each number is the sum of the two numbers directly above it.","position":{"start":{"line":818,"column":1,"offset":32497},"end":{"line":818,"column":83,"offset":32579}}}],"position":{"start":{"line":818,"column":1,"offset":32497},"end":{"line":818,"column":83,"offset":32579}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":820,"column":3,"offset":32583},"end":{"line":820,"column":11,"offset":32591}}}],"position":{"start":{"line":820,"column":1,"offset":32581},"end":{"line":820,"column":13,"offset":32593}}}],"position":{"start":{"line":820,"column":1,"offset":32581},"end":{"line":820,"column":13,"offset":32593}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: 3\nOutput: [1,3,3,1]\n"}],"position":{"start":{"line":822,"column":1,"offset":32595},"end":{"line":826,"column":4,"offset":32630}}}],"position":{"start":{"line":822,"column":1,"offset":32595},"end":{"line":826,"column":4,"offset":32630}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Follow up:","position":{"start":{"line":828,"column":3,"offset":32634},"end":{"line":828,"column":13,"offset":32644}}}],"position":{"start":{"line":828,"column":1,"offset":32632},"end":{"line":828,"column":15,"offset":32646}}}],"position":{"start":{"line":828,"column":1,"offset":32632},"end":{"line":828,"column":15,"offset":32646}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Could you optimize your algorithm to use only ","position":{"start":{"line":830,"column":1,"offset":32648},"end":{"line":830,"column":47,"offset":32694}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"O","position":{"start":{"line":830,"column":48,"offset":32695},"end":{"line":830,"column":49,"offset":32696}}}],"position":{"start":{"line":830,"column":47,"offset":32694},"end":{"line":830,"column":50,"offset":32697}}},{"type":"text","value":"(","position":{"start":{"line":830,"column":50,"offset":32697},"end":{"line":830,"column":51,"offset":32698}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"k","position":{"start":{"line":830,"column":52,"offset":32699},"end":{"line":830,"column":53,"offset":32700}}}],"position":{"start":{"line":830,"column":51,"offset":32698},"end":{"line":830,"column":54,"offset":32701}}},{"type":"text","value":") extra space?","position":{"start":{"line":830,"column":54,"offset":32701},"end":{"line":830,"column":68,"offset":32715}}}],"position":{"start":{"line":830,"column":1,"offset":32648},"end":{"line":830,"column":68,"offset":32715}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":832,"column":5,"offset":32721},"end":{"line":832,"column":14,"offset":32730}}}],"position":{"start":{"line":832,"column":1,"offset":32717},"end":{"line":832,"column":14,"offset":32730}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Dynamic Programming 101 with dynamic array.","position":{"start":{"line":834,"column":1,"offset":32732},"end":{"line":834,"column":44,"offset":32775}}}],"position":{"start":{"line":834,"column":1,"offset":32732},"end":{"line":834,"column":44,"offset":32775}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"State ","position":{"start":{"line":836,"column":1,"offset":32777},"end":{"line":836,"column":7,"offset":32783}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"(i, j)"}],"position":{"start":{"line":836,"column":7,"offset":32783},"end":{"line":836,"column":15,"offset":32791}}},{"type":"text","value":" depends on ","position":{"start":{"line":836,"column":15,"offset":32791},"end":{"line":836,"column":27,"offset":32803}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"(i-1, j)"}],"position":{"start":{"line":836,"column":27,"offset":32803},"end":{"line":836,"column":37,"offset":32813}}},{"type":"text","value":" and ","position":{"start":{"line":836,"column":37,"offset":32813},"end":{"line":836,"column":42,"offset":32818}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"(i-1, j-1)"}],"position":{"start":{"line":836,"column":42,"offset":32818},"end":{"line":836,"column":54,"offset":32830}}},{"type":"text","value":". So to access ","position":{"start":{"line":836,"column":54,"offset":32830},"end":{"line":836,"column":69,"offset":32845}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"(i-1, j-1)"}],"position":{"start":{"line":836,"column":69,"offset":32845},"end":{"line":836,"column":81,"offset":32857}}},{"type":"text","value":" iteration must be from right to left.","position":{"start":{"line":836,"column":81,"offset":32857},"end":{"line":836,"column":119,"offset":32895}}}],"position":{"start":{"line":836,"column":1,"offset":32777},"end":{"line":836,"column":119,"offset":32895}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number} rowIndex\n * @return {number[]}\n */\nlet getRow = function (rowIndex) {\n    if (rowIndex < 0) {\n        return [];\n    }\n\n    const row = [1];\n    for (let i = 1; i <= rowIndex; i++) {\n        for (let j = i - 1; j > 0; j--) {\n            row[j] += row[j - 1];\n        }\n        row.push(1);\n    }\n\n    return row;\n};\n"}],"position":{"start":{"line":838,"column":1,"offset":32897},"end":{"line":858,"column":4,"offset":33245}}}],"position":{"start":{"line":838,"column":1,"offset":32897},"end":{"line":858,"column":4,"offset":33245}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":860,"column":1,"offset":33247},"end":{"line":860,"column":4,"offset":33250}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Medium\nRelated Topics:\n\"Array\": ","position":{"start":{"line":862,"column":1,"offset":33252},"end":{"line":864,"column":10,"offset":33296}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":864,"column":10,"offset":33296},"end":{"line":864,"column":40,"offset":33326}}}],"position":{"start":{"line":864,"column":10,"offset":33296},"end":{"line":864,"column":40,"offset":33326}}},{"type":"text","value":"\n\"Dynamic Programming\": ","position":{"start":{"line":864,"column":40,"offset":33326},"end":{"line":865,"column":24,"offset":33350}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/dynamic-programming"},"children":[{"type":"text","value":"https://leetcode.com/tag/dynamic-programming","position":{"start":{"line":865,"column":24,"offset":33350},"end":{"line":865,"column":68,"offset":33394}}}],"position":{"start":{"line":865,"column":24,"offset":33350},"end":{"line":865,"column":68,"offset":33394}}}],"position":{"start":{"line":862,"column":1,"offset":33252},"end":{"line":865,"column":68,"offset":33394}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":867,"column":1,"offset":33396},"end":{"line":867,"column":4,"offset":33399}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#120-trianglehttpsleetcodecomproblemstriangledescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":869,"column":2,"offset":33402},"end":{"line":869,"column":142,"offset":33542}}}],"position":{"start":{"line":869,"column":1,"offset":33401},"end":{"line":869,"column":201,"offset":33601}}}],"position":{"start":{"line":869,"column":1,"offset":33401},"end":{"line":869,"column":201,"offset":33601}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":871,"column":4,"offset":33606},"end":{"line":871,"column":6,"offset":33608}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/triangle/description/"},"children":[{"type":"text","value":"120. Triangle","position":{"start":{"line":871,"column":7,"offset":33609},"end":{"line":871,"column":20,"offset":33622}}}],"position":{"start":{"line":871,"column":6,"offset":33608},"end":{"line":871,"column":74,"offset":33676}}}],"position":{"start":{"line":871,"column":1,"offset":33603},"end":{"line":871,"column":74,"offset":33676}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":873,"column":5,"offset":33682},"end":{"line":873,"column":13,"offset":33690}}}],"position":{"start":{"line":873,"column":1,"offset":33678},"end":{"line":873,"column":13,"offset":33690}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.","position":{"start":{"line":875,"column":1,"offset":33692},"end":{"line":875,"column":125,"offset":33816}}}],"position":{"start":{"line":875,"column":1,"offset":33692},"end":{"line":875,"column":125,"offset":33816}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For example, given the following triangle","position":{"start":{"line":877,"column":1,"offset":33818},"end":{"line":877,"column":42,"offset":33859}}}],"position":{"start":{"line":877,"column":1,"offset":33818},"end":{"line":877,"column":42,"offset":33859}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[\n     [2],\n    [3,4],\n   [6,5,7],\n  [4,1,8,3]\n]\n"}],"position":{"start":{"line":879,"column":1,"offset":33861},"end":{"line":887,"column":4,"offset":33918}}}],"position":{"start":{"line":879,"column":1,"offset":33861},"end":{"line":887,"column":4,"offset":33918}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The minimum path sum from top to bottom is ","position":{"start":{"line":889,"column":1,"offset":33920},"end":{"line":889,"column":44,"offset":33963}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"11"}],"position":{"start":{"line":889,"column":44,"offset":33963},"end":{"line":889,"column":48,"offset":33967}}},{"type":"text","value":" (i.e., ","position":{"start":{"line":889,"column":48,"offset":33967},"end":{"line":889,"column":56,"offset":33975}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"2","position":{"start":{"line":889,"column":58,"offset":33977},"end":{"line":889,"column":59,"offset":33978}}}],"position":{"start":{"line":889,"column":56,"offset":33975},"end":{"line":889,"column":61,"offset":33980}}},{"type":"text","value":" + ","position":{"start":{"line":889,"column":61,"offset":33980},"end":{"line":889,"column":64,"offset":33983}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"3","position":{"start":{"line":889,"column":66,"offset":33985},"end":{"line":889,"column":67,"offset":33986}}}],"position":{"start":{"line":889,"column":64,"offset":33983},"end":{"line":889,"column":69,"offset":33988}}},{"type":"text","value":" + ","position":{"start":{"line":889,"column":69,"offset":33988},"end":{"line":889,"column":72,"offset":33991}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"5","position":{"start":{"line":889,"column":74,"offset":33993},"end":{"line":889,"column":75,"offset":33994}}}],"position":{"start":{"line":889,"column":72,"offset":33991},"end":{"line":889,"column":77,"offset":33996}}},{"type":"text","value":" + ","position":{"start":{"line":889,"column":77,"offset":33996},"end":{"line":889,"column":80,"offset":33999}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"1","position":{"start":{"line":889,"column":82,"offset":34001},"end":{"line":889,"column":83,"offset":34002}}}],"position":{"start":{"line":889,"column":80,"offset":33999},"end":{"line":889,"column":85,"offset":34004}}},{"type":"text","value":" = 11).","position":{"start":{"line":889,"column":85,"offset":34004},"end":{"line":889,"column":92,"offset":34011}}}],"position":{"start":{"line":889,"column":1,"offset":33920},"end":{"line":889,"column":92,"offset":34011}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":891,"column":3,"offset":34015},"end":{"line":891,"column":8,"offset":34020}}}],"position":{"start":{"line":891,"column":1,"offset":34013},"end":{"line":891,"column":10,"offset":34022}}}],"position":{"start":{"line":891,"column":1,"offset":34013},"end":{"line":891,"column":10,"offset":34022}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Bonus point if you are able to do this using only ","position":{"start":{"line":893,"column":1,"offset":34024},"end":{"line":893,"column":51,"offset":34074}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"O","position":{"start":{"line":893,"column":52,"offset":34075},"end":{"line":893,"column":53,"offset":34076}}}],"position":{"start":{"line":893,"column":51,"offset":34074},"end":{"line":893,"column":54,"offset":34077}}},{"type":"text","value":"(","position":{"start":{"line":893,"column":54,"offset":34077},"end":{"line":893,"column":55,"offset":34078}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"n","position":{"start":{"line":893,"column":56,"offset":34079},"end":{"line":893,"column":57,"offset":34080}}}],"position":{"start":{"line":893,"column":55,"offset":34078},"end":{"line":893,"column":58,"offset":34081}}},{"type":"text","value":") extra space, where ","position":{"start":{"line":893,"column":58,"offset":34081},"end":{"line":893,"column":79,"offset":34102}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"n","position":{"start":{"line":893,"column":80,"offset":34103},"end":{"line":893,"column":81,"offset":34104}}}],"position":{"start":{"line":893,"column":79,"offset":34102},"end":{"line":893,"column":82,"offset":34105}}},{"type":"text","value":" is the total number of rows in the triangle.","position":{"start":{"line":893,"column":82,"offset":34105},"end":{"line":893,"column":127,"offset":34150}}}],"position":{"start":{"line":893,"column":1,"offset":34024},"end":{"line":893,"column":127,"offset":34150}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":895,"column":5,"offset":34156},"end":{"line":895,"column":14,"offset":34165}}}],"position":{"start":{"line":895,"column":1,"offset":34152},"end":{"line":895,"column":14,"offset":34165}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define ","position":{"start":{"line":897,"column":1,"offset":34167},"end":{"line":897,"column":8,"offset":34174}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"f(i, j)"}],"position":{"start":{"line":897,"column":8,"offset":34174},"end":{"line":897,"column":17,"offset":34183}}},{"type":"text","value":" to be the minimum path sum from ","position":{"start":{"line":897,"column":17,"offset":34183},"end":{"line":897,"column":50,"offset":34216}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"triangle[0][0]"}],"position":{"start":{"line":897,"column":50,"offset":34216},"end":{"line":897,"column":66,"offset":34232}}},{"type":"text","value":" to ","position":{"start":{"line":897,"column":66,"offset":34232},"end":{"line":897,"column":70,"offset":34236}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"triangle[i][j]"}],"position":{"start":{"line":897,"column":70,"offset":34236},"end":{"line":897,"column":86,"offset":34252}}},{"type":"text","value":".","position":{"start":{"line":897,"column":86,"offset":34252},"end":{"line":897,"column":87,"offset":34253}}}],"position":{"start":{"line":897,"column":1,"offset":34167},"end":{"line":897,"column":87,"offset":34253}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"f(i, 0) = f(i-1, j) + triangle[i][0]\nf(i, j) = min( f(i-1, j-1), f(i-1, j) ) + triangle[i][j], 0 < j < i\nf(i, i) = f(i-1, i-1) + triangle[i][i], i > 0\n"}],"position":{"start":{"line":899,"column":1,"offset":34255},"end":{"line":901,"column":50,"offset":34417}}}],"position":{"start":{"line":899,"column":1,"offset":34255},"end":{"line":901,"column":50,"offset":34417}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Dynamic array can be used.","position":{"start":{"line":903,"column":1,"offset":34419},"end":{"line":903,"column":27,"offset":34445}}}],"position":{"start":{"line":903,"column":1,"offset":34419},"end":{"line":903,"column":27,"offset":34445}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number[][]} triangle\n * @return {number}\n */\nlet minimumTotal = function (triangle) {\n    if (triangle.length <= 0) {\n        return 0;\n    }\n\n    const dp = [triangle[0][0]];\n    for (let i = 1; i < triangle.length; i++) {\n        dp[i] = dp[i - 1] + triangle[i][i];\n        for (let j = i - 1; j >= 1; j--) {\n            dp[j] = Math.min(dp[j], dp[j - 1]) + triangle[i][j];\n        }\n        dp[0] += triangle[i][0];\n    }\n    return Math.min(...dp);\n};\n"}],"position":{"start":{"line":905,"column":1,"offset":34447},"end":{"line":925,"column":4,"offset":34927}}}],"position":{"start":{"line":905,"column":1,"offset":34447},"end":{"line":925,"column":4,"offset":34927}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":927,"column":1,"offset":34929},"end":{"line":927,"column":4,"offset":34932}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Easy\nRelated Topics:\n\"Array\": ","position":{"start":{"line":929,"column":1,"offset":34934},"end":{"line":931,"column":10,"offset":34976}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":931,"column":10,"offset":34976},"end":{"line":931,"column":40,"offset":35006}}}],"position":{"start":{"line":931,"column":10,"offset":34976},"end":{"line":931,"column":40,"offset":35006}}},{"type":"text","value":"\n\"Dynamic Programming\": ","position":{"start":{"line":931,"column":40,"offset":35006},"end":{"line":932,"column":24,"offset":35030}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/dynamic-programming"},"children":[{"type":"text","value":"https://leetcode.com/tag/dynamic-programming","position":{"start":{"line":932,"column":24,"offset":35030},"end":{"line":932,"column":68,"offset":35074}}}],"position":{"start":{"line":932,"column":24,"offset":35030},"end":{"line":932,"column":68,"offset":35074}}},{"type":"text","value":"\nSimilar Questions:\n\"Maximum Subarray\": ","position":{"start":{"line":932,"column":68,"offset":35074},"end":{"line":934,"column":21,"offset":35114}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/maximum-subarray"},"children":[{"type":"text","value":"https://leetcode.com/problems/maximum-subarray","position":{"start":{"line":934,"column":21,"offset":35114},"end":{"line":934,"column":67,"offset":35160}}}],"position":{"start":{"line":934,"column":21,"offset":35114},"end":{"line":934,"column":67,"offset":35160}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock II\": ","position":{"start":{"line":934,"column":67,"offset":35160},"end":{"line":935,"column":39,"offset":35199}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii","position":{"start":{"line":935,"column":39,"offset":35199},"end":{"line":935,"column":103,"offset":35263}}}],"position":{"start":{"line":935,"column":39,"offset":35199},"end":{"line":935,"column":103,"offset":35263}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock III\": ","position":{"start":{"line":935,"column":103,"offset":35263},"end":{"line":936,"column":40,"offset":35303}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii","position":{"start":{"line":936,"column":40,"offset":35303},"end":{"line":936,"column":105,"offset":35368}}}],"position":{"start":{"line":936,"column":40,"offset":35303},"end":{"line":936,"column":105,"offset":35368}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock IV\": ","position":{"start":{"line":936,"column":105,"offset":35368},"end":{"line":937,"column":39,"offset":35407}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv","position":{"start":{"line":937,"column":39,"offset":35407},"end":{"line":937,"column":103,"offset":35471}}}],"position":{"start":{"line":937,"column":39,"offset":35407},"end":{"line":937,"column":103,"offset":35471}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock with Cooldown\": ","position":{"start":{"line":937,"column":103,"offset":35471},"end":{"line":938,"column":50,"offset":35521}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown","position":{"start":{"line":938,"column":50,"offset":35521},"end":{"line":938,"column":125,"offset":35596}}}],"position":{"start":{"line":938,"column":50,"offset":35521},"end":{"line":938,"column":125,"offset":35596}}}],"position":{"start":{"line":929,"column":1,"offset":34934},"end":{"line":938,"column":125,"offset":35596}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":940,"column":1,"offset":35598},"end":{"line":940,"column":4,"offset":35601}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#121-best-time-to-buy-and-sell-stockhttpsleetcodecomproblemsbest-time-to-buy-and-sell-stockdescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":942,"column":2,"offset":35604},"end":{"line":942,"column":142,"offset":35744}}}],"position":{"start":{"line":942,"column":1,"offset":35603},"end":{"line":942,"column":247,"offset":35849}}}],"position":{"start":{"line":942,"column":1,"offset":35603},"end":{"line":942,"column":247,"offset":35849}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":944,"column":4,"offset":35854},"end":{"line":944,"column":6,"offset":35856}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/"},"children":[{"type":"text","value":"121. Best Time to Buy and Sell Stock","position":{"start":{"line":944,"column":7,"offset":35857},"end":{"line":944,"column":43,"offset":35893}}}],"position":{"start":{"line":944,"column":6,"offset":35856},"end":{"line":944,"column":120,"offset":35970}}}],"position":{"start":{"line":944,"column":1,"offset":35851},"end":{"line":944,"column":120,"offset":35970}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":946,"column":5,"offset":35976},"end":{"line":946,"column":13,"offset":35984}}}],"position":{"start":{"line":946,"column":1,"offset":35972},"end":{"line":946,"column":13,"offset":35984}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Say you have an array for which the ","position":{"start":{"line":948,"column":1,"offset":35986},"end":{"line":948,"column":37,"offset":36022}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"i","position":{"start":{"line":948,"column":38,"offset":36023},"end":{"line":948,"column":39,"offset":36024}}}],"position":{"start":{"line":948,"column":37,"offset":36022},"end":{"line":948,"column":40,"offset":36025}}},{"type":"text","value":"th element is the price of a given stock on day ","position":{"start":{"line":948,"column":40,"offset":36025},"end":{"line":948,"column":88,"offset":36073}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"i","position":{"start":{"line":948,"column":89,"offset":36074},"end":{"line":948,"column":90,"offset":36075}}}],"position":{"start":{"line":948,"column":88,"offset":36073},"end":{"line":948,"column":91,"offset":36076}}},{"type":"text","value":".","position":{"start":{"line":948,"column":91,"offset":36076},"end":{"line":948,"column":92,"offset":36077}}}],"position":{"start":{"line":948,"column":1,"offset":35986},"end":{"line":948,"column":92,"offset":36077}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.","position":{"start":{"line":950,"column":1,"offset":36079},"end":{"line":950,"column":160,"offset":36238}}}],"position":{"start":{"line":950,"column":1,"offset":36079},"end":{"line":950,"column":160,"offset":36238}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note that you cannot sell a stock before you buy one.","position":{"start":{"line":952,"column":1,"offset":36240},"end":{"line":952,"column":54,"offset":36293}}}],"position":{"start":{"line":952,"column":1,"offset":36240},"end":{"line":952,"column":54,"offset":36293}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":954,"column":3,"offset":36297},"end":{"line":954,"column":13,"offset":36307}}}],"position":{"start":{"line":954,"column":1,"offset":36295},"end":{"line":954,"column":15,"offset":36309}}}],"position":{"start":{"line":954,"column":1,"offset":36295},"end":{"line":954,"column":15,"offset":36309}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n             Not 7-1 = 6, as selling price needs to be larger than buying price.\n"}],"position":{"start":{"line":956,"column":1,"offset":36311},"end":{"line":962,"column":4,"offset":36518}}}],"position":{"start":{"line":956,"column":1,"offset":36311},"end":{"line":962,"column":4,"offset":36518}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":964,"column":3,"offset":36522},"end":{"line":964,"column":13,"offset":36532}}}],"position":{"start":{"line":964,"column":1,"offset":36520},"end":{"line":964,"column":15,"offset":36534}}}],"position":{"start":{"line":964,"column":1,"offset":36520},"end":{"line":964,"column":15,"offset":36534}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n"}],"position":{"start":{"line":966,"column":1,"offset":36536},"end":{"line":971,"column":4,"offset":36645}}}],"position":{"start":{"line":966,"column":1,"offset":36536},"end":{"line":971,"column":4,"offset":36645}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":973,"column":5,"offset":36651},"end":{"line":973,"column":14,"offset":36660}}}],"position":{"start":{"line":973,"column":1,"offset":36647},"end":{"line":973,"column":14,"offset":36660}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Only care about positive profits. Take the frist item as base and scan to the right. If we encounter an item ","position":{"start":{"line":975,"column":1,"offset":36662},"end":{"line":975,"column":110,"offset":36771}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"j"}],"position":{"start":{"line":975,"column":110,"offset":36771},"end":{"line":975,"column":113,"offset":36774}}},{"type":"text","value":" whose price ","position":{"start":{"line":975,"column":113,"offset":36774},"end":{"line":975,"column":126,"offset":36787}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"price[j]"}],"position":{"start":{"line":975,"column":126,"offset":36787},"end":{"line":975,"column":136,"offset":36797}}},{"type":"text","value":" is lower than the base (which means if we sell now the profit would be negative), we sell ","position":{"start":{"line":975,"column":136,"offset":36797},"end":{"line":975,"column":227,"offset":36888}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"j-1"}],"position":{"start":{"line":975,"column":227,"offset":36888},"end":{"line":975,"column":232,"offset":36893}}},{"type":"text","value":" instead and make ","position":{"start":{"line":975,"column":232,"offset":36893},"end":{"line":975,"column":250,"offset":36911}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"j"}],"position":{"start":{"line":975,"column":250,"offset":36911},"end":{"line":975,"column":253,"offset":36914}}},{"type":"text","value":" the new base.","position":{"start":{"line":975,"column":253,"offset":36914},"end":{"line":975,"column":267,"offset":36928}}}],"position":{"start":{"line":975,"column":1,"offset":36662},"end":{"line":975,"column":267,"offset":36928}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Because ","position":{"start":{"line":977,"column":1,"offset":36930},"end":{"line":977,"column":9,"offset":36938}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"price[j]"}],"position":{"start":{"line":977,"column":9,"offset":36938},"end":{"line":977,"column":19,"offset":36948}}},{"type":"text","value":" is lower that the base, using ","position":{"start":{"line":977,"column":19,"offset":36948},"end":{"line":977,"column":50,"offset":36979}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"j"}],"position":{"start":{"line":977,"column":50,"offset":36979},"end":{"line":977,"column":53,"offset":36982}}},{"type":"text","value":" as new base is guaranteed to gain more profit comparing to the old one.","position":{"start":{"line":977,"column":53,"offset":36982},"end":{"line":977,"column":125,"offset":37054}}}],"position":{"start":{"line":977,"column":1,"offset":36930},"end":{"line":977,"column":125,"offset":37054}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number[]} prices\n * @return {number}\n */\nlet maxProfit = function (prices) {\n    let max = 0;\n    let base = prices[0];\n    for (let i = 1; i < prices.length; i++) {\n        const profit = prices[i] - base;\n        if (profit > max) {\n            max = profit;\n        } else if (profit < 0) {\n            base = prices[i];\n        }\n    }\n    return max;\n};\n"}],"position":{"start":{"line":979,"column":1,"offset":37056},"end":{"line":997,"column":4,"offset":37439}}}],"position":{"start":{"line":979,"column":1,"offset":37056},"end":{"line":997,"column":4,"offset":37439}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":999,"column":1,"offset":37441},"end":{"line":999,"column":4,"offset":37444}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Easy\nRelated Topics:\n\"Array\": ","position":{"start":{"line":1001,"column":1,"offset":37446},"end":{"line":1003,"column":10,"offset":37488}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":1003,"column":10,"offset":37488},"end":{"line":1003,"column":40,"offset":37518}}}],"position":{"start":{"line":1003,"column":10,"offset":37488},"end":{"line":1003,"column":40,"offset":37518}}},{"type":"text","value":"\n\"Greedy\": ","position":{"start":{"line":1003,"column":40,"offset":37518},"end":{"line":1004,"column":11,"offset":37529}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/greedy"},"children":[{"type":"text","value":"https://leetcode.com/tag/greedy","position":{"start":{"line":1004,"column":11,"offset":37529},"end":{"line":1004,"column":42,"offset":37560}}}],"position":{"start":{"line":1004,"column":11,"offset":37529},"end":{"line":1004,"column":42,"offset":37560}}},{"type":"text","value":"\nSimilar Questions:\n\"Best Time to Buy and Sell Stock\": ","position":{"start":{"line":1004,"column":42,"offset":37560},"end":{"line":1006,"column":36,"offset":37615}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock","position":{"start":{"line":1006,"column":36,"offset":37615},"end":{"line":1006,"column":97,"offset":37676}}}],"position":{"start":{"line":1006,"column":36,"offset":37615},"end":{"line":1006,"column":97,"offset":37676}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock III\": ","position":{"start":{"line":1006,"column":97,"offset":37676},"end":{"line":1007,"column":40,"offset":37716}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii","position":{"start":{"line":1007,"column":40,"offset":37716},"end":{"line":1007,"column":105,"offset":37781}}}],"position":{"start":{"line":1007,"column":40,"offset":37716},"end":{"line":1007,"column":105,"offset":37781}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock IV\": ","position":{"start":{"line":1007,"column":105,"offset":37781},"end":{"line":1008,"column":39,"offset":37820}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv","position":{"start":{"line":1008,"column":39,"offset":37820},"end":{"line":1008,"column":103,"offset":37884}}}],"position":{"start":{"line":1008,"column":39,"offset":37820},"end":{"line":1008,"column":103,"offset":37884}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock with Cooldown\": ","position":{"start":{"line":1008,"column":103,"offset":37884},"end":{"line":1009,"column":50,"offset":37934}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown","position":{"start":{"line":1009,"column":50,"offset":37934},"end":{"line":1009,"column":125,"offset":38009}}}],"position":{"start":{"line":1009,"column":50,"offset":37934},"end":{"line":1009,"column":125,"offset":38009}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock with Transaction Fee\": ","position":{"start":{"line":1009,"column":125,"offset":38009},"end":{"line":1010,"column":57,"offset":38066}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee","position":{"start":{"line":1010,"column":57,"offset":38066},"end":{"line":1010,"column":139,"offset":38148}}}],"position":{"start":{"line":1010,"column":57,"offset":38066},"end":{"line":1010,"column":139,"offset":38148}}}],"position":{"start":{"line":1001,"column":1,"offset":37446},"end":{"line":1010,"column":139,"offset":38148}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1012,"column":1,"offset":38150},"end":{"line":1012,"column":4,"offset":38153}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#122-best-time-to-buy-and-sell-stock-iihttpsleetcodecomproblemsbest-time-to-buy-and-sell-stock-iidescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1014,"column":2,"offset":38156},"end":{"line":1014,"column":142,"offset":38296}}}],"position":{"start":{"line":1014,"column":1,"offset":38155},"end":{"line":1014,"column":253,"offset":38407}}}],"position":{"start":{"line":1014,"column":1,"offset":38155},"end":{"line":1014,"column":253,"offset":38407}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1016,"column":4,"offset":38412},"end":{"line":1016,"column":6,"offset":38414}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/"},"children":[{"type":"text","value":"122. Best Time to Buy and Sell Stock II","position":{"start":{"line":1016,"column":7,"offset":38415},"end":{"line":1016,"column":46,"offset":38454}}}],"position":{"start":{"line":1016,"column":6,"offset":38414},"end":{"line":1016,"column":126,"offset":38534}}}],"position":{"start":{"line":1016,"column":1,"offset":38409},"end":{"line":1016,"column":126,"offset":38534}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1018,"column":5,"offset":38540},"end":{"line":1018,"column":13,"offset":38548}}}],"position":{"start":{"line":1018,"column":1,"offset":38536},"end":{"line":1018,"column":13,"offset":38548}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Say you have an array for which the ","position":{"start":{"line":1020,"column":1,"offset":38550},"end":{"line":1020,"column":37,"offset":38586}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"i","position":{"start":{"line":1020,"column":38,"offset":38587},"end":{"line":1020,"column":39,"offset":38588}}}],"position":{"start":{"line":1020,"column":37,"offset":38586},"end":{"line":1020,"column":40,"offset":38589}}},{"type":"text","value":"th element is the price of a given stock on day ","position":{"start":{"line":1020,"column":40,"offset":38589},"end":{"line":1020,"column":88,"offset":38637}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"i","position":{"start":{"line":1020,"column":89,"offset":38638},"end":{"line":1020,"column":90,"offset":38639}}}],"position":{"start":{"line":1020,"column":88,"offset":38637},"end":{"line":1020,"column":91,"offset":38640}}},{"type":"text","value":".","position":{"start":{"line":1020,"column":91,"offset":38640},"end":{"line":1020,"column":92,"offset":38641}}}],"position":{"start":{"line":1020,"column":1,"offset":38550},"end":{"line":1020,"column":92,"offset":38641}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).","position":{"start":{"line":1022,"column":1,"offset":38643},"end":{"line":1022,"column":162,"offset":38804}}}],"position":{"start":{"line":1022,"column":1,"offset":38643},"end":{"line":1022,"column":162,"offset":38804}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":1024,"column":3,"offset":38808},"end":{"line":1024,"column":8,"offset":38813}}}],"position":{"start":{"line":1024,"column":1,"offset":38806},"end":{"line":1024,"column":10,"offset":38815}}},{"type":"text","value":" You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).","position":{"start":{"line":1024,"column":10,"offset":38815},"end":{"line":1024,"column":125,"offset":38930}}}],"position":{"start":{"line":1024,"column":1,"offset":38806},"end":{"line":1024,"column":125,"offset":38930}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":1026,"column":3,"offset":38934},"end":{"line":1026,"column":13,"offset":38944}}}],"position":{"start":{"line":1026,"column":1,"offset":38932},"end":{"line":1026,"column":15,"offset":38946}}}],"position":{"start":{"line":1026,"column":1,"offset":38932},"end":{"line":1026,"column":15,"offset":38946}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [7,1,5,3,6,4]\nOutput: 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\n             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\n"}],"position":{"start":{"line":1028,"column":1,"offset":38948},"end":{"line":1034,"column":4,"offset":39166}}}],"position":{"start":{"line":1028,"column":1,"offset":38948},"end":{"line":1034,"column":4,"offset":39166}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":1036,"column":3,"offset":39170},"end":{"line":1036,"column":13,"offset":39180}}}],"position":{"start":{"line":1036,"column":1,"offset":39168},"end":{"line":1036,"column":15,"offset":39182}}}],"position":{"start":{"line":1036,"column":1,"offset":39168},"end":{"line":1036,"column":15,"offset":39182}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are\n             engaging multiple transactions at the same time. You must sell before buying again.\n"}],"position":{"start":{"line":1038,"column":1,"offset":39184},"end":{"line":1045,"column":4,"offset":39498}}}],"position":{"start":{"line":1038,"column":1,"offset":39184},"end":{"line":1045,"column":4,"offset":39498}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 3:","position":{"start":{"line":1047,"column":3,"offset":39502},"end":{"line":1047,"column":13,"offset":39512}}}],"position":{"start":{"line":1047,"column":1,"offset":39500},"end":{"line":1047,"column":15,"offset":39514}}}],"position":{"start":{"line":1047,"column":1,"offset":39500},"end":{"line":1047,"column":15,"offset":39514}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n"}],"position":{"start":{"line":1049,"column":1,"offset":39516},"end":{"line":1051,"column":76,"offset":39628}}}],"position":{"start":{"line":1049,"column":1,"offset":39516},"end":{"line":1051,"column":76,"offset":39628}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1053,"column":5,"offset":39634},"end":{"line":1053,"column":14,"offset":39643}}}],"position":{"start":{"line":1053,"column":1,"offset":39630},"end":{"line":1053,"column":14,"offset":39643}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sell immediately after the price drops. Or in other perspective, it is the sum of all the incremental pairs (buy in then immediately sell out).","position":{"start":{"line":1055,"column":1,"offset":39645},"end":{"line":1055,"column":144,"offset":39788}}}],"position":{"start":{"line":1055,"column":1,"offset":39645},"end":{"line":1055,"column":144,"offset":39788}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number[]} prices\n * @return {number}\n */\nlet maxProfit = function (prices) {\n    let max = 0;\n    for (let i = 1; i < prices.length; i++) {\n        if (prices[i] > prices[i - 1]) {\n            max += prices[i] - prices[i - 1];\n        }\n    }\n    return max;\n};\n"}],"position":{"start":{"line":1057,"column":1,"offset":39790},"end":{"line":1071,"column":4,"offset":40076}}}],"position":{"start":{"line":1057,"column":1,"offset":39790},"end":{"line":1071,"column":4,"offset":40076}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1073,"column":1,"offset":40078},"end":{"line":1073,"column":4,"offset":40081}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Hard\nRelated Topics:\n\"Array\": ","position":{"start":{"line":1075,"column":1,"offset":40083},"end":{"line":1077,"column":10,"offset":40125}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":1077,"column":10,"offset":40125},"end":{"line":1077,"column":40,"offset":40155}}}],"position":{"start":{"line":1077,"column":10,"offset":40125},"end":{"line":1077,"column":40,"offset":40155}}},{"type":"text","value":"\n\"Dynamic Programming\": ","position":{"start":{"line":1077,"column":40,"offset":40155},"end":{"line":1078,"column":24,"offset":40179}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/dynamic-programming"},"children":[{"type":"text","value":"https://leetcode.com/tag/dynamic-programming","position":{"start":{"line":1078,"column":24,"offset":40179},"end":{"line":1078,"column":68,"offset":40223}}}],"position":{"start":{"line":1078,"column":24,"offset":40179},"end":{"line":1078,"column":68,"offset":40223}}},{"type":"text","value":"\nSimilar Questions:\n\"Best Time to Buy and Sell Stock\": ","position":{"start":{"line":1078,"column":68,"offset":40223},"end":{"line":1080,"column":36,"offset":40278}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock","position":{"start":{"line":1080,"column":36,"offset":40278},"end":{"line":1080,"column":97,"offset":40339}}}],"position":{"start":{"line":1080,"column":36,"offset":40278},"end":{"line":1080,"column":97,"offset":40339}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock II\": ","position":{"start":{"line":1080,"column":97,"offset":40339},"end":{"line":1081,"column":39,"offset":40378}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii","position":{"start":{"line":1081,"column":39,"offset":40378},"end":{"line":1081,"column":103,"offset":40442}}}],"position":{"start":{"line":1081,"column":39,"offset":40378},"end":{"line":1081,"column":103,"offset":40442}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock IV\": ","position":{"start":{"line":1081,"column":103,"offset":40442},"end":{"line":1082,"column":39,"offset":40481}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv","position":{"start":{"line":1082,"column":39,"offset":40481},"end":{"line":1082,"column":103,"offset":40545}}}],"position":{"start":{"line":1082,"column":39,"offset":40481},"end":{"line":1082,"column":103,"offset":40545}}},{"type":"text","value":"\n\"Maximum Sum of 3 Non-Overlapping Subarrays\": ","position":{"start":{"line":1082,"column":103,"offset":40545},"end":{"line":1083,"column":47,"offset":40592}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays"},"children":[{"type":"text","value":"https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays","position":{"start":{"line":1083,"column":47,"offset":40592},"end":{"line":1083,"column":119,"offset":40664}}}],"position":{"start":{"line":1083,"column":47,"offset":40592},"end":{"line":1083,"column":119,"offset":40664}}}],"position":{"start":{"line":1075,"column":1,"offset":40083},"end":{"line":1083,"column":119,"offset":40664}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1085,"column":1,"offset":40666},"end":{"line":1085,"column":4,"offset":40669}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#123-best-time-to-buy-and-sell-stock-iiihttpsleetcodecomproblemsbest-time-to-buy-and-sell-stock-iiidescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1087,"column":2,"offset":40672},"end":{"line":1087,"column":142,"offset":40812}}}],"position":{"start":{"line":1087,"column":1,"offset":40671},"end":{"line":1087,"column":255,"offset":40925}}}],"position":{"start":{"line":1087,"column":1,"offset":40671},"end":{"line":1087,"column":255,"offset":40925}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1089,"column":4,"offset":40930},"end":{"line":1089,"column":6,"offset":40932}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/description/"},"children":[{"type":"text","value":"123. Best Time to Buy and Sell Stock III","position":{"start":{"line":1089,"column":7,"offset":40933},"end":{"line":1089,"column":47,"offset":40973}}}],"position":{"start":{"line":1089,"column":6,"offset":40932},"end":{"line":1089,"column":128,"offset":41054}}}],"position":{"start":{"line":1089,"column":1,"offset":40927},"end":{"line":1089,"column":128,"offset":41054}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1091,"column":5,"offset":41060},"end":{"line":1091,"column":13,"offset":41068}}}],"position":{"start":{"line":1091,"column":1,"offset":41056},"end":{"line":1091,"column":13,"offset":41068}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Say you have an array for which the ","position":{"start":{"line":1093,"column":1,"offset":41070},"end":{"line":1093,"column":37,"offset":41106}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"i","position":{"start":{"line":1093,"column":38,"offset":41107},"end":{"line":1093,"column":39,"offset":41108}}}],"position":{"start":{"line":1093,"column":37,"offset":41106},"end":{"line":1093,"column":40,"offset":41109}}},{"type":"text","value":"th element is the price of a given stock on day ","position":{"start":{"line":1093,"column":40,"offset":41109},"end":{"line":1093,"column":88,"offset":41157}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"i","position":{"start":{"line":1093,"column":89,"offset":41158},"end":{"line":1093,"column":90,"offset":41159}}}],"position":{"start":{"line":1093,"column":88,"offset":41157},"end":{"line":1093,"column":91,"offset":41160}}},{"type":"text","value":".","position":{"start":{"line":1093,"column":91,"offset":41160},"end":{"line":1093,"column":92,"offset":41161}}}],"position":{"start":{"line":1093,"column":1,"offset":41070},"end":{"line":1093,"column":92,"offset":41161}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Design an algorithm to find the maximum profit. You may complete at most ","position":{"start":{"line":1095,"column":1,"offset":41163},"end":{"line":1095,"column":74,"offset":41236}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"two","position":{"start":{"line":1095,"column":75,"offset":41237},"end":{"line":1095,"column":78,"offset":41240}}}],"position":{"start":{"line":1095,"column":74,"offset":41236},"end":{"line":1095,"column":79,"offset":41241}}},{"type":"text","value":" transactions.","position":{"start":{"line":1095,"column":79,"offset":41241},"end":{"line":1095,"column":93,"offset":41255}}}],"position":{"start":{"line":1095,"column":1,"offset":41163},"end":{"line":1095,"column":93,"offset":41255}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"*","position":{"start":{"line":1097,"column":1,"offset":41257},"end":{"line":1097,"column":3,"offset":41259}}},{"type":"text","value":"*","position":{"start":{"line":1097,"column":3,"offset":41259},"end":{"line":1097,"column":5,"offset":41261}}},{"type":"text","value":"Note:","position":{"start":{"line":1097,"column":5,"offset":41261},"end":{"line":1097,"column":10,"offset":41266}}},{"type":"text","value":"*","position":{"start":{"line":1097,"column":10,"offset":41266},"end":{"line":1097,"column":12,"offset":41268}}},{"type":"text","value":"*","position":{"start":{"line":1097,"column":12,"offset":41268},"end":{"line":1097,"column":14,"offset":41270}}},{"type":"text","value":"You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).","position":{"start":{"line":1097,"column":14,"offset":41270},"end":{"line":1097,"column":128,"offset":41384}}}],"position":{"start":{"line":1097,"column":1,"offset":41257},"end":{"line":1097,"column":128,"offset":41384}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":1099,"column":3,"offset":41388},"end":{"line":1099,"column":13,"offset":41398}}}],"position":{"start":{"line":1099,"column":1,"offset":41386},"end":{"line":1099,"column":15,"offset":41400}}}],"position":{"start":{"line":1099,"column":1,"offset":41386},"end":{"line":1099,"column":15,"offset":41400}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [3,3,5,0,0,3,1,4]\nOutput: 6\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n             Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n"}],"position":{"start":{"line":1101,"column":1,"offset":41402},"end":{"line":1104,"column":96,"offset":41631}}}],"position":{"start":{"line":1101,"column":1,"offset":41402},"end":{"line":1104,"column":96,"offset":41631}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":1106,"column":3,"offset":41635},"end":{"line":1106,"column":13,"offset":41645}}}],"position":{"start":{"line":1106,"column":1,"offset":41633},"end":{"line":1106,"column":15,"offset":41647}}}],"position":{"start":{"line":1106,"column":1,"offset":41633},"end":{"line":1106,"column":15,"offset":41647}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are\n             engaging multiple transactions at the same time. You must sell before buying again.\n"}],"position":{"start":{"line":1108,"column":1,"offset":41649},"end":{"line":1115,"column":4,"offset":41963}}}],"position":{"start":{"line":1108,"column":1,"offset":41649},"end":{"line":1115,"column":4,"offset":41963}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 3:","position":{"start":{"line":1117,"column":3,"offset":41967},"end":{"line":1117,"column":13,"offset":41977}}}],"position":{"start":{"line":1117,"column":1,"offset":41965},"end":{"line":1117,"column":15,"offset":41979}}}],"position":{"start":{"line":1117,"column":1,"offset":41965},"end":{"line":1117,"column":15,"offset":41979}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n"}],"position":{"start":{"line":1119,"column":1,"offset":41981},"end":{"line":1121,"column":76,"offset":42093}}}],"position":{"start":{"line":1119,"column":1,"offset":41981},"end":{"line":1121,"column":76,"offset":42093}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1123,"column":5,"offset":42099},"end":{"line":1123,"column":14,"offset":42108}}}],"position":{"start":{"line":1123,"column":1,"offset":42095},"end":{"line":1123,"column":14,"offset":42108}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Multiple transactions may not be engaged in at the same time. That means if we view the days that involed in the same transaction as a group, there won't be any intersection. We may complete at most ","position":{"start":{"line":1125,"column":1,"offset":42110},"end":{"line":1125,"column":200,"offset":42309}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"two","position":{"start":{"line":1125,"column":201,"offset":42310},"end":{"line":1125,"column":204,"offset":42313}}}],"position":{"start":{"line":1125,"column":200,"offset":42309},"end":{"line":1125,"column":205,"offset":42314}}},{"type":"text","value":" transactions, so divide the days into two groups, ","position":{"start":{"line":1125,"column":205,"offset":42314},"end":{"line":1125,"column":256,"offset":42365}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[0...k]"}],"position":{"start":{"line":1125,"column":256,"offset":42365},"end":{"line":1125,"column":265,"offset":42374}}},{"type":"text","value":" and ","position":{"start":{"line":1125,"column":265,"offset":42374},"end":{"line":1125,"column":270,"offset":42379}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[k...n-1]"}],"position":{"start":{"line":1125,"column":270,"offset":42379},"end":{"line":1125,"column":281,"offset":42390}}},{"type":"text","value":". Notice ","position":{"start":{"line":1125,"column":281,"offset":42390},"end":{"line":1125,"column":290,"offset":42399}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"k"}],"position":{"start":{"line":1125,"column":290,"offset":42399},"end":{"line":1125,"column":293,"offset":42402}}},{"type":"text","value":" exists in both groups because technically we can sell out then immediately buy in at the same day.","position":{"start":{"line":1125,"column":293,"offset":42402},"end":{"line":1125,"column":392,"offset":42501}}}],"position":{"start":{"line":1125,"column":1,"offset":42110},"end":{"line":1125,"column":392,"offset":42501}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define ","position":{"start":{"line":1127,"column":1,"offset":42503},"end":{"line":1127,"column":8,"offset":42510}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"p1(i)"}],"position":{"start":{"line":1127,"column":8,"offset":42510},"end":{"line":1127,"column":15,"offset":42517}}},{"type":"text","value":" to be the max profit of day ","position":{"start":{"line":1127,"column":15,"offset":42517},"end":{"line":1127,"column":44,"offset":42546}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[0...i]"}],"position":{"start":{"line":1127,"column":44,"offset":42546},"end":{"line":1127,"column":53,"offset":42555}}},{"type":"text","value":". This is just like the problem of ","position":{"start":{"line":1127,"column":53,"offset":42555},"end":{"line":1127,"column":88,"offset":42590}}},{"type":"element","tagName":"a","properties":{"href":"./121.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock.md"},"children":[{"type":"text","value":"121. Best Time to Buy and Sell Stock","position":{"start":{"line":1127,"column":89,"offset":42591},"end":{"line":1127,"column":125,"offset":42627}}}],"position":{"start":{"line":1127,"column":88,"offset":42590},"end":{"line":1127,"column":183,"offset":42685}}},{"type":"text","value":".","position":{"start":{"line":1127,"column":183,"offset":42685},"end":{"line":1127,"column":184,"offset":42686}}}],"position":{"start":{"line":1127,"column":1,"offset":42503},"end":{"line":1127,"column":184,"offset":42686}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"p1(0) = 0\np1(i) = max( p1(i-1), prices[i] - min(prices[0], ..., prices[i-1]) ), 0 < i <= n-1\n"}],"position":{"start":{"line":1129,"column":1,"offset":42688},"end":{"line":1130,"column":87,"offset":42788}}}],"position":{"start":{"line":1129,"column":1,"offset":42688},"end":{"line":1130,"column":87,"offset":42788}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define ","position":{"start":{"line":1132,"column":1,"offset":42790},"end":{"line":1132,"column":8,"offset":42797}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"p2(i)"}],"position":{"start":{"line":1132,"column":8,"offset":42797},"end":{"line":1132,"column":15,"offset":42804}}},{"type":"text","value":" to be the max profit of day ","position":{"start":{"line":1132,"column":15,"offset":42804},"end":{"line":1132,"column":44,"offset":42833}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[i...n-1]"}],"position":{"start":{"line":1132,"column":44,"offset":42833},"end":{"line":1132,"column":55,"offset":42844}}},{"type":"text","value":". This is the mirror of ","position":{"start":{"line":1132,"column":55,"offset":42844},"end":{"line":1132,"column":79,"offset":42868}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"p1"}],"position":{"start":{"line":1132,"column":79,"offset":42868},"end":{"line":1132,"column":83,"offset":42872}}},{"type":"text","value":".","position":{"start":{"line":1132,"column":83,"offset":42872},"end":{"line":1132,"column":84,"offset":42873}}}],"position":{"start":{"line":1132,"column":1,"offset":42790},"end":{"line":1132,"column":84,"offset":42873}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"p2(n-1) = 0\np2(i) = max( p2(i+1), max(prices[i], ..., prices[n-1]) - prices[i] ), n-1 > i >= 0\n"}],"position":{"start":{"line":1134,"column":1,"offset":42875},"end":{"line":1135,"column":87,"offset":42977}}}],"position":{"start":{"line":1134,"column":1,"offset":42875},"end":{"line":1135,"column":87,"offset":42977}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define ","position":{"start":{"line":1137,"column":1,"offset":42979},"end":{"line":1137,"column":8,"offset":42986}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"f(k)"}],"position":{"start":{"line":1137,"column":8,"offset":42986},"end":{"line":1137,"column":14,"offset":42992}}},{"type":"text","value":" to be ","position":{"start":{"line":1137,"column":14,"offset":42992},"end":{"line":1137,"column":21,"offset":42999}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"p1(k) + p2(k)"}],"position":{"start":{"line":1137,"column":21,"offset":42999},"end":{"line":1137,"column":36,"offset":43014}}},{"type":"text","value":". We need to get ","position":{"start":{"line":1137,"column":36,"offset":43014},"end":{"line":1137,"column":53,"offset":43031}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"max( f(0), ..., f(n-1) )"}],"position":{"start":{"line":1137,"column":53,"offset":43031},"end":{"line":1137,"column":79,"offset":43057}}},{"type":"text","value":".","position":{"start":{"line":1137,"column":79,"offset":43057},"end":{"line":1137,"column":80,"offset":43058}}}],"position":{"start":{"line":1137,"column":1,"offset":42979},"end":{"line":1137,"column":80,"offset":43058}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number[]} prices\n * @return {number}\n */\nlet maxProfit = function (prices) {\n    const len = prices.length;\n    if (len <= 1) {\n        return 0;\n    }\n\n    const dp = [0];\n\n    let min = prices[0];\n    for (let i = 1; i < len; i++) {\n        dp[i] = Math.max(dp[i - 1], prices[i] - min);\n        min = Math.min(prices[i], min);\n    }\n\n    let p2 = 0;\n    let max = prices[len - 1];\n    for (let i = len - 2; i >= 0; i--) {\n        max = Math.max(prices[i], max);\n        p2 = Math.max(p2, max - prices[i]);\n        dp[i] += p2;\n    }\n\n    return Math.max(...dp);\n};\n"}],"position":{"start":{"line":1139,"column":1,"offset":43060},"end":{"line":1168,"column":4,"offset":43651}}}],"position":{"start":{"line":1139,"column":1,"offset":43060},"end":{"line":1168,"column":4,"offset":43651}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1170,"column":1,"offset":43653},"end":{"line":1170,"column":4,"offset":43656}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Hard\nRelated Topics:\n\"Tree\": ","position":{"start":{"line":1172,"column":1,"offset":43658},"end":{"line":1174,"column":9,"offset":43699}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/tree"},"children":[{"type":"text","value":"https://leetcode.com/tag/tree","position":{"start":{"line":1174,"column":9,"offset":43699},"end":{"line":1174,"column":38,"offset":43728}}}],"position":{"start":{"line":1174,"column":9,"offset":43699},"end":{"line":1174,"column":38,"offset":43728}}},{"type":"text","value":"\n\"Depth-first Search\": ","position":{"start":{"line":1174,"column":38,"offset":43728},"end":{"line":1175,"column":23,"offset":43751}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/depth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/depth-first-search","position":{"start":{"line":1175,"column":23,"offset":43751},"end":{"line":1175,"column":66,"offset":43794}}}],"position":{"start":{"line":1175,"column":23,"offset":43751},"end":{"line":1175,"column":66,"offset":43794}}},{"type":"text","value":"\nSimilar Questions:\n\"Path Sum\": ","position":{"start":{"line":1175,"column":66,"offset":43794},"end":{"line":1177,"column":13,"offset":43826}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/path-sum"},"children":[{"type":"text","value":"https://leetcode.com/problems/path-sum","position":{"start":{"line":1177,"column":13,"offset":43826},"end":{"line":1177,"column":51,"offset":43864}}}],"position":{"start":{"line":1177,"column":13,"offset":43826},"end":{"line":1177,"column":51,"offset":43864}}},{"type":"text","value":"\n\"Sum Root to Leaf Numbers\": ","position":{"start":{"line":1177,"column":51,"offset":43864},"end":{"line":1178,"column":29,"offset":43893}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/sum-root-to-leaf-numbers"},"children":[{"type":"text","value":"https://leetcode.com/problems/sum-root-to-leaf-numbers","position":{"start":{"line":1178,"column":29,"offset":43893},"end":{"line":1178,"column":83,"offset":43947}}}],"position":{"start":{"line":1178,"column":29,"offset":43893},"end":{"line":1178,"column":83,"offset":43947}}},{"type":"text","value":"\n\"Path Sum IV\": ","position":{"start":{"line":1178,"column":83,"offset":43947},"end":{"line":1179,"column":16,"offset":43963}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/path-sum-iv"},"children":[{"type":"text","value":"https://leetcode.com/problems/path-sum-iv","position":{"start":{"line":1179,"column":16,"offset":43963},"end":{"line":1179,"column":57,"offset":44004}}}],"position":{"start":{"line":1179,"column":16,"offset":43963},"end":{"line":1179,"column":57,"offset":44004}}},{"type":"text","value":"\n\"Longest Univalue Path\": ","position":{"start":{"line":1179,"column":57,"offset":44004},"end":{"line":1180,"column":26,"offset":44030}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/longest-univalue-path"},"children":[{"type":"text","value":"https://leetcode.com/problems/longest-univalue-path","position":{"start":{"line":1180,"column":26,"offset":44030},"end":{"line":1180,"column":77,"offset":44081}}}],"position":{"start":{"line":1180,"column":26,"offset":44030},"end":{"line":1180,"column":77,"offset":44081}}}],"position":{"start":{"line":1172,"column":1,"offset":43658},"end":{"line":1180,"column":77,"offset":44081}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1182,"column":1,"offset":44083},"end":{"line":1182,"column":4,"offset":44086}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#124-binary-tree-maximum-path-sumhttpsleetcodecomproblemsbinary-tree-maximum-path-sumdescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1184,"column":2,"offset":44089},"end":{"line":1184,"column":142,"offset":44229}}}],"position":{"start":{"line":1184,"column":1,"offset":44088},"end":{"line":1184,"column":241,"offset":44328}}}],"position":{"start":{"line":1184,"column":1,"offset":44088},"end":{"line":1184,"column":241,"offset":44328}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1186,"column":4,"offset":44333},"end":{"line":1186,"column":6,"offset":44335}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/binary-tree-maximum-path-sum/description/"},"children":[{"type":"text","value":"124. Binary Tree Maximum Path Sum","position":{"start":{"line":1186,"column":7,"offset":44336},"end":{"line":1186,"column":40,"offset":44369}}}],"position":{"start":{"line":1186,"column":6,"offset":44335},"end":{"line":1186,"column":114,"offset":44443}}}],"position":{"start":{"line":1186,"column":1,"offset":44330},"end":{"line":1186,"column":114,"offset":44443}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1188,"column":5,"offset":44449},"end":{"line":1188,"column":13,"offset":44457}}}],"position":{"start":{"line":1188,"column":1,"offset":44445},"end":{"line":1188,"column":13,"offset":44457}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a ","position":{"start":{"line":1190,"column":1,"offset":44459},"end":{"line":1190,"column":9,"offset":44467}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"non-empty","position":{"start":{"line":1190,"column":11,"offset":44469},"end":{"line":1190,"column":20,"offset":44478}}}],"position":{"start":{"line":1190,"column":9,"offset":44467},"end":{"line":1190,"column":22,"offset":44480}}},{"type":"text","value":" binary tree, find the maximum path sum.","position":{"start":{"line":1190,"column":22,"offset":44480},"end":{"line":1190,"column":62,"offset":44520}}}],"position":{"start":{"line":1190,"column":1,"offset":44459},"end":{"line":1190,"column":62,"offset":44520}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain ","position":{"start":{"line":1192,"column":1,"offset":44522},"end":{"line":1192,"column":168,"offset":44689}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"at least one node","position":{"start":{"line":1192,"column":170,"offset":44691},"end":{"line":1192,"column":187,"offset":44708}}}],"position":{"start":{"line":1192,"column":168,"offset":44689},"end":{"line":1192,"column":189,"offset":44710}}},{"type":"text","value":" and does not need to go through the root.","position":{"start":{"line":1192,"column":189,"offset":44710},"end":{"line":1192,"column":231,"offset":44752}}}],"position":{"start":{"line":1192,"column":1,"offset":44522},"end":{"line":1192,"column":231,"offset":44752}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":1194,"column":3,"offset":44756},"end":{"line":1194,"column":13,"offset":44766}}}],"position":{"start":{"line":1194,"column":1,"offset":44754},"end":{"line":1194,"column":15,"offset":44768}}}],"position":{"start":{"line":1194,"column":1,"offset":44754},"end":{"line":1194,"column":15,"offset":44768}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [1,2,3]\n\n       1\n      / \\\n     2   3\n\nOutput: 6\n"}],"position":{"start":{"line":1196,"column":1,"offset":44770},"end":{"line":1205,"column":4,"offset":44835}}}],"position":{"start":{"line":1196,"column":1,"offset":44770},"end":{"line":1205,"column":4,"offset":44835}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":1207,"column":3,"offset":44839},"end":{"line":1207,"column":13,"offset":44849}}}],"position":{"start":{"line":1207,"column":1,"offset":44837},"end":{"line":1207,"column":15,"offset":44851}}}],"position":{"start":{"line":1207,"column":1,"offset":44837},"end":{"line":1207,"column":15,"offset":44851}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [-10,9,20,null,null,15,7]\n\n   -10\n   / \\\n  9  20\n    /  \\\n   15   7\n\nOutput: 42\n"}],"position":{"start":{"line":1209,"column":1,"offset":44853},"end":{"line":1220,"column":4,"offset":44948}}}],"position":{"start":{"line":1209,"column":1,"offset":44853},"end":{"line":1220,"column":4,"offset":44948}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1222,"column":5,"offset":44954},"end":{"line":1222,"column":14,"offset":44963}}}],"position":{"start":{"line":1222,"column":1,"offset":44950},"end":{"line":1222,"column":14,"offset":44963}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For every ","position":{"start":{"line":1224,"column":1,"offset":44965},"end":{"line":1224,"column":11,"offset":44975}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node"}],"position":{"start":{"line":1224,"column":11,"offset":44975},"end":{"line":1224,"column":17,"offset":44981}}},{"type":"text","value":", there are six possible ways to get the max path sum:","position":{"start":{"line":1224,"column":17,"offset":44981},"end":{"line":1224,"column":71,"offset":45035}}}],"position":{"start":{"line":1224,"column":1,"offset":44965},"end":{"line":1224,"column":71,"offset":45035}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With ","position":{"start":{"line":1226,"column":5,"offset":45041},"end":{"line":1226,"column":10,"offset":45046}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.val"}],"position":{"start":{"line":1226,"column":10,"offset":45046},"end":{"line":1226,"column":20,"offset":45056}}}],"position":{"start":{"line":1226,"column":5,"offset":45041},"end":{"line":1226,"column":20,"offset":45056}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.val"}],"position":{"start":{"line":1227,"column":9,"offset":45065},"end":{"line":1227,"column":19,"offset":45075}}},{"type":"text","value":" plus the max sum of a path that ends with ","position":{"start":{"line":1227,"column":19,"offset":45075},"end":{"line":1227,"column":62,"offset":45118}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.left"}],"position":{"start":{"line":1227,"column":62,"offset":45118},"end":{"line":1227,"column":73,"offset":45129}}},{"type":"text","value":".","position":{"start":{"line":1227,"column":73,"offset":45129},"end":{"line":1227,"column":74,"offset":45130}}}],"position":{"start":{"line":1227,"column":5,"offset":45061},"end":{"line":1227,"column":74,"offset":45130}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.val"}],"position":{"start":{"line":1228,"column":9,"offset":45139},"end":{"line":1228,"column":19,"offset":45149}}},{"type":"text","value":" plus the max sum of a path that starts with ","position":{"start":{"line":1228,"column":19,"offset":45149},"end":{"line":1228,"column":64,"offset":45194}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.right"}],"position":{"start":{"line":1228,"column":64,"offset":45194},"end":{"line":1228,"column":76,"offset":45206}}},{"type":"text","value":".","position":{"start":{"line":1228,"column":76,"offset":45206},"end":{"line":1228,"column":77,"offset":45207}}}],"position":{"start":{"line":1228,"column":5,"offset":45135},"end":{"line":1228,"column":77,"offset":45207}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.val"}],"position":{"start":{"line":1229,"column":9,"offset":45216},"end":{"line":1229,"column":19,"offset":45226}}},{"type":"text","value":" plus the max sum of both paths.","position":{"start":{"line":1229,"column":19,"offset":45226},"end":{"line":1229,"column":51,"offset":45258}}}],"position":{"start":{"line":1229,"column":5,"offset":45212},"end":{"line":1229,"column":51,"offset":45258}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Just ","position":{"start":{"line":1230,"column":9,"offset":45267},"end":{"line":1230,"column":14,"offset":45272}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.val"}],"position":{"start":{"line":1230,"column":14,"offset":45272},"end":{"line":1230,"column":24,"offset":45282}}},{"type":"text","value":" (the max sum of both paths are negative).","position":{"start":{"line":1230,"column":24,"offset":45282},"end":{"line":1230,"column":66,"offset":45324}}}],"position":{"start":{"line":1230,"column":5,"offset":45263},"end":{"line":1230,"column":66,"offset":45324}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1227,"column":5,"offset":45061},"end":{"line":1230,"column":66,"offset":45324}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1226,"column":1,"offset":45037},"end":{"line":1230,"column":66,"offset":45324}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Without","position":{"start":{"line":1231,"column":5,"offset":45329},"end":{"line":1231,"column":12,"offset":45336}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.val"}],"position":{"start":{"line":1231,"column":12,"offset":45336},"end":{"line":1231,"column":22,"offset":45346}}},{"type":"text","value":" (disconnected)","position":{"start":{"line":1231,"column":22,"offset":45346},"end":{"line":1231,"column":37,"offset":45361}}}],"position":{"start":{"line":1231,"column":5,"offset":45329},"end":{"line":1231,"column":37,"offset":45361}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The max-sum path is somewhere under the ","position":{"start":{"line":1232,"column":9,"offset":45370},"end":{"line":1232,"column":49,"offset":45410}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.left"}],"position":{"start":{"line":1232,"column":49,"offset":45410},"end":{"line":1232,"column":60,"offset":45421}}},{"type":"text","value":" subtree.","position":{"start":{"line":1232,"column":60,"offset":45421},"end":{"line":1232,"column":69,"offset":45430}}}],"position":{"start":{"line":1232,"column":5,"offset":45366},"end":{"line":1232,"column":69,"offset":45430}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The max-sum path is somewhere under the ","position":{"start":{"line":1233,"column":9,"offset":45439},"end":{"line":1233,"column":49,"offset":45479}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.right"}],"position":{"start":{"line":1233,"column":49,"offset":45479},"end":{"line":1233,"column":61,"offset":45491}}},{"type":"text","value":" subtree.","position":{"start":{"line":1233,"column":61,"offset":45491},"end":{"line":1233,"column":70,"offset":45500}}}],"position":{"start":{"line":1233,"column":5,"offset":45435},"end":{"line":1233,"column":70,"offset":45500}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1232,"column":5,"offset":45366},"end":{"line":1233,"column":70,"offset":45500}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1231,"column":1,"offset":45325},"end":{"line":1233,"column":70,"offset":45500}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1226,"column":1,"offset":45037},"end":{"line":1233,"column":70,"offset":45500}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are two ways to implement this.","position":{"start":{"line":1235,"column":1,"offset":45502},"end":{"line":1235,"column":38,"offset":45539}}}],"position":{"start":{"line":1235,"column":1,"offset":45502},"end":{"line":1235,"column":38,"offset":45539}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"ONE","position":{"start":{"line":1237,"column":6,"offset":45546},"end":{"line":1237,"column":9,"offset":45549}}}],"position":{"start":{"line":1237,"column":1,"offset":45541},"end":{"line":1237,"column":9,"offset":45549}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define a function that returns two values. The max sum of a path that may or may not end with ","position":{"start":{"line":1239,"column":1,"offset":45551},"end":{"line":1239,"column":95,"offset":45645}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"root"}],"position":{"start":{"line":1239,"column":95,"offset":45645},"end":{"line":1239,"column":101,"offset":45651}}},{"type":"text","value":" node, and the max sum of the path that ends with ","position":{"start":{"line":1239,"column":101,"offset":45651},"end":{"line":1239,"column":151,"offset":45701}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"root"}],"position":{"start":{"line":1239,"column":151,"offset":45701},"end":{"line":1239,"column":157,"offset":45707}}},{"type":"text","value":" node.","position":{"start":{"line":1239,"column":157,"offset":45707},"end":{"line":1239,"column":163,"offset":45713}}}],"position":{"start":{"line":1239,"column":1,"offset":45551},"end":{"line":1239,"column":163,"offset":45713}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nlet maxPathSum = function (root) {\n    return Math.max(..._maxPathSum(root));\n};\n\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nfunction _maxPathSum(root) {\n    if (!root) {\n        return [-Infinity, -Infinity];\n    }\n\n    const left = _maxPathSum(root.left);\n    const right = _maxPathSum(root.right);\n    return [Math.max(left[0], right[0], root.val + Math.max(0, left[1], right[1], left[1] + right[1])), Math.max(left[1], right[1], 0) + root.val];\n}\n"}],"position":{"start":{"line":1241,"column":1,"offset":45715},"end":{"line":1270,"column":4,"offset":46382}}}],"position":{"start":{"line":1241,"column":1,"offset":45715},"end":{"line":1270,"column":4,"offset":46382}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"TWO","position":{"start":{"line":1272,"column":6,"offset":46389},"end":{"line":1272,"column":9,"offset":46392}}}],"position":{"start":{"line":1272,"column":1,"offset":46384},"end":{"line":1272,"column":9,"offset":46392}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Just return the later (max sum of a path that ends with ","position":{"start":{"line":1274,"column":1,"offset":46394},"end":{"line":1274,"column":57,"offset":46450}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"root"}],"position":{"start":{"line":1274,"column":57,"offset":46450},"end":{"line":1274,"column":63,"offset":46456}}},{"type":"text","value":"). Maintain a global variable to store the disconnected max sum.","position":{"start":{"line":1274,"column":63,"offset":46456},"end":{"line":1274,"column":127,"offset":46520}}}],"position":{"start":{"line":1274,"column":1,"offset":46394},"end":{"line":1274,"column":127,"offset":46520}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nlet maxPathSum = function (root) {\n    const global = { max: -Infinity };\n    _maxPathSum(root, global);\n    return global.max;\n};\n\n/**\n * @param {TreeNode} root\n * @param {object} global\n * @param {number} global.max\n * @return {number[]}\n */\nfunction _maxPathSum(root, global) {\n    if (!root) {\n        return -Infinity;\n    }\n\n    const left = _maxPathSum(root.left, global);\n    const right = _maxPathSum(root.right, global);\n    const localMax = Math.max(left, right, 0) + root.val;\n    global.max = Math.max(global.max, localMax, root.val + left + right);\n    return localMax;\n}\n"}],"position":{"start":{"line":1276,"column":1,"offset":46522},"end":{"line":1311,"column":4,"offset":47311}}}],"position":{"start":{"line":1276,"column":1,"offset":46522},"end":{"line":1311,"column":4,"offset":47311}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1313,"column":1,"offset":47313},"end":{"line":1313,"column":4,"offset":47316}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Easy\nRelated Topics:\n\"Two Pointers\": ","position":{"start":{"line":1315,"column":1,"offset":47318},"end":{"line":1317,"column":17,"offset":47367}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/two-pointers"},"children":[{"type":"text","value":"https://leetcode.com/tag/two-pointers","position":{"start":{"line":1317,"column":17,"offset":47367},"end":{"line":1317,"column":54,"offset":47404}}}],"position":{"start":{"line":1317,"column":17,"offset":47367},"end":{"line":1317,"column":54,"offset":47404}}},{"type":"text","value":"\n\"String\": ","position":{"start":{"line":1317,"column":54,"offset":47404},"end":{"line":1318,"column":11,"offset":47415}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/string"},"children":[{"type":"text","value":"https://leetcode.com/tag/string","position":{"start":{"line":1318,"column":11,"offset":47415},"end":{"line":1318,"column":42,"offset":47446}}}],"position":{"start":{"line":1318,"column":11,"offset":47415},"end":{"line":1318,"column":42,"offset":47446}}},{"type":"text","value":"\nSimilar Questions:\n\"Palindrome Linked List\": ","position":{"start":{"line":1318,"column":42,"offset":47446},"end":{"line":1320,"column":27,"offset":47492}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/palindrome-linked-list"},"children":[{"type":"text","value":"https://leetcode.com/problems/palindrome-linked-list","position":{"start":{"line":1320,"column":27,"offset":47492},"end":{"line":1320,"column":79,"offset":47544}}}],"position":{"start":{"line":1320,"column":27,"offset":47492},"end":{"line":1320,"column":79,"offset":47544}}},{"type":"text","value":"\n\"Valid Palindrome II\": ","position":{"start":{"line":1320,"column":79,"offset":47544},"end":{"line":1321,"column":24,"offset":47568}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/valid-palindrome-ii"},"children":[{"type":"text","value":"https://leetcode.com/problems/valid-palindrome-ii","position":{"start":{"line":1321,"column":24,"offset":47568},"end":{"line":1321,"column":73,"offset":47617}}}],"position":{"start":{"line":1321,"column":24,"offset":47568},"end":{"line":1321,"column":73,"offset":47617}}}],"position":{"start":{"line":1315,"column":1,"offset":47318},"end":{"line":1321,"column":73,"offset":47617}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1323,"column":1,"offset":47619},"end":{"line":1323,"column":4,"offset":47622}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#125-valid-palindromehttpsleetcodecomproblemsvalid-palindromedescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1325,"column":2,"offset":47625},"end":{"line":1325,"column":142,"offset":47765}}}],"position":{"start":{"line":1325,"column":1,"offset":47624},"end":{"line":1325,"column":217,"offset":47840}}}],"position":{"start":{"line":1325,"column":1,"offset":47624},"end":{"line":1325,"column":217,"offset":47840}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1327,"column":4,"offset":47845},"end":{"line":1327,"column":6,"offset":47847}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/valid-palindrome/description/"},"children":[{"type":"text","value":"125. Valid Palindrome","position":{"start":{"line":1327,"column":7,"offset":47848},"end":{"line":1327,"column":28,"offset":47869}}}],"position":{"start":{"line":1327,"column":6,"offset":47847},"end":{"line":1327,"column":90,"offset":47931}}}],"position":{"start":{"line":1327,"column":1,"offset":47842},"end":{"line":1327,"column":90,"offset":47931}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1329,"column":5,"offset":47937},"end":{"line":1329,"column":13,"offset":47945}}}],"position":{"start":{"line":1329,"column":1,"offset":47933},"end":{"line":1329,"column":13,"offset":47945}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.","position":{"start":{"line":1331,"column":1,"offset":47947},"end":{"line":1331,"column":110,"offset":48056}}}],"position":{"start":{"line":1331,"column":1,"offset":47947},"end":{"line":1331,"column":110,"offset":48056}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":1333,"column":3,"offset":48060},"end":{"line":1333,"column":8,"offset":48065}}}],"position":{"start":{"line":1333,"column":1,"offset":48058},"end":{"line":1333,"column":10,"offset":48067}}},{"type":"text","value":" For the purpose of this problem, we define empty string as valid palindrome.","position":{"start":{"line":1333,"column":10,"offset":48067},"end":{"line":1333,"column":87,"offset":48144}}}],"position":{"start":{"line":1333,"column":1,"offset":48058},"end":{"line":1333,"column":87,"offset":48144}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":1335,"column":3,"offset":48148},"end":{"line":1335,"column":13,"offset":48158}}}],"position":{"start":{"line":1335,"column":1,"offset":48146},"end":{"line":1335,"column":15,"offset":48160}}}],"position":{"start":{"line":1335,"column":1,"offset":48146},"end":{"line":1335,"column":15,"offset":48160}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: \"A man, a plan, a canal: Panama\"\nOutput: true\n"}],"position":{"start":{"line":1337,"column":1,"offset":48162},"end":{"line":1341,"column":4,"offset":48223}}}],"position":{"start":{"line":1337,"column":1,"offset":48162},"end":{"line":1341,"column":4,"offset":48223}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":1343,"column":3,"offset":48227},"end":{"line":1343,"column":13,"offset":48237}}}],"position":{"start":{"line":1343,"column":1,"offset":48225},"end":{"line":1343,"column":15,"offset":48239}}}],"position":{"start":{"line":1343,"column":1,"offset":48225},"end":{"line":1343,"column":15,"offset":48239}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: \"race a car\"\nOutput: false\n"}],"position":{"start":{"line":1345,"column":1,"offset":48241},"end":{"line":1349,"column":4,"offset":48283}}}],"position":{"start":{"line":1345,"column":1,"offset":48241},"end":{"line":1349,"column":4,"offset":48283}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1351,"column":5,"offset":48289},"end":{"line":1351,"column":14,"offset":48298}}}],"position":{"start":{"line":1351,"column":1,"offset":48285},"end":{"line":1351,"column":14,"offset":48298}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"ONE","position":{"start":{"line":1353,"column":6,"offset":48305},"end":{"line":1353,"column":9,"offset":48308}}}],"position":{"start":{"line":1353,"column":1,"offset":48300},"end":{"line":1353,"column":9,"offset":48308}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {string} s\n * @return {boolean}\n */\nlet isPalindrome = function (s) {\n    const clean = s.toLowerCase().split(/[^a-z0-9]*/);\n    return clean.join('') === clean.reverse().join('');\n};\n"}],"position":{"start":{"line":1355,"column":1,"offset":48310},"end":{"line":1364,"column":4,"offset":48517}}}],"position":{"start":{"line":1355,"column":1,"offset":48310},"end":{"line":1364,"column":4,"offset":48517}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"TWO","position":{"start":{"line":1366,"column":6,"offset":48524},"end":{"line":1366,"column":9,"offset":48527}}}],"position":{"start":{"line":1366,"column":1,"offset":48519},"end":{"line":1366,"column":9,"offset":48527}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Remove non-alphanumeric characters then compare.","position":{"start":{"line":1368,"column":1,"offset":48529},"end":{"line":1368,"column":49,"offset":48577}}}],"position":{"start":{"line":1368,"column":1,"offset":48529},"end":{"line":1368,"column":49,"offset":48577}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {string} s\n * @return {boolean}\n */\nlet isPalindrome = function (s) {\n    const clean = s.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n    for (let i = 0, j = clean.length - 1; i < j; i++, j--) {\n        if (clean[i] !== clean[j]) {\n            return false;\n        }\n    }\n    return true;\n};\n"}],"position":{"start":{"line":1370,"column":1,"offset":48579},"end":{"line":1384,"column":4,"offset":48896}}}],"position":{"start":{"line":1370,"column":1,"offset":48579},"end":{"line":1384,"column":4,"offset":48896}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"THREE","position":{"start":{"line":1386,"column":6,"offset":48903},"end":{"line":1386,"column":11,"offset":48908}}}],"position":{"start":{"line":1386,"column":1,"offset":48898},"end":{"line":1386,"column":11,"offset":48908}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Compare the char codes.","position":{"start":{"line":1388,"column":1,"offset":48910},"end":{"line":1388,"column":24,"offset":48933}}}],"position":{"start":{"line":1388,"column":1,"offset":48910},"end":{"line":1388,"column":24,"offset":48933}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {string} s\n * @return {boolean}\n */\nlet isPalindrome = function (s) {\n    for (let i = 0, j = s.length - 1; i < j; i++, j--) {\n        let left = s.charCodeAt(i);\n        while (i < j && (left < 48 || (left > 57 && left < 65) || (left > 90 && left < 97) || left > 122)) {\n            left = s.charCodeAt(++i);\n        }\n        if (i >= j) {\n            return true;\n        }\n        if (left >= 65 && left <= 90) {\n            left += 32;\n        }\n\n        let right = s.charCodeAt(j);\n        while (i < j && (right < 48 || (right > 57 && right < 65) || (right > 90 && right < 97) || right > 122)) {\n            right = s.charCodeAt(--j);\n        }\n        if (i >= j) {\n            return true;\n        }\n        if (right >= 65 && right <= 90) {\n            right += 32;\n        }\n\n        if (left !== right) {\n            return false;\n        }\n    }\n\n    return true;\n};\n"}],"position":{"start":{"line":1390,"column":1,"offset":48935},"end":{"line":1426,"column":4,"offset":49839}}}],"position":{"start":{"line":1390,"column":1,"offset":48935},"end":{"line":1426,"column":4,"offset":49839}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1428,"column":1,"offset":49841},"end":{"line":1428,"column":4,"offset":49844}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Hard\nRelated Topics:\n\"Array\": ","position":{"start":{"line":1430,"column":1,"offset":49846},"end":{"line":1432,"column":10,"offset":49888}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":1432,"column":10,"offset":49888},"end":{"line":1432,"column":40,"offset":49918}}}],"position":{"start":{"line":1432,"column":10,"offset":49888},"end":{"line":1432,"column":40,"offset":49918}}},{"type":"text","value":"\n\"String\": ","position":{"start":{"line":1432,"column":40,"offset":49918},"end":{"line":1433,"column":11,"offset":49929}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/string"},"children":[{"type":"text","value":"https://leetcode.com/tag/string","position":{"start":{"line":1433,"column":11,"offset":49929},"end":{"line":1433,"column":42,"offset":49960}}}],"position":{"start":{"line":1433,"column":11,"offset":49929},"end":{"line":1433,"column":42,"offset":49960}}},{"type":"text","value":"\n\"Backtracking\": ","position":{"start":{"line":1433,"column":42,"offset":49960},"end":{"line":1434,"column":17,"offset":49977}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/backtracking"},"children":[{"type":"text","value":"https://leetcode.com/tag/backtracking","position":{"start":{"line":1434,"column":17,"offset":49977},"end":{"line":1434,"column":54,"offset":50014}}}],"position":{"start":{"line":1434,"column":17,"offset":49977},"end":{"line":1434,"column":54,"offset":50014}}},{"type":"text","value":"\n\"Breadth-first Search\": ","position":{"start":{"line":1434,"column":54,"offset":50014},"end":{"line":1435,"column":25,"offset":50039}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/breadth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/breadth-first-search","position":{"start":{"line":1435,"column":25,"offset":50039},"end":{"line":1435,"column":70,"offset":50084}}}],"position":{"start":{"line":1435,"column":25,"offset":50039},"end":{"line":1435,"column":70,"offset":50084}}},{"type":"text","value":"\nSimilar Questions:\n\"Word Ladder\": ","position":{"start":{"line":1435,"column":70,"offset":50084},"end":{"line":1437,"column":16,"offset":50119}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/word-ladder"},"children":[{"type":"text","value":"https://leetcode.com/problems/word-ladder","position":{"start":{"line":1437,"column":16,"offset":50119},"end":{"line":1437,"column":57,"offset":50160}}}],"position":{"start":{"line":1437,"column":16,"offset":50119},"end":{"line":1437,"column":57,"offset":50160}}}],"position":{"start":{"line":1430,"column":1,"offset":49846},"end":{"line":1437,"column":57,"offset":50160}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1439,"column":1,"offset":50162},"end":{"line":1439,"column":4,"offset":50165}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#126-word-ladder-iihttpsleetcodecomproblemsword-ladder-iidescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1441,"column":2,"offset":50168},"end":{"line":1441,"column":142,"offset":50308}}}],"position":{"start":{"line":1441,"column":1,"offset":50167},"end":{"line":1441,"column":213,"offset":50379}}}],"position":{"start":{"line":1441,"column":1,"offset":50167},"end":{"line":1441,"column":213,"offset":50379}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1443,"column":4,"offset":50384},"end":{"line":1443,"column":6,"offset":50386}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/word-ladder-ii/description/"},"children":[{"type":"text","value":"126. Word Ladder II","position":{"start":{"line":1443,"column":7,"offset":50387},"end":{"line":1443,"column":26,"offset":50406}}}],"position":{"start":{"line":1443,"column":6,"offset":50386},"end":{"line":1443,"column":86,"offset":50466}}}],"position":{"start":{"line":1443,"column":1,"offset":50381},"end":{"line":1443,"column":86,"offset":50466}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1445,"column":5,"offset":50472},"end":{"line":1445,"column":13,"offset":50480}}}],"position":{"start":{"line":1445,"column":1,"offset":50468},"end":{"line":1445,"column":13,"offset":50480}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given two words (","position":{"start":{"line":1447,"column":1,"offset":50482},"end":{"line":1447,"column":18,"offset":50499}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1447,"column":19,"offset":50500},"end":{"line":1447,"column":28,"offset":50509}}}],"position":{"start":{"line":1447,"column":18,"offset":50499},"end":{"line":1447,"column":29,"offset":50510}}},{"type":"text","value":" and ","position":{"start":{"line":1447,"column":29,"offset":50510},"end":{"line":1447,"column":34,"offset":50515}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"endWord","position":{"start":{"line":1447,"column":35,"offset":50516},"end":{"line":1447,"column":42,"offset":50523}}}],"position":{"start":{"line":1447,"column":34,"offset":50515},"end":{"line":1447,"column":43,"offset":50524}}},{"type":"text","value":"), and a dictionary's word list, find all shortest transformation sequence(s) from ","position":{"start":{"line":1447,"column":43,"offset":50524},"end":{"line":1447,"column":126,"offset":50607}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1447,"column":127,"offset":50608},"end":{"line":1447,"column":136,"offset":50617}}}],"position":{"start":{"line":1447,"column":126,"offset":50607},"end":{"line":1447,"column":137,"offset":50618}}},{"type":"text","value":" to ","position":{"start":{"line":1447,"column":137,"offset":50618},"end":{"line":1447,"column":141,"offset":50622}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"endWord","position":{"start":{"line":1447,"column":142,"offset":50623},"end":{"line":1447,"column":149,"offset":50630}}}],"position":{"start":{"line":1447,"column":141,"offset":50622},"end":{"line":1447,"column":150,"offset":50631}}},{"type":"text","value":", such that:","position":{"start":{"line":1447,"column":150,"offset":50631},"end":{"line":1447,"column":162,"offset":50643}}}],"position":{"start":{"line":1447,"column":1,"offset":50482},"end":{"line":1447,"column":162,"offset":50643}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Only one letter can be changed at a time","position":{"start":{"line":1449,"column":5,"offset":50649},"end":{"line":1449,"column":45,"offset":50689}}}],"position":{"start":{"line":1449,"column":1,"offset":50645},"end":{"line":1449,"column":45,"offset":50689}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Each transformed word must exist in the word list. Note that ","position":{"start":{"line":1450,"column":5,"offset":50694},"end":{"line":1450,"column":66,"offset":50755}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1450,"column":67,"offset":50756},"end":{"line":1450,"column":76,"offset":50765}}}],"position":{"start":{"line":1450,"column":66,"offset":50755},"end":{"line":1450,"column":77,"offset":50766}}},{"type":"text","value":" is ","position":{"start":{"line":1450,"column":77,"offset":50766},"end":{"line":1450,"column":81,"offset":50770}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"not","position":{"start":{"line":1450,"column":82,"offset":50771},"end":{"line":1450,"column":85,"offset":50774}}}],"position":{"start":{"line":1450,"column":81,"offset":50770},"end":{"line":1450,"column":86,"offset":50775}}},{"type":"text","value":" a transformed word.","position":{"start":{"line":1450,"column":86,"offset":50775},"end":{"line":1450,"column":106,"offset":50795}}}],"position":{"start":{"line":1450,"column":1,"offset":50690},"end":{"line":1450,"column":106,"offset":50795}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1449,"column":1,"offset":50645},"end":{"line":1450,"column":106,"offset":50795}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":1452,"column":3,"offset":50799},"end":{"line":1452,"column":8,"offset":50804}}}],"position":{"start":{"line":1452,"column":1,"offset":50797},"end":{"line":1452,"column":10,"offset":50806}}}],"position":{"start":{"line":1452,"column":1,"offset":50797},"end":{"line":1452,"column":10,"offset":50806}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Return an empty list if there is no such transformation sequence.","position":{"start":{"line":1454,"column":5,"offset":50812},"end":{"line":1454,"column":70,"offset":50877}}}],"position":{"start":{"line":1454,"column":1,"offset":50808},"end":{"line":1454,"column":70,"offset":50877}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"All words have the same length.","position":{"start":{"line":1455,"column":5,"offset":50882},"end":{"line":1455,"column":36,"offset":50913}}}],"position":{"start":{"line":1455,"column":1,"offset":50878},"end":{"line":1455,"column":36,"offset":50913}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"All words contain only lowercase alphabetic characters.","position":{"start":{"line":1456,"column":5,"offset":50918},"end":{"line":1456,"column":60,"offset":50973}}}],"position":{"start":{"line":1456,"column":1,"offset":50914},"end":{"line":1456,"column":60,"offset":50973}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You may assume no duplicates in the word list.","position":{"start":{"line":1457,"column":5,"offset":50978},"end":{"line":1457,"column":51,"offset":51024}}}],"position":{"start":{"line":1457,"column":1,"offset":50974},"end":{"line":1457,"column":51,"offset":51024}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You may assume ","position":{"start":{"line":1458,"column":5,"offset":51029},"end":{"line":1458,"column":20,"offset":51044}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1458,"column":21,"offset":51045},"end":{"line":1458,"column":30,"offset":51054}}}],"position":{"start":{"line":1458,"column":20,"offset":51044},"end":{"line":1458,"column":31,"offset":51055}}},{"type":"text","value":" and ","position":{"start":{"line":1458,"column":31,"offset":51055},"end":{"line":1458,"column":36,"offset":51060}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"endWord","position":{"start":{"line":1458,"column":37,"offset":51061},"end":{"line":1458,"column":44,"offset":51068}}}],"position":{"start":{"line":1458,"column":36,"offset":51060},"end":{"line":1458,"column":45,"offset":51069}}},{"type":"text","value":" are non-empty and are not the same.","position":{"start":{"line":1458,"column":45,"offset":51069},"end":{"line":1458,"column":81,"offset":51105}}}],"position":{"start":{"line":1458,"column":1,"offset":51025},"end":{"line":1458,"column":81,"offset":51105}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1454,"column":1,"offset":50808},"end":{"line":1458,"column":81,"offset":51105}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":1460,"column":3,"offset":51109},"end":{"line":1460,"column":13,"offset":51119}}}],"position":{"start":{"line":1460,"column":1,"offset":51107},"end":{"line":1460,"column":15,"offset":51121}}}],"position":{"start":{"line":1460,"column":1,"offset":51107},"end":{"line":1460,"column":15,"offset":51121}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input:\nbeginWord = \"hit\",\nendWord = \"cog\",\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\nOutput:\n[\n  [\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],\n  [\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]\n]\n"}],"position":{"start":{"line":1462,"column":1,"offset":51123},"end":{"line":1474,"column":4,"offset":51305}}}],"position":{"start":{"line":1462,"column":1,"offset":51123},"end":{"line":1474,"column":4,"offset":51305}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":1476,"column":3,"offset":51309},"end":{"line":1476,"column":13,"offset":51319}}}],"position":{"start":{"line":1476,"column":1,"offset":51307},"end":{"line":1476,"column":15,"offset":51321}}}],"position":{"start":{"line":1476,"column":1,"offset":51307},"end":{"line":1476,"column":15,"offset":51321}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input:\nbeginWord = \"hit\"\nendWord = \"cog\"\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n\nOutput: []\n\nExplanation: The endWord \"cog\" is not in wordList, therefore no possible transformation.\n"}],"position":{"start":{"line":1478,"column":1,"offset":51323},"end":{"line":1488,"column":4,"offset":51517}}}],"position":{"start":{"line":1478,"column":1,"offset":51323},"end":{"line":1488,"column":4,"offset":51517}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1490,"column":5,"offset":51523},"end":{"line":1490,"column":14,"offset":51532}}}],"position":{"start":{"line":1490,"column":1,"offset":51519},"end":{"line":1490,"column":14,"offset":51532}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is just like ","position":{"start":{"line":1492,"column":1,"offset":51534},"end":{"line":1492,"column":19,"offset":51552}}},{"type":"element","tagName":"a","properties":{"href":"./127.%20Word%20Ladder"},"children":[{"type":"text","value":"127. Word Ladder","position":{"start":{"line":1492,"column":20,"offset":51553},"end":{"line":1492,"column":36,"offset":51569}}}],"position":{"start":{"line":1492,"column":19,"offset":51552},"end":{"line":1492,"column":61,"offset":51594}}},{"type":"text","value":".","position":{"start":{"line":1492,"column":61,"offset":51594},"end":{"line":1492,"column":62,"offset":51595}}}],"position":{"start":{"line":1492,"column":1,"offset":51534},"end":{"line":1492,"column":62,"offset":51595}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The constrain still works, but instead of deleting the words right away, collect them and delete them all when a level ends, so that we can reuse the words (matching different parents in the same level).","position":{"start":{"line":1494,"column":1,"offset":51597},"end":{"line":1494,"column":204,"offset":51800}}}],"position":{"start":{"line":1494,"column":1,"offset":51597},"end":{"line":1494,"column":204,"offset":51800}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The items in the queue are not just words now. Parent nodes are also kept so that we can backtrack the path from the end.","position":{"start":{"line":1496,"column":1,"offset":51802},"end":{"line":1496,"column":122,"offset":51923}}}],"position":{"start":{"line":1496,"column":1,"offset":51802},"end":{"line":1496,"column":122,"offset":51923}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {string} beginWord\n * @param {string} endWord\n * @param {string[]} wordList\n * @return {string[][]}\n */\nfunction findLadders(beginWord, endWord, wordList) {\n    wordList = new Set(wordList);\n    if (!wordList.has(endWord)) {\n        return [];\n    }\n\n    const ALPHABET = 'abcdefghijklmnopqrstuvwxyz';\n\n    const result = [];\n    let isEndWordFound = false;\n    const levelWords = new Set();\n    const queue = [[beginWord, null], null];\n    while (queue.length > 1) {\n        const node = queue.shift();\n\n        if (node === null) {\n            if (isEndWordFound) {\n                break;\n            }\n            levelWords.forEach((word) => wordList.delete(word));\n            levelWords.clear();\n            queue.push(null);\n            continue;\n        }\n\n        const word = node[0];\n\n        for (let i = word.length - 1; i >= 0; i--) {\n            const head = word.slice(0, i);\n            const tail = word.slice(i + 1);\n\n            for (let c = 0; c < 26; c++) {\n                if (ALPHABET[c] !== word[i]) {\n                    const w = head + ALPHABET[c] + tail;\n                    if (w === endWord) {\n                        const path = [endWord];\n                        for (let n = node; n !== null; n = n[1]) {\n                            path.unshift(n[0]);\n                        }\n                        result.push(path);\n                        isEndWordFound = true;\n                    }\n                    if (wordList.has(w)) {\n                        levelWords.add(w);\n                        queue.push([w, node]);\n                    }\n                }\n            }\n        }\n    }\n\n    return result;\n}\n"}],"position":{"start":{"line":1498,"column":1,"offset":51925},"end":{"line":1558,"column":4,"offset":53599}}}],"position":{"start":{"line":1498,"column":1,"offset":51925},"end":{"line":1558,"column":4,"offset":53599}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1560,"column":1,"offset":53601},"end":{"line":1560,"column":4,"offset":53604}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Medium\nRelated Topics:\n\"Breadth-first Search\": ","position":{"start":{"line":1562,"column":1,"offset":53606},"end":{"line":1564,"column":25,"offset":53665}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/breadth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/breadth-first-search","position":{"start":{"line":1564,"column":25,"offset":53665},"end":{"line":1564,"column":70,"offset":53710}}}],"position":{"start":{"line":1564,"column":25,"offset":53665},"end":{"line":1564,"column":70,"offset":53710}}},{"type":"text","value":"\nSimilar Questions:\n\"Word Ladder II\": ","position":{"start":{"line":1564,"column":70,"offset":53710},"end":{"line":1566,"column":19,"offset":53748}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/word-ladder-ii"},"children":[{"type":"text","value":"https://leetcode.com/problems/word-ladder-ii","position":{"start":{"line":1566,"column":19,"offset":53748},"end":{"line":1566,"column":63,"offset":53792}}}],"position":{"start":{"line":1566,"column":19,"offset":53748},"end":{"line":1566,"column":63,"offset":53792}}},{"type":"text","value":"\n\"Minimum Genetic Mutation\": ","position":{"start":{"line":1566,"column":63,"offset":53792},"end":{"line":1567,"column":29,"offset":53821}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/minimum-genetic-mutation"},"children":[{"type":"text","value":"https://leetcode.com/problems/minimum-genetic-mutation","position":{"start":{"line":1567,"column":29,"offset":53821},"end":{"line":1567,"column":83,"offset":53875}}}],"position":{"start":{"line":1567,"column":29,"offset":53821},"end":{"line":1567,"column":83,"offset":53875}}}],"position":{"start":{"line":1562,"column":1,"offset":53606},"end":{"line":1567,"column":83,"offset":53875}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1569,"column":1,"offset":53877},"end":{"line":1569,"column":4,"offset":53880}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#127-word-ladderhttpsleetcodecomproblemsword-ladderdescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1571,"column":2,"offset":53883},"end":{"line":1571,"column":142,"offset":54023}}}],"position":{"start":{"line":1571,"column":1,"offset":53882},"end":{"line":1571,"column":207,"offset":54088}}}],"position":{"start":{"line":1571,"column":1,"offset":53882},"end":{"line":1571,"column":207,"offset":54088}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1573,"column":4,"offset":54093},"end":{"line":1573,"column":6,"offset":54095}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/word-ladder/description/"},"children":[{"type":"text","value":"127. Word Ladder","position":{"start":{"line":1573,"column":7,"offset":54096},"end":{"line":1573,"column":23,"offset":54112}}}],"position":{"start":{"line":1573,"column":6,"offset":54095},"end":{"line":1573,"column":80,"offset":54169}}}],"position":{"start":{"line":1573,"column":1,"offset":54090},"end":{"line":1573,"column":80,"offset":54169}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1575,"column":5,"offset":54175},"end":{"line":1575,"column":13,"offset":54183}}}],"position":{"start":{"line":1575,"column":1,"offset":54171},"end":{"line":1575,"column":13,"offset":54183}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given two words (","position":{"start":{"line":1577,"column":1,"offset":54185},"end":{"line":1577,"column":18,"offset":54202}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1577,"column":19,"offset":54203},"end":{"line":1577,"column":28,"offset":54212}}}],"position":{"start":{"line":1577,"column":18,"offset":54202},"end":{"line":1577,"column":29,"offset":54213}}},{"type":"text","value":" and ","position":{"start":{"line":1577,"column":29,"offset":54213},"end":{"line":1577,"column":34,"offset":54218}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"endWord","position":{"start":{"line":1577,"column":35,"offset":54219},"end":{"line":1577,"column":42,"offset":54226}}}],"position":{"start":{"line":1577,"column":34,"offset":54218},"end":{"line":1577,"column":43,"offset":54227}}},{"type":"text","value":"), and a dictionary's word list, find the length of shortest transformation sequence from ","position":{"start":{"line":1577,"column":43,"offset":54227},"end":{"line":1577,"column":133,"offset":54317}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1577,"column":134,"offset":54318},"end":{"line":1577,"column":143,"offset":54327}}}],"position":{"start":{"line":1577,"column":133,"offset":54317},"end":{"line":1577,"column":144,"offset":54328}}},{"type":"text","value":" to ","position":{"start":{"line":1577,"column":144,"offset":54328},"end":{"line":1577,"column":148,"offset":54332}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"endWord","position":{"start":{"line":1577,"column":149,"offset":54333},"end":{"line":1577,"column":156,"offset":54340}}}],"position":{"start":{"line":1577,"column":148,"offset":54332},"end":{"line":1577,"column":157,"offset":54341}}},{"type":"text","value":", such that:","position":{"start":{"line":1577,"column":157,"offset":54341},"end":{"line":1577,"column":169,"offset":54353}}}],"position":{"start":{"line":1577,"column":1,"offset":54185},"end":{"line":1577,"column":169,"offset":54353}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Only one letter can be changed at a time.","position":{"start":{"line":1579,"column":5,"offset":54359},"end":{"line":1579,"column":46,"offset":54400}}}],"position":{"start":{"line":1579,"column":1,"offset":54355},"end":{"line":1579,"column":46,"offset":54400}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Each transformed word must exist in the word list. Note that ","position":{"start":{"line":1580,"column":5,"offset":54405},"end":{"line":1580,"column":66,"offset":54466}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1580,"column":67,"offset":54467},"end":{"line":1580,"column":76,"offset":54476}}}],"position":{"start":{"line":1580,"column":66,"offset":54466},"end":{"line":1580,"column":77,"offset":54477}}},{"type":"text","value":" is ","position":{"start":{"line":1580,"column":77,"offset":54477},"end":{"line":1580,"column":81,"offset":54481}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"not","position":{"start":{"line":1580,"column":82,"offset":54482},"end":{"line":1580,"column":85,"offset":54485}}}],"position":{"start":{"line":1580,"column":81,"offset":54481},"end":{"line":1580,"column":86,"offset":54486}}},{"type":"text","value":" a transformed word.","position":{"start":{"line":1580,"column":86,"offset":54486},"end":{"line":1580,"column":106,"offset":54506}}}],"position":{"start":{"line":1580,"column":1,"offset":54401},"end":{"line":1580,"column":106,"offset":54506}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1579,"column":1,"offset":54355},"end":{"line":1580,"column":106,"offset":54506}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":1582,"column":3,"offset":54510},"end":{"line":1582,"column":8,"offset":54515}}}],"position":{"start":{"line":1582,"column":1,"offset":54508},"end":{"line":1582,"column":10,"offset":54517}}}],"position":{"start":{"line":1582,"column":1,"offset":54508},"end":{"line":1582,"column":10,"offset":54517}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Return 0 if there is no such transformation sequence.","position":{"start":{"line":1584,"column":5,"offset":54523},"end":{"line":1584,"column":58,"offset":54576}}}],"position":{"start":{"line":1584,"column":1,"offset":54519},"end":{"line":1584,"column":58,"offset":54576}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"All words have the same length.","position":{"start":{"line":1585,"column":5,"offset":54581},"end":{"line":1585,"column":36,"offset":54612}}}],"position":{"start":{"line":1585,"column":1,"offset":54577},"end":{"line":1585,"column":36,"offset":54612}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"All words contain only lowercase alphabetic characters.","position":{"start":{"line":1586,"column":5,"offset":54617},"end":{"line":1586,"column":60,"offset":54672}}}],"position":{"start":{"line":1586,"column":1,"offset":54613},"end":{"line":1586,"column":60,"offset":54672}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You may assume no duplicates in the word list.","position":{"start":{"line":1587,"column":5,"offset":54677},"end":{"line":1587,"column":51,"offset":54723}}}],"position":{"start":{"line":1587,"column":1,"offset":54673},"end":{"line":1587,"column":51,"offset":54723}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You may assume ","position":{"start":{"line":1588,"column":5,"offset":54728},"end":{"line":1588,"column":20,"offset":54743}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1588,"column":21,"offset":54744},"end":{"line":1588,"column":30,"offset":54753}}}],"position":{"start":{"line":1588,"column":20,"offset":54743},"end":{"line":1588,"column":31,"offset":54754}}},{"type":"text","value":" and ","position":{"start":{"line":1588,"column":31,"offset":54754},"end":{"line":1588,"column":36,"offset":54759}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"endWord","position":{"start":{"line":1588,"column":37,"offset":54760},"end":{"line":1588,"column":44,"offset":54767}}}],"position":{"start":{"line":1588,"column":36,"offset":54759},"end":{"line":1588,"column":45,"offset":54768}}},{"type":"text","value":" are non-empty and are not the same.","position":{"start":{"line":1588,"column":45,"offset":54768},"end":{"line":1588,"column":81,"offset":54804}}}],"position":{"start":{"line":1588,"column":1,"offset":54724},"end":{"line":1588,"column":81,"offset":54804}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1584,"column":1,"offset":54519},"end":{"line":1588,"column":81,"offset":54804}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":1590,"column":3,"offset":54808},"end":{"line":1590,"column":13,"offset":54818}}}],"position":{"start":{"line":1590,"column":1,"offset":54806},"end":{"line":1590,"column":15,"offset":54820}}}],"position":{"start":{"line":1590,"column":1,"offset":54806},"end":{"line":1590,"column":15,"offset":54820}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input:\nbeginWord = \"hit\",\nendWord = \"cog\",\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\nOutput: 5\n\nExplanation: As one shortest transformation is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\",\nreturn its length 5.\n"}],"position":{"start":{"line":1592,"column":1,"offset":54822},"end":{"line":1603,"column":4,"offset":55045}}}],"position":{"start":{"line":1592,"column":1,"offset":54822},"end":{"line":1603,"column":4,"offset":55045}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":1605,"column":3,"offset":55049},"end":{"line":1605,"column":13,"offset":55059}}}],"position":{"start":{"line":1605,"column":1,"offset":55047},"end":{"line":1605,"column":15,"offset":55061}}}],"position":{"start":{"line":1605,"column":1,"offset":55047},"end":{"line":1605,"column":15,"offset":55061}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input:\nbeginWord = \"hit\"\nendWord = \"cog\"\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n\nOutput: 0\n\nExplanation: The endWord \"cog\" is not in wordList, therefore no possible transformation.\n"}],"position":{"start":{"line":1607,"column":1,"offset":55063},"end":{"line":1617,"column":4,"offset":55256}}}],"position":{"start":{"line":1607,"column":1,"offset":55063},"end":{"line":1617,"column":4,"offset":55256}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1619,"column":5,"offset":55262},"end":{"line":1619,"column":14,"offset":55271}}}],"position":{"start":{"line":1619,"column":1,"offset":55258},"end":{"line":1619,"column":14,"offset":55271}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Think of it as building a tree, with ","position":{"start":{"line":1621,"column":1,"offset":55273},"end":{"line":1621,"column":38,"offset":55310}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"begineWord"}],"position":{"start":{"line":1621,"column":38,"offset":55310},"end":{"line":1621,"column":50,"offset":55322}}},{"type":"text","value":" as root and ","position":{"start":{"line":1621,"column":50,"offset":55322},"end":{"line":1621,"column":63,"offset":55335}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"endWord"}],"position":{"start":{"line":1621,"column":63,"offset":55335},"end":{"line":1621,"column":72,"offset":55344}}},{"type":"text","value":" as leaves.","position":{"start":{"line":1621,"column":72,"offset":55344},"end":{"line":1621,"column":83,"offset":55355}}}],"position":{"start":{"line":1621,"column":1,"offset":55273},"end":{"line":1621,"column":83,"offset":55355}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The best way control the depth (length of the shortest transformations) while building the tree is level-order traversal (BFS).","position":{"start":{"line":1623,"column":1,"offset":55357},"end":{"line":1623,"column":128,"offset":55484}}}],"position":{"start":{"line":1623,"column":1,"offset":55357},"end":{"line":1623,"column":128,"offset":55484}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We do not actually build the tree because it is expensive (astronomical if the list is huge). In fact, we only need one shortest path. So just like Dijkstra's algorithm, we say that the first time (level ","position":{"start":{"line":1625,"column":1,"offset":55486},"end":{"line":1625,"column":205,"offset":55690}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"i"}],"position":{"start":{"line":1625,"column":205,"offset":55690},"end":{"line":1625,"column":208,"offset":55693}}},{"type":"text","value":") we encounter a word that turns out to be in a shortest path, then level ","position":{"start":{"line":1625,"column":208,"offset":55693},"end":{"line":1625,"column":282,"offset":55767}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"i"}],"position":{"start":{"line":1625,"column":282,"offset":55767},"end":{"line":1625,"column":285,"offset":55770}}},{"type":"text","value":" is the lowest level this word could ever get. We can safely remove it from the ","position":{"start":{"line":1625,"column":285,"offset":55770},"end":{"line":1625,"column":365,"offset":55850}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"wordList"}],"position":{"start":{"line":1625,"column":365,"offset":55850},"end":{"line":1625,"column":375,"offset":55860}}},{"type":"text","value":".","position":{"start":{"line":1625,"column":375,"offset":55860},"end":{"line":1625,"column":376,"offset":55861}}}],"position":{"start":{"line":1625,"column":1,"offset":55486},"end":{"line":1625,"column":376,"offset":55861}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To find all the next words, instead of filtering the ","position":{"start":{"line":1627,"column":1,"offset":55863},"end":{"line":1627,"column":54,"offset":55916}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"wordList"}],"position":{"start":{"line":1627,"column":54,"offset":55916},"end":{"line":1627,"column":64,"offset":55926}}},{"type":"text","value":", enumerate all 25 possible words and check if in ","position":{"start":{"line":1627,"column":64,"offset":55926},"end":{"line":1627,"column":114,"offset":55976}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"wordList"}],"position":{"start":{"line":1627,"column":114,"offset":55976},"end":{"line":1627,"column":124,"offset":55986}}},{"type":"text","value":".","position":{"start":{"line":1627,"column":124,"offset":55986},"end":{"line":1627,"column":125,"offset":55987}}}],"position":{"start":{"line":1627,"column":1,"offset":55863},"end":{"line":1627,"column":125,"offset":55987}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {string} beginWord\n * @param {string} endWord\n * @param {string[]} wordList\n * @return {number}\n */\nlet ladderLength = function (beginWord, endWord, wordList) {\n    wordList = new Set(wordList);\n    if (!wordList.has(endWord)) {\n        return 0;\n    }\n\n    const ALPHABET = 'abcdefghijklmnopqrstuvwxyz';\n\n    let level = 1;\n    const queue = [beginWord, null];\n    while (queue.length > 1) {\n        const word = queue.shift();\n\n        if (word === null) {\n            level++;\n            queue.push(null);\n            continue;\n        }\n\n        for (let i = word.length - 1; i >= 0; i--) {\n            const head = word.slice(0, i);\n            const tail = word.slice(i + 1);\n\n            for (let c = 0; c < 26; c++) {\n                if (ALPHABET[c] !== word[i]) {\n                    const word = head + ALPHABET[c] + tail;\n                    if (word === endWord) {\n                        return level + 1;\n                    }\n                    if (wordList.delete(word)) {\n                        queue.push(word);\n                    }\n                }\n            }\n        }\n    }\n\n    return 0;\n};\n"}],"position":{"start":{"line":1629,"column":1,"offset":55989},"end":{"line":1675,"column":4,"offset":57133}}}],"position":{"start":{"line":1629,"column":1,"offset":55989},"end":{"line":1675,"column":4,"offset":57133}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1677,"column":1,"offset":57135},"end":{"line":1677,"column":4,"offset":57138}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Hard\nRelated Topics:\n\"Array\": ","position":{"start":{"line":1679,"column":1,"offset":57140},"end":{"line":1681,"column":10,"offset":57182}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":1681,"column":10,"offset":57182},"end":{"line":1681,"column":40,"offset":57212}}}],"position":{"start":{"line":1681,"column":10,"offset":57182},"end":{"line":1681,"column":40,"offset":57212}}},{"type":"text","value":"\n\"Union Find\": ","position":{"start":{"line":1681,"column":40,"offset":57212},"end":{"line":1682,"column":15,"offset":57227}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/union-find"},"children":[{"type":"text","value":"https://leetcode.com/tag/union-find","position":{"start":{"line":1682,"column":15,"offset":57227},"end":{"line":1682,"column":50,"offset":57262}}}],"position":{"start":{"line":1682,"column":15,"offset":57227},"end":{"line":1682,"column":50,"offset":57262}}},{"type":"text","value":"\nSimilar Questions:\n\"Binary Tree Longest Consecutive Sequence\": ","position":{"start":{"line":1682,"column":50,"offset":57262},"end":{"line":1684,"column":45,"offset":57326}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/binary-tree-longest-consecutive-sequence"},"children":[{"type":"text","value":"https://leetcode.com/problems/binary-tree-longest-consecutive-sequence","position":{"start":{"line":1684,"column":45,"offset":57326},"end":{"line":1684,"column":115,"offset":57396}}}],"position":{"start":{"line":1684,"column":45,"offset":57326},"end":{"line":1684,"column":115,"offset":57396}}}],"position":{"start":{"line":1679,"column":1,"offset":57140},"end":{"line":1684,"column":115,"offset":57396}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1686,"column":1,"offset":57398},"end":{"line":1686,"column":4,"offset":57401}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#128-longest-consecutive-sequencehttpsleetcodecomproblemslongest-consecutive-sequencedescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1688,"column":2,"offset":57404},"end":{"line":1688,"column":142,"offset":57544}}}],"position":{"start":{"line":1688,"column":1,"offset":57403},"end":{"line":1688,"column":241,"offset":57643}}}],"position":{"start":{"line":1688,"column":1,"offset":57403},"end":{"line":1688,"column":241,"offset":57643}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1690,"column":4,"offset":57648},"end":{"line":1690,"column":6,"offset":57650}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/longest-consecutive-sequence/description/"},"children":[{"type":"text","value":"128. Longest Consecutive Sequence","position":{"start":{"line":1690,"column":7,"offset":57651},"end":{"line":1690,"column":40,"offset":57684}}}],"position":{"start":{"line":1690,"column":6,"offset":57650},"end":{"line":1690,"column":114,"offset":57758}}}],"position":{"start":{"line":1690,"column":1,"offset":57645},"end":{"line":1690,"column":114,"offset":57758}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1692,"column":5,"offset":57764},"end":{"line":1692,"column":13,"offset":57772}}}],"position":{"start":{"line":1692,"column":1,"offset":57760},"end":{"line":1692,"column":13,"offset":57772}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given an unsorted array of integers, find the length of the longest consecutive elements sequence.","position":{"start":{"line":1694,"column":1,"offset":57774},"end":{"line":1694,"column":99,"offset":57872}}}],"position":{"start":{"line":1694,"column":1,"offset":57774},"end":{"line":1694,"column":99,"offset":57872}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Your algorithm should run in O(","position":{"start":{"line":1696,"column":1,"offset":57874},"end":{"line":1696,"column":32,"offset":57905}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"n","position":{"start":{"line":1696,"column":33,"offset":57906},"end":{"line":1696,"column":34,"offset":57907}}}],"position":{"start":{"line":1696,"column":32,"offset":57905},"end":{"line":1696,"column":35,"offset":57908}}},{"type":"text","value":") complexity.","position":{"start":{"line":1696,"column":35,"offset":57908},"end":{"line":1696,"column":48,"offset":57921}}}],"position":{"start":{"line":1696,"column":1,"offset":57874},"end":{"line":1696,"column":48,"offset":57921}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":1698,"column":3,"offset":57925},"end":{"line":1698,"column":11,"offset":57933}}}],"position":{"start":{"line":1698,"column":1,"offset":57923},"end":{"line":1698,"column":13,"offset":57935}}}],"position":{"start":{"line":1698,"column":1,"offset":57923},"end":{"line":1698,"column":13,"offset":57935}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [100, 4, 200, 1, 3, 2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n"}],"position":{"start":{"line":1700,"column":1,"offset":57937},"end":{"line":1705,"column":4,"offset":58084}}}],"position":{"start":{"line":1700,"column":1,"offset":57937},"end":{"line":1705,"column":4,"offset":58084}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1707,"column":5,"offset":58090},"end":{"line":1707,"column":14,"offset":58099}}}],"position":{"start":{"line":1707,"column":1,"offset":58086},"end":{"line":1707,"column":14,"offset":58099}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Build a Set from the list. Pick a number, find all it's adjacent numbers that are also in the Set. Count them and remove them all from the Set. Repeat until the Set is empty. Time complexity O(n + n) = O(n).","position":{"start":{"line":1709,"column":1,"offset":58101},"end":{"line":1709,"column":208,"offset":58308}}}],"position":{"start":{"line":1709,"column":1,"offset":58101},"end":{"line":1709,"column":208,"offset":58308}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number[]} nums\n * @return {number}\n */\nlet longestConsecutive = function (nums) {\n    const numSet = new Set(nums);\n    let maxCount = 0;\n    while (numSet.size > 0) {\n        const num = numSet.values().next().value;\n        numSet.delete(num);\n        let count = 1;\n        for (let n = num + 1; numSet.delete(n); n++) {\n            count++;\n        }\n        for (let n = num - 1; numSet.delete(n); n--) {\n            count++;\n        }\n        if (count > maxCount) {\n            maxCount = count;\n        }\n    }\n    return maxCount;\n};\n"}],"position":{"start":{"line":1711,"column":1,"offset":58310},"end":{"line":1735,"column":4,"offset":58877}}}],"position":{"start":{"line":1711,"column":1,"offset":58310},"end":{"line":1735,"column":4,"offset":58877}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1737,"column":1,"offset":58879},"end":{"line":1737,"column":4,"offset":58882}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Medium\nRelated Topics:\n\"Tree\": ","position":{"start":{"line":1739,"column":1,"offset":58884},"end":{"line":1741,"column":9,"offset":58927}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/tree"},"children":[{"type":"text","value":"https://leetcode.com/tag/tree","position":{"start":{"line":1741,"column":9,"offset":58927},"end":{"line":1741,"column":38,"offset":58956}}}],"position":{"start":{"line":1741,"column":9,"offset":58927},"end":{"line":1741,"column":38,"offset":58956}}},{"type":"text","value":"\n\"Depth-first Search\": ","position":{"start":{"line":1741,"column":38,"offset":58956},"end":{"line":1742,"column":23,"offset":58979}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/depth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/depth-first-search","position":{"start":{"line":1742,"column":23,"offset":58979},"end":{"line":1742,"column":66,"offset":59022}}}],"position":{"start":{"line":1742,"column":23,"offset":58979},"end":{"line":1742,"column":66,"offset":59022}}},{"type":"text","value":"\nSimilar Questions:\n\"Path Sum\": ","position":{"start":{"line":1742,"column":66,"offset":59022},"end":{"line":1744,"column":13,"offset":59054}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/path-sum"},"children":[{"type":"text","value":"https://leetcode.com/problems/path-sum","position":{"start":{"line":1744,"column":13,"offset":59054},"end":{"line":1744,"column":51,"offset":59092}}}],"position":{"start":{"line":1744,"column":13,"offset":59054},"end":{"line":1744,"column":51,"offset":59092}}},{"type":"text","value":"\n\"Binary Tree Maximum Path Sum\": ","position":{"start":{"line":1744,"column":51,"offset":59092},"end":{"line":1745,"column":33,"offset":59125}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/binary-tree-maximum-path-sum"},"children":[{"type":"text","value":"https://leetcode.com/problems/binary-tree-maximum-path-sum","position":{"start":{"line":1745,"column":33,"offset":59125},"end":{"line":1745,"column":91,"offset":59183}}}],"position":{"start":{"line":1745,"column":33,"offset":59125},"end":{"line":1745,"column":91,"offset":59183}}}],"position":{"start":{"line":1739,"column":1,"offset":58884},"end":{"line":1745,"column":91,"offset":59183}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1747,"column":1,"offset":59185},"end":{"line":1747,"column":4,"offset":59188}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#129-sum-root-to-leaf-numbershttpsleetcodecomproblemssum-root-to-leaf-numbersdescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1749,"column":2,"offset":59191},"end":{"line":1749,"column":142,"offset":59331}}}],"position":{"start":{"line":1749,"column":1,"offset":59190},"end":{"line":1749,"column":233,"offset":59422}}}],"position":{"start":{"line":1749,"column":1,"offset":59190},"end":{"line":1749,"column":233,"offset":59422}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1751,"column":4,"offset":59427},"end":{"line":1751,"column":6,"offset":59429}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/sum-root-to-leaf-numbers/description/"},"children":[{"type":"text","value":"129. Sum Root to Leaf Numbers","position":{"start":{"line":1751,"column":7,"offset":59430},"end":{"line":1751,"column":36,"offset":59459}}}],"position":{"start":{"line":1751,"column":6,"offset":59429},"end":{"line":1751,"column":106,"offset":59529}}}],"position":{"start":{"line":1751,"column":1,"offset":59424},"end":{"line":1751,"column":106,"offset":59529}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1753,"column":5,"offset":59535},"end":{"line":1753,"column":13,"offset":59543}}}],"position":{"start":{"line":1753,"column":1,"offset":59531},"end":{"line":1753,"column":13,"offset":59543}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a binary tree containing digits from ","position":{"start":{"line":1755,"column":1,"offset":59545},"end":{"line":1755,"column":44,"offset":59588}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0-9"}],"position":{"start":{"line":1755,"column":44,"offset":59588},"end":{"line":1755,"column":49,"offset":59593}}},{"type":"text","value":" only, each root-to-leaf path could represent a number.","position":{"start":{"line":1755,"column":49,"offset":59593},"end":{"line":1755,"column":104,"offset":59648}}}],"position":{"start":{"line":1755,"column":1,"offset":59545},"end":{"line":1755,"column":104,"offset":59648}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"An example is the root-to-leaf path ","position":{"start":{"line":1757,"column":1,"offset":59650},"end":{"line":1757,"column":37,"offset":59686}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"1->2->3"}],"position":{"start":{"line":1757,"column":37,"offset":59686},"end":{"line":1757,"column":46,"offset":59695}}},{"type":"text","value":" which represents the number ","position":{"start":{"line":1757,"column":46,"offset":59695},"end":{"line":1757,"column":75,"offset":59724}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"123"}],"position":{"start":{"line":1757,"column":75,"offset":59724},"end":{"line":1757,"column":80,"offset":59729}}},{"type":"text","value":".","position":{"start":{"line":1757,"column":80,"offset":59729},"end":{"line":1757,"column":81,"offset":59730}}}],"position":{"start":{"line":1757,"column":1,"offset":59650},"end":{"line":1757,"column":81,"offset":59730}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Find the total sum of all root-to-leaf numbers.","position":{"start":{"line":1759,"column":1,"offset":59732},"end":{"line":1759,"column":48,"offset":59779}}}],"position":{"start":{"line":1759,"column":1,"offset":59732},"end":{"line":1759,"column":48,"offset":59779}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":1761,"column":3,"offset":59783},"end":{"line":1761,"column":8,"offset":59788}}}],"position":{"start":{"line":1761,"column":1,"offset":59781},"end":{"line":1761,"column":10,"offset":59790}}},{"type":"text","value":" A leaf is a node with no children.","position":{"start":{"line":1761,"column":10,"offset":59790},"end":{"line":1761,"column":45,"offset":59825}}}],"position":{"start":{"line":1761,"column":1,"offset":59781},"end":{"line":1761,"column":45,"offset":59825}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":1763,"column":3,"offset":59829},"end":{"line":1763,"column":11,"offset":59837}}}],"position":{"start":{"line":1763,"column":1,"offset":59827},"end":{"line":1763,"column":13,"offset":59839}}}],"position":{"start":{"line":1763,"column":1,"offset":59827},"end":{"line":1763,"column":13,"offset":59839}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [1,2,3]\n    1\n   / \\\n  2   3\nOutput: 25\nExplanation:\nThe root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.\n"}],"position":{"start":{"line":1765,"column":1,"offset":59841},"end":{"line":1773,"column":35,"offset":60073}}}],"position":{"start":{"line":1765,"column":1,"offset":59841},"end":{"line":1773,"column":35,"offset":60073}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":1775,"column":3,"offset":60077},"end":{"line":1775,"column":13,"offset":60087}}}],"position":{"start":{"line":1775,"column":1,"offset":60075},"end":{"line":1775,"column":15,"offset":60089}}}],"position":{"start":{"line":1775,"column":1,"offset":60075},"end":{"line":1775,"column":15,"offset":60089}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [4,9,0,5,1]\n    4\n   / \\\n  9   0\n / \\\n5   1\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.\n"}],"position":{"start":{"line":1777,"column":1,"offset":60091},"end":{"line":1788,"column":44,"offset":60422}}}],"position":{"start":{"line":1777,"column":1,"offset":60091},"end":{"line":1788,"column":44,"offset":60422}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1790,"column":5,"offset":60428},"end":{"line":1790,"column":14,"offset":60437}}}],"position":{"start":{"line":1790,"column":1,"offset":60424},"end":{"line":1790,"column":14,"offset":60437}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To write a clean solution for this promblem, use ","position":{"start":{"line":1792,"column":1,"offset":60439},"end":{"line":1792,"column":50,"offset":60488}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0"}],"position":{"start":{"line":1792,"column":50,"offset":60488},"end":{"line":1792,"column":53,"offset":60491}}},{"type":"text","value":" as indicator of leaf node. If all the children get ","position":{"start":{"line":1792,"column":53,"offset":60491},"end":{"line":1792,"column":105,"offset":60543}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0"}],"position":{"start":{"line":1792,"column":105,"offset":60543},"end":{"line":1792,"column":108,"offset":60546}}},{"type":"text","value":", it is a leaf node, return the sum of current level.","position":{"start":{"line":1792,"column":108,"offset":60546},"end":{"line":1792,"column":161,"offset":60599}}}],"position":{"start":{"line":1792,"column":1,"offset":60439},"end":{"line":1792,"column":161,"offset":60599}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nlet sumNumbers = function (root, sum = 0) {\n    if (!root) {\n        return 0;\n    }\n    sum = sum * 10 + root.val;\n    return sumNumbers(root.left, sum) + sumNumbers(root.right, sum) || sum;\n};\n"}],"position":{"start":{"line":1794,"column":1,"offset":60601},"end":{"line":1813,"column":4,"offset":60999}}}],"position":{"start":{"line":1794,"column":1,"offset":60601},"end":{"line":1813,"column":4,"offset":60999}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1815,"column":1,"offset":61001},"end":{"line":1815,"column":4,"offset":61004}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Medium\nRelated Topics:\n\"Depth-first Search\": ","position":{"start":{"line":1817,"column":1,"offset":61006},"end":{"line":1819,"column":23,"offset":61063}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/depth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/depth-first-search","position":{"start":{"line":1819,"column":23,"offset":61063},"end":{"line":1819,"column":66,"offset":61106}}}],"position":{"start":{"line":1819,"column":23,"offset":61063},"end":{"line":1819,"column":66,"offset":61106}}},{"type":"text","value":"\n\"Breadth-first Search\": ","position":{"start":{"line":1819,"column":66,"offset":61106},"end":{"line":1820,"column":25,"offset":61131}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/breadth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/breadth-first-search","position":{"start":{"line":1820,"column":25,"offset":61131},"end":{"line":1820,"column":70,"offset":61176}}}],"position":{"start":{"line":1820,"column":25,"offset":61131},"end":{"line":1820,"column":70,"offset":61176}}},{"type":"text","value":"\n\"Union Find\": ","position":{"start":{"line":1820,"column":70,"offset":61176},"end":{"line":1821,"column":15,"offset":61191}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/union-find"},"children":[{"type":"text","value":"https://leetcode.com/tag/union-find","position":{"start":{"line":1821,"column":15,"offset":61191},"end":{"line":1821,"column":50,"offset":61226}}}],"position":{"start":{"line":1821,"column":15,"offset":61191},"end":{"line":1821,"column":50,"offset":61226}}},{"type":"text","value":"\nSimilar Questions:\n\"Number of Islands\": ","position":{"start":{"line":1821,"column":50,"offset":61226},"end":{"line":1823,"column":22,"offset":61267}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/number-of-islands"},"children":[{"type":"text","value":"https://leetcode.com/problems/number-of-islands","position":{"start":{"line":1823,"column":22,"offset":61267},"end":{"line":1823,"column":69,"offset":61314}}}],"position":{"start":{"line":1823,"column":22,"offset":61267},"end":{"line":1823,"column":69,"offset":61314}}},{"type":"text","value":"\n\"Walls and Gates\": ","position":{"start":{"line":1823,"column":69,"offset":61314},"end":{"line":1824,"column":20,"offset":61334}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/walls-and-gates"},"children":[{"type":"text","value":"https://leetcode.com/problems/walls-and-gates","position":{"start":{"line":1824,"column":20,"offset":61334},"end":{"line":1824,"column":65,"offset":61379}}}],"position":{"start":{"line":1824,"column":20,"offset":61334},"end":{"line":1824,"column":65,"offset":61379}}}],"position":{"start":{"line":1817,"column":1,"offset":61006},"end":{"line":1824,"column":65,"offset":61379}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1826,"column":1,"offset":61381},"end":{"line":1826,"column":4,"offset":61384}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#130-surrounded-regionshttpsleetcodecomproblemssurrounded-regionsdescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1828,"column":2,"offset":61387},"end":{"line":1828,"column":142,"offset":61527}}}],"position":{"start":{"line":1828,"column":1,"offset":61386},"end":{"line":1828,"column":221,"offset":61606}}}],"position":{"start":{"line":1828,"column":1,"offset":61386},"end":{"line":1828,"column":221,"offset":61606}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1830,"column":4,"offset":61611},"end":{"line":1830,"column":6,"offset":61613}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/surrounded-regions/description/"},"children":[{"type":"text","value":"130. Surrounded Regions","position":{"start":{"line":1830,"column":7,"offset":61614},"end":{"line":1830,"column":30,"offset":61637}}}],"position":{"start":{"line":1830,"column":6,"offset":61613},"end":{"line":1830,"column":94,"offset":61701}}}],"position":{"start":{"line":1830,"column":1,"offset":61608},"end":{"line":1830,"column":94,"offset":61701}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1832,"column":5,"offset":61707},"end":{"line":1832,"column":13,"offset":61715}}}],"position":{"start":{"line":1832,"column":1,"offset":61703},"end":{"line":1832,"column":13,"offset":61715}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a 2D board containing ","position":{"start":{"line":1834,"column":1,"offset":61717},"end":{"line":1834,"column":29,"offset":61745}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'X'"}],"position":{"start":{"line":1834,"column":29,"offset":61745},"end":{"line":1834,"column":34,"offset":61750}}},{"type":"text","value":" and ","position":{"start":{"line":1834,"column":34,"offset":61750},"end":{"line":1834,"column":39,"offset":61755}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'O'"}],"position":{"start":{"line":1834,"column":39,"offset":61755},"end":{"line":1834,"column":44,"offset":61760}}},{"type":"text","value":" (","position":{"start":{"line":1834,"column":44,"offset":61760},"end":{"line":1834,"column":46,"offset":61762}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"the letter O","position":{"start":{"line":1834,"column":48,"offset":61764},"end":{"line":1834,"column":60,"offset":61776}}}],"position":{"start":{"line":1834,"column":46,"offset":61762},"end":{"line":1834,"column":62,"offset":61778}}},{"type":"text","value":"), capture all regions surrounded by ","position":{"start":{"line":1834,"column":62,"offset":61778},"end":{"line":1834,"column":99,"offset":61815}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'X'"}],"position":{"start":{"line":1834,"column":99,"offset":61815},"end":{"line":1834,"column":104,"offset":61820}}},{"type":"text","value":".","position":{"start":{"line":1834,"column":104,"offset":61820},"end":{"line":1834,"column":105,"offset":61821}}}],"position":{"start":{"line":1834,"column":1,"offset":61717},"end":{"line":1834,"column":105,"offset":61821}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A region is captured by flipping all ","position":{"start":{"line":1836,"column":1,"offset":61823},"end":{"line":1836,"column":38,"offset":61860}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'O'"}],"position":{"start":{"line":1836,"column":38,"offset":61860},"end":{"line":1836,"column":43,"offset":61865}}},{"type":"text","value":"s into ","position":{"start":{"line":1836,"column":43,"offset":61865},"end":{"line":1836,"column":50,"offset":61872}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'X'"}],"position":{"start":{"line":1836,"column":50,"offset":61872},"end":{"line":1836,"column":55,"offset":61877}}},{"type":"text","value":"s in that surrounded region.","position":{"start":{"line":1836,"column":55,"offset":61877},"end":{"line":1836,"column":83,"offset":61905}}}],"position":{"start":{"line":1836,"column":1,"offset":61823},"end":{"line":1836,"column":83,"offset":61905}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":1838,"column":3,"offset":61909},"end":{"line":1838,"column":11,"offset":61917}}}],"position":{"start":{"line":1838,"column":1,"offset":61907},"end":{"line":1838,"column":13,"offset":61919}}}],"position":{"start":{"line":1838,"column":1,"offset":61907},"end":{"line":1838,"column":13,"offset":61919}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"X X X X\nX O O X\nX X O X\nX O X X\n"}],"position":{"start":{"line":1840,"column":1,"offset":61921},"end":{"line":1846,"column":4,"offset":61961}}}],"position":{"start":{"line":1840,"column":1,"offset":61921},"end":{"line":1846,"column":4,"offset":61961}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After running your function, the board should be:","position":{"start":{"line":1848,"column":1,"offset":61963},"end":{"line":1848,"column":50,"offset":62012}}}],"position":{"start":{"line":1848,"column":1,"offset":61963},"end":{"line":1848,"column":50,"offset":62012}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"X X X X\nX X X X\nX X X X\nX O X X\n"}],"position":{"start":{"line":1850,"column":1,"offset":62014},"end":{"line":1856,"column":4,"offset":62054}}}],"position":{"start":{"line":1850,"column":1,"offset":62014},"end":{"line":1856,"column":4,"offset":62054}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Explanation:","position":{"start":{"line":1858,"column":3,"offset":62058},"end":{"line":1858,"column":15,"offset":62070}}}],"position":{"start":{"line":1858,"column":1,"offset":62056},"end":{"line":1858,"column":17,"offset":62072}}}],"position":{"start":{"line":1858,"column":1,"offset":62056},"end":{"line":1858,"column":17,"offset":62072}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Surrounded regions shouldn't be on the border, which means that any ","position":{"start":{"line":1860,"column":1,"offset":62074},"end":{"line":1860,"column":69,"offset":62142}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'O'"}],"position":{"start":{"line":1860,"column":69,"offset":62142},"end":{"line":1860,"column":74,"offset":62147}}},{"type":"text","value":" on the border of the board are not flipped to ","position":{"start":{"line":1860,"column":74,"offset":62147},"end":{"line":1860,"column":121,"offset":62194}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'X'"}],"position":{"start":{"line":1860,"column":121,"offset":62194},"end":{"line":1860,"column":126,"offset":62199}}},{"type":"text","value":". Any ","position":{"start":{"line":1860,"column":126,"offset":62199},"end":{"line":1860,"column":132,"offset":62205}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'O'"}],"position":{"start":{"line":1860,"column":132,"offset":62205},"end":{"line":1860,"column":137,"offset":62210}}},{"type":"text","value":" that is not on the border and it is not connected to an ","position":{"start":{"line":1860,"column":137,"offset":62210},"end":{"line":1860,"column":194,"offset":62267}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'O'"}],"position":{"start":{"line":1860,"column":194,"offset":62267},"end":{"line":1860,"column":199,"offset":62272}}},{"type":"text","value":" on the border will be flipped to ","position":{"start":{"line":1860,"column":199,"offset":62272},"end":{"line":1860,"column":233,"offset":62306}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'X'"}],"position":{"start":{"line":1860,"column":233,"offset":62306},"end":{"line":1860,"column":238,"offset":62311}}},{"type":"text","value":". Two cells are connected if they are adjacent cells connected horizontally or vertically.","position":{"start":{"line":1860,"column":238,"offset":62311},"end":{"line":1860,"column":328,"offset":62401}}}],"position":{"start":{"line":1860,"column":1,"offset":62074},"end":{"line":1860,"column":328,"offset":62401}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1862,"column":5,"offset":62407},"end":{"line":1862,"column":14,"offset":62416}}}],"position":{"start":{"line":1862,"column":1,"offset":62403},"end":{"line":1862,"column":14,"offset":62416}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Find all the ","position":{"start":{"line":1864,"column":1,"offset":62418},"end":{"line":1864,"column":14,"offset":62431}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O"}],"position":{"start":{"line":1864,"column":14,"offset":62431},"end":{"line":1864,"column":17,"offset":62434}}},{"type":"text","value":"s that are connected to the ","position":{"start":{"line":1864,"column":17,"offset":62434},"end":{"line":1864,"column":45,"offset":62462}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O"}],"position":{"start":{"line":1864,"column":45,"offset":62462},"end":{"line":1864,"column":48,"offset":62465}}},{"type":"text","value":"s on the border, change them to ","position":{"start":{"line":1864,"column":48,"offset":62465},"end":{"line":1864,"column":80,"offset":62497}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"#"}],"position":{"start":{"line":1864,"column":80,"offset":62497},"end":{"line":1864,"column":83,"offset":62500}}},{"type":"text","value":". Then scan the board, change ","position":{"start":{"line":1864,"column":83,"offset":62500},"end":{"line":1864,"column":113,"offset":62530}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O"}],"position":{"start":{"line":1864,"column":113,"offset":62530},"end":{"line":1864,"column":116,"offset":62533}}},{"type":"text","value":" to ","position":{"start":{"line":1864,"column":116,"offset":62533},"end":{"line":1864,"column":120,"offset":62537}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"X"}],"position":{"start":{"line":1864,"column":120,"offset":62537},"end":{"line":1864,"column":123,"offset":62540}}},{"type":"text","value":" and ","position":{"start":{"line":1864,"column":123,"offset":62540},"end":{"line":1864,"column":128,"offset":62545}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"#"}],"position":{"start":{"line":1864,"column":128,"offset":62545},"end":{"line":1864,"column":131,"offset":62548}}},{"type":"text","value":" back to ","position":{"start":{"line":1864,"column":131,"offset":62548},"end":{"line":1864,"column":140,"offset":62557}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O"}],"position":{"start":{"line":1864,"column":140,"offset":62557},"end":{"line":1864,"column":143,"offset":62560}}},{"type":"text","value":".","position":{"start":{"line":1864,"column":143,"offset":62560},"end":{"line":1864,"column":144,"offset":62561}}}],"position":{"start":{"line":1864,"column":1,"offset":62418},"end":{"line":1864,"column":144,"offset":62561}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The process of finding the connected ","position":{"start":{"line":1866,"column":1,"offset":62563},"end":{"line":1866,"column":38,"offset":62600}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O"}],"position":{"start":{"line":1866,"column":38,"offset":62600},"end":{"line":1866,"column":41,"offset":62603}}},{"type":"text","value":"s is just like tree traversal. ","position":{"start":{"line":1866,"column":41,"offset":62603},"end":{"line":1866,"column":72,"offset":62634}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O"}],"position":{"start":{"line":1866,"column":72,"offset":62634},"end":{"line":1866,"column":75,"offset":62637}}},{"type":"text","value":"s on the border are the same level. Their children are the second level. And so on.","position":{"start":{"line":1866,"column":75,"offset":62637},"end":{"line":1866,"column":158,"offset":62720}}}],"position":{"start":{"line":1866,"column":1,"offset":62563},"end":{"line":1866,"column":158,"offset":62720}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So both BFS and DFS are good. I prefer BFS when pruning is not needed in favor of its readability.","position":{"start":{"line":1868,"column":1,"offset":62722},"end":{"line":1868,"column":99,"offset":62820}}}],"position":{"start":{"line":1868,"column":1,"offset":62722},"end":{"line":1868,"column":99,"offset":62820}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nlet solve = function (board) {\n    const height = board.length;\n    if (height <= 1) {\n        return;\n    }\n    const width = board[0].length;\n    if (width <= 1) {\n        return;\n    }\n\n    const rowend = height - 1;\n    const colend = width - 1;\n\n    const queue = [];\n\n    for (let row = 0; row < height; row++) {\n        if (board[row][0] === 'O') {\n            board[row][0] = '#';\n            queue.push(row, 0);\n        }\n        if (board[row][colend] === 'O') {\n            board[row][colend] = '#';\n            queue.push(row, colend);\n        }\n    }\n\n    for (let col = 0; col < width; col++) {\n        if (board[0][col] === 'O') {\n            board[0][col] = '#';\n            queue.push(0, col);\n        }\n        if (board[rowend][col] === 'O') {\n            board[rowend][col] = '#';\n            queue.push(rowend, col);\n        }\n    }\n\n    while (queue.length > 0) {\n        const row = queue.shift();\n        const col = queue.shift();\n        if (row < rowend && board[row + 1][col] === 'O') {\n            board[row + 1][col] = '#';\n            queue.push(row + 1, col);\n        }\n        if (row > 0 && board[row - 1][col] === 'O') {\n            board[row - 1][col] = '#';\n            queue.push(row - 1, col);\n        }\n        if (board[row][col + 1] === 'O') {\n            board[row][col + 1] = '#';\n            queue.push(row, col + 1);\n        }\n        if (board[row][col - 1] === 'O') {\n            board[row][col - 1] = '#';\n            queue.push(row, col - 1);\n        }\n    }\n\n    for (let row = 0; row < height; row++) {\n        for (let col = 0; col < width; col++) {\n            if (board[row][col] === '#') {\n                board[row][col] = 'O';\n            } else if (board[row][col] === 'O') {\n                board[row][col] = 'X';\n            }\n        }\n    }\n};\n"}],"position":{"start":{"line":1870,"column":1,"offset":62822},"end":{"line":1943,"column":4,"offset":64751}}}],"position":{"start":{"line":1870,"column":1,"offset":62822},"end":{"line":1943,"column":4,"offset":64751}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1945,"column":1,"offset":64753},"end":{"line":1945,"column":4,"offset":64756}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Medium\nRelated Topics:\n\"Depth-first Search\": ","position":{"start":{"line":1947,"column":1,"offset":64758},"end":{"line":1949,"column":23,"offset":64815}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/depth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/depth-first-search","position":{"start":{"line":1949,"column":23,"offset":64815},"end":{"line":1949,"column":66,"offset":64858}}}],"position":{"start":{"line":1949,"column":23,"offset":64815},"end":{"line":1949,"column":66,"offset":64858}}},{"type":"text","value":"\n\"Breadth-first Search\": ","position":{"start":{"line":1949,"column":66,"offset":64858},"end":{"line":1950,"column":25,"offset":64883}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/breadth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/breadth-first-search","position":{"start":{"line":1950,"column":25,"offset":64883},"end":{"line":1950,"column":70,"offset":64928}}}],"position":{"start":{"line":1950,"column":25,"offset":64883},"end":{"line":1950,"column":70,"offset":64928}}},{"type":"text","value":"\n\"Graph\": ","position":{"start":{"line":1950,"column":70,"offset":64928},"end":{"line":1951,"column":10,"offset":64938}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/graph"},"children":[{"type":"text","value":"https://leetcode.com/tag/graph","position":{"start":{"line":1951,"column":10,"offset":64938},"end":{"line":1951,"column":40,"offset":64968}}}],"position":{"start":{"line":1951,"column":10,"offset":64938},"end":{"line":1951,"column":40,"offset":64968}}},{"type":"text","value":"\nSimilar Questions:\n\"Copy List with Random Pointer\": ","position":{"start":{"line":1951,"column":40,"offset":64968},"end":{"line":1953,"column":34,"offset":65021}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/copy-list-with-random-pointer"},"children":[{"type":"text","value":"https://leetcode.com/problems/copy-list-with-random-pointer","position":{"start":{"line":1953,"column":34,"offset":65021},"end":{"line":1953,"column":93,"offset":65080}}}],"position":{"start":{"line":1953,"column":34,"offset":65021},"end":{"line":1953,"column":93,"offset":65080}}}],"position":{"start":{"line":1947,"column":1,"offset":64758},"end":{"line":1953,"column":93,"offset":65080}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1955,"column":1,"offset":65082},"end":{"line":1955,"column":4,"offset":65085}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#133-clone-graphhttpsleetcodecomproblemsclone-graphdescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1957,"column":2,"offset":65088},"end":{"line":1957,"column":142,"offset":65228}}}],"position":{"start":{"line":1957,"column":1,"offset":65087},"end":{"line":1957,"column":207,"offset":65293}}}],"position":{"start":{"line":1957,"column":1,"offset":65087},"end":{"line":1957,"column":207,"offset":65293}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1959,"column":4,"offset":65298},"end":{"line":1959,"column":6,"offset":65300}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/clone-graph/description/"},"children":[{"type":"text","value":"133. Clone Graph","position":{"start":{"line":1959,"column":7,"offset":65301},"end":{"line":1959,"column":23,"offset":65317}}}],"position":{"start":{"line":1959,"column":6,"offset":65300},"end":{"line":1959,"column":80,"offset":65374}}}],"position":{"start":{"line":1959,"column":1,"offset":65295},"end":{"line":1959,"column":80,"offset":65374}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1961,"column":5,"offset":65380},"end":{"line":1961,"column":13,"offset":65388}}}],"position":{"start":{"line":1961,"column":1,"offset":65376},"end":{"line":1961,"column":13,"offset":65388}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given the head of a graph, return a deep copy (clone) of the graph. Each node in the graph contains a ","position":{"start":{"line":1963,"column":1,"offset":65390},"end":{"line":1963,"column":103,"offset":65492}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"label"}],"position":{"start":{"line":1963,"column":103,"offset":65492},"end":{"line":1963,"column":110,"offset":65499}}},{"type":"text","value":" (","position":{"start":{"line":1963,"column":110,"offset":65499},"end":{"line":1963,"column":112,"offset":65501}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"int"}],"position":{"start":{"line":1963,"column":112,"offset":65501},"end":{"line":1963,"column":117,"offset":65506}}},{"type":"text","value":") and a list (","position":{"start":{"line":1963,"column":117,"offset":65506},"end":{"line":1963,"column":131,"offset":65520}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"List[UndirectedGraphNode]"}],"position":{"start":{"line":1963,"column":131,"offset":65520},"end":{"line":1963,"column":158,"offset":65547}}},{"type":"text","value":") of its ","position":{"start":{"line":1963,"column":158,"offset":65547},"end":{"line":1963,"column":167,"offset":65556}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"neighbors"}],"position":{"start":{"line":1963,"column":167,"offset":65556},"end":{"line":1963,"column":178,"offset":65567}}},{"type":"text","value":". There is an edge between the given node and each of the nodes in its neighbors.","position":{"start":{"line":1963,"column":178,"offset":65567},"end":{"line":1963,"column":259,"offset":65648}}}],"position":{"start":{"line":1963,"column":1,"offset":65390},"end":{"line":1963,"column":259,"offset":65648}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"OJ's undirected graph serialization (so you can understand error output):","position":{"start":{"line":1965,"column":1,"offset":65650},"end":{"line":1965,"column":74,"offset":65723}}}],"position":{"start":{"line":1965,"column":1,"offset":65650},"end":{"line":1965,"column":74,"offset":65723}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Nodes are labeled uniquely.","position":{"start":{"line":1967,"column":1,"offset":65725},"end":{"line":1967,"column":28,"offset":65752}}}],"position":{"start":{"line":1967,"column":1,"offset":65725},"end":{"line":1967,"column":28,"offset":65752}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We use ","position":{"start":{"line":1969,"column":1,"offset":65754},"end":{"line":1969,"column":8,"offset":65761}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"#"}],"position":{"start":{"line":1969,"column":8,"offset":65761},"end":{"line":1969,"column":11,"offset":65764}}},{"type":"text","value":" as a separator for each node, and ","position":{"start":{"line":1969,"column":11,"offset":65764},"end":{"line":1969,"column":46,"offset":65799}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":","}],"position":{"start":{"line":1969,"column":46,"offset":65799},"end":{"line":1969,"column":49,"offset":65802}}},{"type":"text","value":" as a separator for node label and each neighbor of the node.","position":{"start":{"line":1969,"column":49,"offset":65802},"end":{"line":1969,"column":110,"offset":65863}}}],"position":{"start":{"line":1969,"column":1,"offset":65754},"end":{"line":1969,"column":110,"offset":65863}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As an example, consider the serialized graph ","position":{"start":{"line":1971,"column":1,"offset":65865},"end":{"line":1971,"column":46,"offset":65910}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{0,1,2#1,2#2,2}"}],"position":{"start":{"line":1971,"column":46,"offset":65910},"end":{"line":1971,"column":63,"offset":65927}}},{"type":"text","value":".","position":{"start":{"line":1971,"column":63,"offset":65927},"end":{"line":1971,"column":64,"offset":65928}}}],"position":{"start":{"line":1971,"column":1,"offset":65865},"end":{"line":1971,"column":64,"offset":65928}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The graph has a total of three nodes, and therefore contains three parts as separated by ","position":{"start":{"line":1973,"column":1,"offset":65930},"end":{"line":1973,"column":90,"offset":66019}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"#"}],"position":{"start":{"line":1973,"column":90,"offset":66019},"end":{"line":1973,"column":93,"offset":66022}}},{"type":"text","value":".","position":{"start":{"line":1973,"column":93,"offset":66022},"end":{"line":1973,"column":94,"offset":66023}}}],"position":{"start":{"line":1973,"column":1,"offset":65930},"end":{"line":1973,"column":94,"offset":66023}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"First node is labeled as ","position":{"start":{"line":1975,"column":5,"offset":66029},"end":{"line":1975,"column":30,"offset":66054}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0"}],"position":{"start":{"line":1975,"column":30,"offset":66054},"end":{"line":1975,"column":33,"offset":66057}}},{"type":"text","value":". Connect node ","position":{"start":{"line":1975,"column":33,"offset":66057},"end":{"line":1975,"column":48,"offset":66072}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0"}],"position":{"start":{"line":1975,"column":48,"offset":66072},"end":{"line":1975,"column":51,"offset":66075}}},{"type":"text","value":" to both nodes ","position":{"start":{"line":1975,"column":51,"offset":66075},"end":{"line":1975,"column":66,"offset":66090}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"1"}],"position":{"start":{"line":1975,"column":66,"offset":66090},"end":{"line":1975,"column":69,"offset":66093}}},{"type":"text","value":" and ","position":{"start":{"line":1975,"column":69,"offset":66093},"end":{"line":1975,"column":74,"offset":66098}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"2"}],"position":{"start":{"line":1975,"column":74,"offset":66098},"end":{"line":1975,"column":77,"offset":66101}}},{"type":"text","value":".","position":{"start":{"line":1975,"column":77,"offset":66101},"end":{"line":1975,"column":78,"offset":66102}}}],"position":{"start":{"line":1975,"column":1,"offset":66025},"end":{"line":1975,"column":78,"offset":66102}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Second node is labeled as ","position":{"start":{"line":1976,"column":5,"offset":66107},"end":{"line":1976,"column":31,"offset":66133}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"1"}],"position":{"start":{"line":1976,"column":31,"offset":66133},"end":{"line":1976,"column":34,"offset":66136}}},{"type":"text","value":". Connect node ","position":{"start":{"line":1976,"column":34,"offset":66136},"end":{"line":1976,"column":49,"offset":66151}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"1"}],"position":{"start":{"line":1976,"column":49,"offset":66151},"end":{"line":1976,"column":52,"offset":66154}}},{"type":"text","value":" to node ","position":{"start":{"line":1976,"column":52,"offset":66154},"end":{"line":1976,"column":61,"offset":66163}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"2"}],"position":{"start":{"line":1976,"column":61,"offset":66163},"end":{"line":1976,"column":64,"offset":66166}}},{"type":"text","value":".","position":{"start":{"line":1976,"column":64,"offset":66166},"end":{"line":1976,"column":65,"offset":66167}}}],"position":{"start":{"line":1976,"column":1,"offset":66103},"end":{"line":1976,"column":65,"offset":66167}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Third node is labeled as ","position":{"start":{"line":1977,"column":5,"offset":66172},"end":{"line":1977,"column":30,"offset":66197}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"2"}],"position":{"start":{"line":1977,"column":30,"offset":66197},"end":{"line":1977,"column":33,"offset":66200}}},{"type":"text","value":". Connect node ","position":{"start":{"line":1977,"column":33,"offset":66200},"end":{"line":1977,"column":48,"offset":66215}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"2"}],"position":{"start":{"line":1977,"column":48,"offset":66215},"end":{"line":1977,"column":51,"offset":66218}}},{"type":"text","value":" to node ","position":{"start":{"line":1977,"column":51,"offset":66218},"end":{"line":1977,"column":60,"offset":66227}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"2"}],"position":{"start":{"line":1977,"column":60,"offset":66227},"end":{"line":1977,"column":63,"offset":66230}}},{"type":"text","value":" (itself), thus forming a self-cycle.","position":{"start":{"line":1977,"column":63,"offset":66230},"end":{"line":1977,"column":100,"offset":66267}}}],"position":{"start":{"line":1977,"column":1,"offset":66168},"end":{"line":1977,"column":100,"offset":66267}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1975,"column":1,"offset":66025},"end":{"line":1977,"column":100,"offset":66267}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Visually, the graph looks like the following:","position":{"start":{"line":1979,"column":1,"offset":66269},"end":{"line":1979,"column":46,"offset":66314}}}],"position":{"start":{"line":1979,"column":1,"offset":66269},"end":{"line":1979,"column":46,"offset":66314}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"       1\n      / \\\n     /   \\\n    0 --- 2\n         / \\\n         \\_/\n"}],"position":{"start":{"line":1981,"column":1,"offset":66316},"end":{"line":1989,"column":4,"offset":66392}}}],"position":{"start":{"line":1981,"column":1,"offset":66316},"end":{"line":1989,"column":4,"offset":66392}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note","position":{"start":{"line":1991,"column":3,"offset":66396},"end":{"line":1991,"column":7,"offset":66400}}}],"position":{"start":{"line":1991,"column":1,"offset":66394},"end":{"line":1991,"column":9,"offset":66402}}},{"type":"text","value":": The information about the tree serialization is only meant so that you can understand error output if you get a wrong answer. You don't need to understand the serialization to solve the problem.","position":{"start":{"line":1991,"column":9,"offset":66402},"end":{"line":1991,"column":205,"offset":66598}}}],"position":{"start":{"line":1991,"column":1,"offset":66394},"end":{"line":1991,"column":205,"offset":66598}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1993,"column":5,"offset":66604},"end":{"line":1993,"column":14,"offset":66613}}}],"position":{"start":{"line":1993,"column":1,"offset":66600},"end":{"line":1993,"column":14,"offset":66613}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"DFS. Cache the visited node before entering the next recursion.","position":{"start":{"line":1995,"column":1,"offset":66615},"end":{"line":1995,"column":64,"offset":66678}}}],"position":{"start":{"line":1995,"column":1,"offset":66615},"end":{"line":1995,"column":64,"offset":66678}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for undirected graph.\n * function UndirectedGraphNode(label) {\n *     this.label = label;\n *     this.neighbors = [];   // Array of UndirectedGraphNode\n * }\n */\n\n/**\n * @param {UndirectedGraphNode} graph\n * @return {UndirectedGraphNode}\n */\nlet cloneGraph = function (graph) {\n    const cache = {};\n    return _clone(graph);\n\n    function _clone(graph) {\n        if (!graph) {\n            return graph;\n        }\n        const label = graph.label;\n        if (!cache[label]) {\n            cache[label] = new UndirectedGraphNode(label);\n            cache[label].neighbors = graph.neighbors.map(_clone);\n        }\n        return cache[label];\n    }\n};\n"}],"position":{"start":{"line":1997,"column":1,"offset":66680},"end":{"line":2026,"column":4,"offset":67357}}}],"position":{"start":{"line":1997,"column":1,"offset":66680},"end":{"line":2026,"column":4,"offset":67357}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://github.com/everthis/leetcode-js/blob/master/images/binary-tree-upside-down.webp","alt":"alt text","title":"binary-tree-upside-down"},"children":[],"position":{"start":{"line":2028,"column":1,"offset":67359},"end":{"line":2028,"column":127,"offset":67485}}}],"position":{"start":{"line":2028,"column":1,"offset":67359},"end":{"line":2028,"column":127,"offset":67485}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nconst upsideDownBinaryTree = function (root) {\n    let curr = root;\n    let next = null;\n    let temp = null;\n    let prev = null;\n    while (curr !== null) {\n        next = curr.left;\n        curr.left = temp;\n        temp = curr.right;\n        curr.right = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};\n\n// another\n\nconst upsideDownBinaryTree = function (root) {\n    if (root == null || root.left == null) {\n        return root;\n    }\n    const newRoot = upsideDownBinaryTree(root.left);\n    root.left.left = root.right;\n    root.left.right = root;\n    root.left = null;\n    root.right = null;\n    return newRoot;\n};\n"}],"position":{"start":{"line":2030,"column":1,"offset":67487},"end":{"line":2071,"column":4,"offset":68339}}}],"position":{"start":{"line":2030,"column":1,"offset":67487},"end":{"line":2071,"column":4,"offset":68339}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://github.com/everthis/leetcode-js/blob/master/images/maximum-sum-circular-subarray.png","alt":"alt text","title":"maximum-sum-circular-subarray"},"children":[],"position":{"start":{"line":2073,"column":1,"offset":68341},"end":{"line":2073,"column":138,"offset":68478}}}],"position":{"start":{"line":2073,"column":1,"offset":68341},"end":{"line":2073,"column":138,"offset":68478}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number[]} A\n * @return {number}\n */\nconst maxSubarraySumCircular = function (A) {\n    let minSum = Infinity,\n        sum = 0,\n        maxSum = -Infinity,\n        curMax = 0,\n        curMin = 0;\n    for (let a of A) {\n        sum += a;\n        curMax = Math.max(curMax + a, a);\n        maxSum = Math.max(maxSum, curMax);\n        curMin = Math.min(curMin + a, a);\n        minSum = Math.min(minSum, curMin);\n    }\n    return maxSum > 0 ? Math.max(maxSum, sum - minSum) : maxSum;\n};\n"}],"position":{"start":{"line":2075,"column":1,"offset":68480},"end":{"line":2095,"column":4,"offset":68983}}}],"position":{"start":{"line":2075,"column":1,"offset":68480},"end":{"line":2095,"column":4,"offset":68983}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#balanced-binary-tree---leetcode"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":2097,"column":2,"offset":68986},"end":{"line":2097,"column":142,"offset":69126}}}],"position":{"start":{"line":2097,"column":1,"offset":68985},"end":{"line":2097,"column":177,"offset":69161}}}],"position":{"start":{"line":2097,"column":1,"offset":68985},"end":{"line":2097,"column":177,"offset":69161}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"➤ Balanced Binary Tree - LeetCode","position":{"start":{"line":2099,"column":3,"offset":69165},"end":{"line":2099,"column":36,"offset":69198}}}],"position":{"start":{"line":2099,"column":1,"offset":69163},"end":{"line":2099,"column":36,"offset":69198}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.","position":{"start":{"line":2101,"column":3,"offset":69202},"end":{"line":2101,"column":144,"offset":69343}}}],"position":{"start":{"line":2101,"column":3,"offset":69202},"end":{"line":2101,"column":144,"offset":69343}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2101,"column":1,"offset":69200},"end":{"line":2101,"column":144,"offset":69343}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a binary tree, determine if it is height-balanced.","position":{"start":{"line":2103,"column":1,"offset":69345},"end":{"line":2103,"column":57,"offset":69401}}}],"position":{"start":{"line":2103,"column":1,"offset":69345},"end":{"line":2103,"column":57,"offset":69401}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For this problem, a height-balanced binary tree is defined as:","position":{"start":{"line":2105,"column":1,"offset":69403},"end":{"line":2105,"column":63,"offset":69465}}}],"position":{"start":{"line":2105,"column":1,"offset":69403},"end":{"line":2105,"column":63,"offset":69465}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"a binary tree in which the left and right subtrees of ","position":{"start":{"line":2107,"column":3,"offset":69469},"end":{"line":2107,"column":57,"offset":69523}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"every","position":{"start":{"line":2107,"column":58,"offset":69524},"end":{"line":2107,"column":63,"offset":69529}}}],"position":{"start":{"line":2107,"column":57,"offset":69523},"end":{"line":2107,"column":64,"offset":69530}}},{"type":"text","value":" node differ in height by no more than 1.","position":{"start":{"line":2107,"column":64,"offset":69530},"end":{"line":2107,"column":105,"offset":69571}}}],"position":{"start":{"line":2107,"column":3,"offset":69469},"end":{"line":2107,"column":105,"offset":69571}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2107,"column":1,"offset":69467},"end":{"line":2107,"column":105,"offset":69571}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":2109,"column":3,"offset":69575},"end":{"line":2109,"column":13,"offset":69585}}}],"position":{"start":{"line":2109,"column":1,"offset":69573},"end":{"line":2109,"column":15,"offset":69587}}}],"position":{"start":{"line":2109,"column":1,"offset":69573},"end":{"line":2109,"column":15,"offset":69587}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg","alt":null},"children":[],"position":{"start":{"line":2111,"column":1,"offset":69589},"end":{"line":2111,"column":66,"offset":69654}}}],"position":{"start":{"line":2111,"column":1,"offset":69589},"end":{"line":2111,"column":66,"offset":69654}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":2113,"column":3,"offset":69658},"end":{"line":2113,"column":9,"offset":69664}}}],"position":{"start":{"line":2113,"column":1,"offset":69656},"end":{"line":2113,"column":11,"offset":69666}}},{"type":"text","value":" root = ","position":{"start":{"line":2113,"column":11,"offset":69666},"end":{"line":2113,"column":19,"offset":69674}}},{"type":"text","value":"[","position":{"start":{"line":2113,"column":19,"offset":69674},"end":{"line":2113,"column":21,"offset":69676}}},{"type":"text","value":"3,9,20,null,null,15,7]\n","position":{"start":{"line":2113,"column":21,"offset":69676},"end":{"line":2114,"column":1,"offset":69699}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":2114,"column":3,"offset":69701},"end":{"line":2114,"column":10,"offset":69708}}}],"position":{"start":{"line":2114,"column":1,"offset":69699},"end":{"line":2114,"column":12,"offset":69710}}},{"type":"text","value":" true","position":{"start":{"line":2114,"column":12,"offset":69710},"end":{"line":2114,"column":17,"offset":69715}}}],"position":{"start":{"line":2113,"column":1,"offset":69656},"end":{"line":2114,"column":17,"offset":69715}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":2116,"column":3,"offset":69719},"end":{"line":2116,"column":13,"offset":69729}}}],"position":{"start":{"line":2116,"column":1,"offset":69717},"end":{"line":2116,"column":15,"offset":69731}}}],"position":{"start":{"line":2116,"column":1,"offset":69717},"end":{"line":2116,"column":15,"offset":69731}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg","alt":null},"children":[],"position":{"start":{"line":2118,"column":1,"offset":69733},"end":{"line":2118,"column":66,"offset":69798}}}],"position":{"start":{"line":2118,"column":1,"offset":69733},"end":{"line":2118,"column":66,"offset":69798}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":2120,"column":3,"offset":69802},"end":{"line":2120,"column":9,"offset":69808}}}],"position":{"start":{"line":2120,"column":1,"offset":69800},"end":{"line":2120,"column":11,"offset":69810}}},{"type":"text","value":" root = ","position":{"start":{"line":2120,"column":11,"offset":69810},"end":{"line":2120,"column":19,"offset":69818}}},{"type":"text","value":"[","position":{"start":{"line":2120,"column":19,"offset":69818},"end":{"line":2120,"column":21,"offset":69820}}},{"type":"text","value":"1,2,2,3,3,null,null,4,4]\n","position":{"start":{"line":2120,"column":21,"offset":69820},"end":{"line":2121,"column":1,"offset":69845}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":2121,"column":3,"offset":69847},"end":{"line":2121,"column":10,"offset":69854}}}],"position":{"start":{"line":2121,"column":1,"offset":69845},"end":{"line":2121,"column":12,"offset":69856}}},{"type":"text","value":" false","position":{"start":{"line":2121,"column":12,"offset":69856},"end":{"line":2121,"column":18,"offset":69862}}}],"position":{"start":{"line":2120,"column":1,"offset":69800},"end":{"line":2121,"column":18,"offset":69862}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 3:","position":{"start":{"line":2123,"column":3,"offset":69866},"end":{"line":2123,"column":13,"offset":69876}}}],"position":{"start":{"line":2123,"column":1,"offset":69864},"end":{"line":2123,"column":15,"offset":69878}}}],"position":{"start":{"line":2123,"column":1,"offset":69864},"end":{"line":2123,"column":15,"offset":69878}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":2125,"column":3,"offset":69882},"end":{"line":2125,"column":9,"offset":69888}}}],"position":{"start":{"line":2125,"column":1,"offset":69880},"end":{"line":2125,"column":11,"offset":69890}}},{"type":"text","value":" root = ","position":{"start":{"line":2125,"column":11,"offset":69890},"end":{"line":2125,"column":19,"offset":69898}}},{"type":"text","value":"[","position":{"start":{"line":2125,"column":19,"offset":69898},"end":{"line":2125,"column":21,"offset":69900}}},{"type":"text","value":"]\n","position":{"start":{"line":2125,"column":21,"offset":69900},"end":{"line":2126,"column":1,"offset":69902}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":2126,"column":3,"offset":69904},"end":{"line":2126,"column":10,"offset":69911}}}],"position":{"start":{"line":2126,"column":1,"offset":69902},"end":{"line":2126,"column":12,"offset":69913}}},{"type":"text","value":" true","position":{"start":{"line":2126,"column":12,"offset":69913},"end":{"line":2126,"column":17,"offset":69918}}}],"position":{"start":{"line":2125,"column":1,"offset":69880},"end":{"line":2126,"column":17,"offset":69918}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Constraints:","position":{"start":{"line":2128,"column":3,"offset":69922},"end":{"line":2128,"column":15,"offset":69934}}}],"position":{"start":{"line":2128,"column":1,"offset":69920},"end":{"line":2128,"column":17,"offset":69936}}}],"position":{"start":{"line":2128,"column":1,"offset":69920},"end":{"line":2128,"column":17,"offset":69936}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The number of nodes in the tree is in the range ","position":{"start":{"line":2130,"column":5,"offset":69942},"end":{"line":2130,"column":53,"offset":69990}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[0, 5000]"}],"position":{"start":{"line":2130,"column":53,"offset":69990},"end":{"line":2130,"column":64,"offset":70001}}},{"type":"text","value":".","position":{"start":{"line":2130,"column":64,"offset":70001},"end":{"line":2130,"column":65,"offset":70002}}}],"position":{"start":{"line":2130,"column":1,"offset":69938},"end":{"line":2130,"column":65,"offset":70002}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-104 <= Node.val <= 104"}],"position":{"start":{"line":2131,"column":5,"offset":70007},"end":{"line":2131,"column":30,"offset":70032}}}],"position":{"start":{"line":2131,"column":1,"offset":70003},"end":{"line":2131,"column":30,"offset":70032}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2130,"column":1,"offset":69938},"end":{"line":2131,"column":30,"offset":70032}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/balanced-binary-tree/"},"children":[{"type":"text","value":"Source","position":{"start":{"line":2133,"column":2,"offset":70035},"end":{"line":2133,"column":8,"offset":70041}}}],"position":{"start":{"line":2133,"column":1,"offset":70034},"end":{"line":2133,"column":62,"offset":70095}}},{"type":"text","value":"# Convert Sorted Array to Binary Search Tree","position":{"start":{"line":2133,"column":62,"offset":70095},"end":{"line":2133,"column":106,"offset":70139}}}],"position":{"start":{"line":2133,"column":1,"offset":70034},"end":{"line":2133,"column":106,"offset":70139}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.","position":{"start":{"line":2135,"column":3,"offset":70143},"end":{"line":2135,"column":144,"offset":70284}}}],"position":{"start":{"line":2135,"column":3,"offset":70143},"end":{"line":2135,"column":144,"offset":70284}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2135,"column":1,"offset":70141},"end":{"line":2135,"column":144,"offset":70284}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given an array where elements are sorted in ascending order, convert it to a height balanced BST.","position":{"start":{"line":2137,"column":1,"offset":70286},"end":{"line":2137,"column":98,"offset":70383}}}],"position":{"start":{"line":2137,"column":1,"offset":70286},"end":{"line":2137,"column":98,"offset":70383}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of ","position":{"start":{"line":2139,"column":1,"offset":70385},"end":{"line":2139,"column":119,"offset":70503}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"every","position":{"start":{"line":2139,"column":120,"offset":70504},"end":{"line":2139,"column":125,"offset":70509}}}],"position":{"start":{"line":2139,"column":119,"offset":70503},"end":{"line":2139,"column":126,"offset":70510}}},{"type":"text","value":" node never differ by more than 1.","position":{"start":{"line":2139,"column":126,"offset":70510},"end":{"line":2139,"column":160,"offset":70544}}}],"position":{"start":{"line":2139,"column":1,"offset":70385},"end":{"line":2139,"column":160,"offset":70544}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":2141,"column":3,"offset":70548},"end":{"line":2141,"column":11,"offset":70556}}}],"position":{"start":{"line":2141,"column":1,"offset":70546},"end":{"line":2141,"column":13,"offset":70558}}}],"position":{"start":{"line":2141,"column":1,"offset":70546},"end":{"line":2141,"column":13,"offset":70558}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given the sorted array: ","position":{"start":{"line":2143,"column":1,"offset":70560},"end":{"line":2143,"column":25,"offset":70584}}},{"type":"text","value":"[","position":{"start":{"line":2143,"column":25,"offset":70584},"end":{"line":2143,"column":27,"offset":70586}}},{"type":"text","value":"-10,-3,0,5,9],","position":{"start":{"line":2143,"column":27,"offset":70586},"end":{"line":2143,"column":41,"offset":70600}}}],"position":{"start":{"line":2143,"column":1,"offset":70560},"end":{"line":2143,"column":41,"offset":70600}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"One possible answer is: ","position":{"start":{"line":2145,"column":1,"offset":70602},"end":{"line":2145,"column":25,"offset":70626}}},{"type":"text","value":"[","position":{"start":{"line":2145,"column":25,"offset":70626},"end":{"line":2145,"column":27,"offset":70628}}},{"type":"text","value":"0,-3,9,-10,null,5], which represents the following height balanced BST:","position":{"start":{"line":2145,"column":27,"offset":70628},"end":{"line":2145,"column":98,"offset":70699}}}],"position":{"start":{"line":2145,"column":1,"offset":70602},"end":{"line":2145,"column":98,"offset":70699}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"  0\n / \\\\\n"}],"position":{"start":{"line":2147,"column":1,"offset":70701},"end":{"line":2148,"column":10,"offset":70718}}}],"position":{"start":{"line":2147,"column":1,"offset":70701},"end":{"line":2148,"column":10,"offset":70718}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"-","position":{"start":{"line":2150,"column":1,"offset":70720},"end":{"line":2150,"column":3,"offset":70722}}},{"type":"text","value":"3 9\n/ /\n","position":{"start":{"line":2150,"column":3,"offset":70722},"end":{"line":2152,"column":1,"offset":70730}}},{"type":"text","value":"-","position":{"start":{"line":2152,"column":1,"offset":70730},"end":{"line":2152,"column":3,"offset":70732}}},{"type":"text","value":"10 5","position":{"start":{"line":2152,"column":3,"offset":70732},"end":{"line":2152,"column":7,"offset":70736}}}],"position":{"start":{"line":2150,"column":1,"offset":70720},"end":{"line":2152,"column":7,"offset":70736}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/"},"children":[{"type":"text","value":"Source","position":{"start":{"line":2154,"column":2,"offset":70739},"end":{"line":2154,"column":8,"offset":70745}}}],"position":{"start":{"line":2154,"column":1,"offset":70738},"end":{"line":2154,"column":84,"offset":70821}}},{"type":"text","value":"# Delete Node in a BST","position":{"start":{"line":2154,"column":84,"offset":70821},"end":{"line":2154,"column":106,"offset":70843}}}],"position":{"start":{"line":2154,"column":1,"offset":70738},"end":{"line":2154,"column":106,"offset":70843}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.","position":{"start":{"line":2156,"column":3,"offset":70847},"end":{"line":2156,"column":144,"offset":70988}}}],"position":{"start":{"line":2156,"column":3,"offset":70847},"end":{"line":2156,"column":144,"offset":70988}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2156,"column":1,"offset":70845},"end":{"line":2156,"column":144,"offset":70988}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.","position":{"start":{"line":2158,"column":1,"offset":70990},"end":{"line":2158,"column":157,"offset":71146}}}],"position":{"start":{"line":2158,"column":1,"offset":70990},"end":{"line":2158,"column":157,"offset":71146}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Basically, the deletion can be divided into two stages:","position":{"start":{"line":2160,"column":1,"offset":71148},"end":{"line":2160,"column":56,"offset":71203}}}],"position":{"start":{"line":2160,"column":1,"offset":71148},"end":{"line":2160,"column":56,"offset":71203}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Search for a node to remove.","position":{"start":{"line":2162,"column":5,"offset":71209},"end":{"line":2162,"column":33,"offset":71237}}}],"position":{"start":{"line":2162,"column":1,"offset":71205},"end":{"line":2162,"column":33,"offset":71237}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If the node is found, delete the node.","position":{"start":{"line":2163,"column":5,"offset":71242},"end":{"line":2163,"column":43,"offset":71280}}}],"position":{"start":{"line":2163,"column":1,"offset":71238},"end":{"line":2163,"column":43,"offset":71280}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2162,"column":1,"offset":71205},"end":{"line":2163,"column":43,"offset":71280}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Follow up:","position":{"start":{"line":2165,"column":3,"offset":71284},"end":{"line":2165,"column":13,"offset":71294}}}],"position":{"start":{"line":2165,"column":1,"offset":71282},"end":{"line":2165,"column":15,"offset":71296}}},{"type":"text","value":" Can you solve it with time complexity ","position":{"start":{"line":2165,"column":15,"offset":71296},"end":{"line":2165,"column":54,"offset":71335}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O(height of tree)"}],"position":{"start":{"line":2165,"column":54,"offset":71335},"end":{"line":2165,"column":73,"offset":71354}}},{"type":"text","value":"?","position":{"start":{"line":2165,"column":73,"offset":71354},"end":{"line":2165,"column":74,"offset":71355}}}],"position":{"start":{"line":2165,"column":1,"offset":71282},"end":{"line":2165,"column":74,"offset":71355}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":2167,"column":3,"offset":71359},"end":{"line":2167,"column":13,"offset":71369}}}],"position":{"start":{"line":2167,"column":1,"offset":71357},"end":{"line":2167,"column":15,"offset":71371}}}],"position":{"start":{"line":2167,"column":1,"offset":71357},"end":{"line":2167,"column":15,"offset":71371}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://assets.leetcode.com/uploads/2020/09/04/del_node_1.jpg","alt":null},"children":[],"position":{"start":{"line":2169,"column":1,"offset":71373},"end":{"line":2169,"column":67,"offset":71439}}}],"position":{"start":{"line":2169,"column":1,"offset":71373},"end":{"line":2169,"column":67,"offset":71439}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":2171,"column":3,"offset":71443},"end":{"line":2171,"column":9,"offset":71449}}}],"position":{"start":{"line":2171,"column":1,"offset":71441},"end":{"line":2171,"column":11,"offset":71451}}},{"type":"text","value":" root = ","position":{"start":{"line":2171,"column":11,"offset":71451},"end":{"line":2171,"column":19,"offset":71459}}},{"type":"text","value":"[","position":{"start":{"line":2171,"column":19,"offset":71459},"end":{"line":2171,"column":21,"offset":71461}}},{"type":"text","value":"5,3,6,2,4,null,7], key = 3\n","position":{"start":{"line":2171,"column":21,"offset":71461},"end":{"line":2172,"column":1,"offset":71488}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":2172,"column":3,"offset":71490},"end":{"line":2172,"column":10,"offset":71497}}}],"position":{"start":{"line":2172,"column":1,"offset":71488},"end":{"line":2172,"column":12,"offset":71499}}},{"type":"text","value":" ","position":{"start":{"line":2172,"column":12,"offset":71499},"end":{"line":2172,"column":13,"offset":71500}}},{"type":"text","value":"[","position":{"start":{"line":2172,"column":13,"offset":71500},"end":{"line":2172,"column":15,"offset":71502}}},{"type":"text","value":"5,4,6,2,null,null,7]\n","position":{"start":{"line":2172,"column":15,"offset":71502},"end":{"line":2173,"column":1,"offset":71523}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Explanation:","position":{"start":{"line":2173,"column":3,"offset":71525},"end":{"line":2173,"column":15,"offset":71537}}}],"position":{"start":{"line":2173,"column":1,"offset":71523},"end":{"line":2173,"column":17,"offset":71539}}},{"type":"text","value":" Given key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is ","position":{"start":{"line":2173,"column":17,"offset":71539},"end":{"line":2174,"column":21,"offset":71634}}},{"type":"text","value":"[","position":{"start":{"line":2174,"column":21,"offset":71634},"end":{"line":2174,"column":23,"offset":71636}}},{"type":"text","value":"5,4,6,2,null,null,7], shown in the above BST.\nPlease notice that another valid answer is ","position":{"start":{"line":2174,"column":23,"offset":71636},"end":{"line":2175,"column":44,"offset":71725}}},{"type":"text","value":"[","position":{"start":{"line":2175,"column":44,"offset":71725},"end":{"line":2175,"column":46,"offset":71727}}},{"type":"text","value":"5,2,6,null,4,null,7] and it's also accepted.\n","position":{"start":{"line":2175,"column":46,"offset":71727},"end":{"line":2176,"column":1,"offset":71772}}},{"type":"element","tagName":"img","properties":{"src":"https://assets.leetcode.com/uploads/2020/09/04/del_node_supp.jpg","alt":null},"children":[],"position":{"start":{"line":2176,"column":1,"offset":71772},"end":{"line":2176,"column":70,"offset":71841}}}],"position":{"start":{"line":2171,"column":1,"offset":71441},"end":{"line":2176,"column":70,"offset":71841}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":2178,"column":3,"offset":71845},"end":{"line":2178,"column":13,"offset":71855}}}],"position":{"start":{"line":2178,"column":1,"offset":71843},"end":{"line":2178,"column":15,"offset":71857}}}],"position":{"start":{"line":2178,"column":1,"offset":71843},"end":{"line":2178,"column":15,"offset":71857}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":2180,"column":3,"offset":71861},"end":{"line":2180,"column":9,"offset":71867}}}],"position":{"start":{"line":2180,"column":1,"offset":71859},"end":{"line":2180,"column":11,"offset":71869}}},{"type":"text","value":" root = ","position":{"start":{"line":2180,"column":11,"offset":71869},"end":{"line":2180,"column":19,"offset":71877}}},{"type":"text","value":"[","position":{"start":{"line":2180,"column":19,"offset":71877},"end":{"line":2180,"column":21,"offset":71879}}},{"type":"text","value":"5,3,6,2,4,null,7], key = 0\n","position":{"start":{"line":2180,"column":21,"offset":71879},"end":{"line":2181,"column":1,"offset":71906}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":2181,"column":3,"offset":71908},"end":{"line":2181,"column":10,"offset":71915}}}],"position":{"start":{"line":2181,"column":1,"offset":71906},"end":{"line":2181,"column":12,"offset":71917}}},{"type":"text","value":" ","position":{"start":{"line":2181,"column":12,"offset":71917},"end":{"line":2181,"column":13,"offset":71918}}},{"type":"text","value":"[","position":{"start":{"line":2181,"column":13,"offset":71918},"end":{"line":2181,"column":15,"offset":71920}}},{"type":"text","value":"5,3,6,2,4,null,7]\n","position":{"start":{"line":2181,"column":15,"offset":71920},"end":{"line":2182,"column":1,"offset":71938}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Explanation:","position":{"start":{"line":2182,"column":3,"offset":71940},"end":{"line":2182,"column":15,"offset":71952}}}],"position":{"start":{"line":2182,"column":1,"offset":71938},"end":{"line":2182,"column":17,"offset":71954}}},{"type":"text","value":" The tree does not contain a node with value = 0.","position":{"start":{"line":2182,"column":17,"offset":71954},"end":{"line":2182,"column":66,"offset":72003}}}],"position":{"start":{"line":2180,"column":1,"offset":71859},"end":{"line":2182,"column":66,"offset":72003}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 3:","position":{"start":{"line":2184,"column":3,"offset":72007},"end":{"line":2184,"column":13,"offset":72017}}}],"position":{"start":{"line":2184,"column":1,"offset":72005},"end":{"line":2184,"column":15,"offset":72019}}}],"position":{"start":{"line":2184,"column":1,"offset":72005},"end":{"line":2184,"column":15,"offset":72019}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":2186,"column":3,"offset":72023},"end":{"line":2186,"column":9,"offset":72029}}}],"position":{"start":{"line":2186,"column":1,"offset":72021},"end":{"line":2186,"column":11,"offset":72031}}},{"type":"text","value":" root = ","position":{"start":{"line":2186,"column":11,"offset":72031},"end":{"line":2186,"column":19,"offset":72039}}},{"type":"text","value":"[","position":{"start":{"line":2186,"column":19,"offset":72039},"end":{"line":2186,"column":21,"offset":72041}}},{"type":"text","value":"], key = 0\n","position":{"start":{"line":2186,"column":21,"offset":72041},"end":{"line":2187,"column":1,"offset":72052}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":2187,"column":3,"offset":72054},"end":{"line":2187,"column":10,"offset":72061}}}],"position":{"start":{"line":2187,"column":1,"offset":72052},"end":{"line":2187,"column":12,"offset":72063}}},{"type":"text","value":" ","position":{"start":{"line":2187,"column":12,"offset":72063},"end":{"line":2187,"column":13,"offset":72064}}},{"type":"text","value":"[","position":{"start":{"line":2187,"column":13,"offset":72064},"end":{"line":2187,"column":15,"offset":72066}}},{"type":"text","value":"]","position":{"start":{"line":2187,"column":15,"offset":72066},"end":{"line":2187,"column":16,"offset":72067}}}],"position":{"start":{"line":2186,"column":1,"offset":72021},"end":{"line":2187,"column":16,"offset":72067}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Constraints:","position":{"start":{"line":2189,"column":3,"offset":72071},"end":{"line":2189,"column":15,"offset":72083}}}],"position":{"start":{"line":2189,"column":1,"offset":72069},"end":{"line":2189,"column":17,"offset":72085}}}],"position":{"start":{"line":2189,"column":1,"offset":72069},"end":{"line":2189,"column":17,"offset":72085}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The number of nodes in the tree is in the range ","position":{"start":{"line":2191,"column":5,"offset":72091},"end":{"line":2191,"column":53,"offset":72139}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[0, 104]"}],"position":{"start":{"line":2191,"column":53,"offset":72139},"end":{"line":2191,"column":63,"offset":72149}}},{"type":"text","value":".","position":{"start":{"line":2191,"column":63,"offset":72149},"end":{"line":2191,"column":64,"offset":72150}}}],"position":{"start":{"line":2191,"column":1,"offset":72087},"end":{"line":2191,"column":64,"offset":72150}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-105 <= Node.val <= 105"}],"position":{"start":{"line":2192,"column":5,"offset":72155},"end":{"line":2192,"column":30,"offset":72180}}}],"position":{"start":{"line":2192,"column":1,"offset":72151},"end":{"line":2192,"column":30,"offset":72180}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Each node has a ","position":{"start":{"line":2193,"column":5,"offset":72185},"end":{"line":2193,"column":21,"offset":72201}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"unique","position":{"start":{"line":2193,"column":23,"offset":72203},"end":{"line":2193,"column":29,"offset":72209}}}],"position":{"start":{"line":2193,"column":21,"offset":72201},"end":{"line":2193,"column":31,"offset":72211}}},{"type":"text","value":" value.","position":{"start":{"line":2193,"column":31,"offset":72211},"end":{"line":2193,"column":38,"offset":72218}}}],"position":{"start":{"line":2193,"column":1,"offset":72181},"end":{"line":2193,"column":38,"offset":72218}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"root"}],"position":{"start":{"line":2194,"column":5,"offset":72223},"end":{"line":2194,"column":11,"offset":72229}}},{"type":"text","value":" is a valid binary search tree.","position":{"start":{"line":2194,"column":11,"offset":72229},"end":{"line":2194,"column":42,"offset":72260}}}],"position":{"start":{"line":2194,"column":1,"offset":72219},"end":{"line":2194,"column":42,"offset":72260}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-105 <= key <= 105"}],"position":{"start":{"line":2195,"column":5,"offset":72265},"end":{"line":2195,"column":25,"offset":72285}}}],"position":{"start":{"line":2195,"column":1,"offset":72261},"end":{"line":2195,"column":25,"offset":72285}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2191,"column":1,"offset":72087},"end":{"line":2195,"column":25,"offset":72285}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/delete-node-in-a-bst/"},"children":[{"type":"text","value":"Source","position":{"start":{"line":2197,"column":2,"offset":72288},"end":{"line":2197,"column":8,"offset":72294}}}],"position":{"start":{"line":2197,"column":1,"offset":72287},"end":{"line":2197,"column":62,"offset":72348}}},{"type":"element","tagName":"img","properties":{"src":"https://github.com/everthis/leetcode-js/blob/master/images/meeting-room-ii-0.jpg","alt":"alt text","title":"meeting-room-ii"},"children":[],"position":{"start":{"line":2197,"column":62,"offset":72348},"end":{"line":2197,"column":173,"offset":72459}}},{"type":"text","value":"\n","position":{"start":{"line":2197,"column":173,"offset":72459},"end":{"line":2198,"column":1,"offset":72460}}},{"type":"element","tagName":"img","properties":{"src":"https://github.com/everthis/leetcode-js/blob/master/images/meeting-room-ii-1.jpg","alt":"alt text","title":"meeting-room-ii"},"children":[],"position":{"start":{"line":2198,"column":1,"offset":72460},"end":{"line":2198,"column":112,"offset":72571}}}],"position":{"start":{"line":2197,"column":1,"offset":72287},"end":{"line":2198,"column":112,"offset":72571}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number[][]} intervals\n * @return {number}\n */\nconst minMeetingRooms = function (intervals) {\n    const len = intervals.length;\n    const starts = new Array(len);\n    const ends = new Array(len);\n    for (let i = 0; i < len; i++) {\n        starts[i] = intervals[i][0];\n        ends[i] = intervals[i][1];\n    }\n    starts.sort((a, b) => a - b);\n    ends.sort((a, b) => a - b);\n    let rooms = 0;\n    let endsIdx = 0;\n    for (let i = 0; i < len; i++) {\n        if (starts[i] < ends[endsIdx]) rooms++;\n        else endsIdx++;\n    }\n    return rooms;\n};\n"}],"position":{"start":{"line":2200,"column":1,"offset":72573},"end":{"line":2223,"column":4,"offset":73147}}}],"position":{"start":{"line":2200,"column":1,"offset":72573},"end":{"line":2223,"column":4,"offset":73147}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#-"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":2225,"column":2,"offset":73150},"end":{"line":2225,"column":142,"offset":73290}}}],"position":{"start":{"line":2225,"column":1,"offset":73149},"end":{"line":2225,"column":147,"offset":73295}}}],"position":{"start":{"line":2225,"column":1,"offset":73149},"end":{"line":2225,"column":147,"offset":73295}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2226,"column":1,"offset":73296}}}}