{"expireTime":9007200908525411000,"key":"transformer-remark-markdown-ast-20d39fd0bb0f6e6397f6ca26a1aa1dbc--","val":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Gist Archive","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":16,"offset":16},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":16,"offset":16},"indent":[]}},{"type":"html","value":"<h2>Gist Archive</h2>","position":{"start":{"line":4,"column":1,"offset":18},"end":{"line":4,"column":22,"offset":39},"indent":[]}},{"type":"html","value":"<iframe style=\"resize:both; overflow:scroll;\"  sandbox=\"allow-scripts\" style=\"resize:both; overflow:scroll;\"    src=\"https://bgoonzgist.netlify.app/\" height=\"800px\" width=\"1000px\" scrolling=\"yes\"   frameborder=\"yes\" loading=\"lazy\"  allowfullscreen=\"true\"  frameborder=\"0\" >\n</iframe>\n<br>","position":{"start":{"line":6,"column":1,"offset":41},"end":{"line":8,"column":5,"offset":329},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":10,"column":1,"offset":331},"end":{"line":10,"column":5,"offset":335},"indent":[]}},{"type":"html","value":"<br>\n<br>\n<br>\n<br>","position":{"start":{"line":12,"column":1,"offset":337},"end":{"line":15,"column":5,"offset":356},"indent":[1,1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":17,"column":1,"offset":358},"end":{"line":17,"column":5,"offset":362},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":19,"column":1,"offset":364},"end":{"line":19,"column":4,"offset":367},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Featured Gists:","position":{"start":{"line":21,"column":4,"offset":372},"end":{"line":21,"column":19,"offset":387},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":369},"end":{"line":21,"column":19,"offset":387},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const Promise = require('bluebird');\nconst fs = Promise.promisifyAll(require('fs'));\nconst crypto = require('crypto');\nconst path = require('path');\nconst pathA = '.';\nconst pathB = '/path/to/the/directory/you/want/to/compare/it/to';\nlet hashes = [];\nfunction hashDirIn(folder) {\n    var pathPromiseA = fs\n        .readdirAsync(folder)\n        .map(function (fileName) {\n            var workPath = path.join(folder, fileName);\n            var statPromise = fs.statAsync(workPath);\n            return Promise.join(statPromise, fileName, function (statPromise, fileName) {\n                if (statPromise.isFile()) {\n                    function makeStream(file, callback) {\n                        var result = fs.createReadStream(workPath);\n                        return callback(result);\n                    }\n                    function process(stream) {\n                        var hash = crypto.createHash('md5');\n                        return new Promise(function (resolve, reject) {\n                            stream.on('data', function updateProcess(chunk) {\n                                hash.update(chunk, 'utf8');\n                            });\n                            stream.on('end', resolve);\n                        }).then(function publish() {\n                            var digest = hash.digest('hex');\n                            hashes.push({ digest: digest, path: workPath });\n                        });\n                    }\n                    return makeStream(fileName, process);\n                }\n            });\n        })\n        .then(function () {\n            if (i == 1) {\n                hashes.sort(function (a, b) {\n                    if (a.digest < b.digest) {\n                        return -1;\n                    }\n                    if (a.digest > b.digest) {\n                        return 1;\n                    }\n                    return 0;\n                });\n                var dupe = 1;\n                hashes.map(function (obj, index) {\n                    if (index - 1 >= 0) {\n                        if (obj.digest == hashes[index - 1].digest) {\n                            console.log('Dupe ' + dupe + ' found:');\n                            console.log(obj.path);\n                            console.log('Equal to:');\n                            console.log(hashes[index - 1].path + '\\n');\n                            dupe++;\n                        }\n                    }\n                });\n            }\n            i++;\n        });\n}\nvar i = 0;\nhashDirIn(pathA);\nhashDirIn(pathB);","position":{"start":{"line":23,"column":1,"offset":389},"end":{"line":89,"column":4,"offset":2951},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":91,"column":1,"offset":2953},"end":{"line":91,"column":4,"offset":2956},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":93,"column":1,"offset":2958},"end":{"line":93,"column":4,"offset":2961},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"will replace any spaces in file names with an underscore!","position":{"start":{"line":95,"column":3,"offset":2965},"end":{"line":95,"column":60,"offset":3022},"indent":[]}}],"position":{"start":{"line":95,"column":3,"offset":2965},"end":{"line":95,"column":60,"offset":3022},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":2963},"end":{"line":95,"column":60,"offset":3022},"indent":[]}},{"type":"code","lang":"sh","meta":null,"value":" for file in *; do mv \"$file\" `echo $file | tr ' ' '_'` ; done\n  ## TAKING IT A STEP FURTHER:\n # Let's do it recursivley:\n  function RecurseDirs ()\n{\n    oldIFS=$IFS\n    IFS=$'\\n'\n    for f in \"$@\"\n    do\n  # YOUR CODE HERE!\n\n[![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png)]\n\nfor file in \\*; do mv \"$file\" `echo $file | tr ' ' '_'` ; done\n        if [[ -d \"${f}\" ]]; then\ncd \"${f}\"\n            RecurseDirs $(ls -1 \".\")\n            cd ..\n        fi\n    done\n    IFS=$oldIFS\n}\nRecurseDirs \"./\"","position":{"start":{"line":97,"column":1,"offset":3024},"end":{"line":123,"column":4,"offset":3621},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":125,"column":1,"offset":3623},"end":{"line":125,"column":4,"offset":3626},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Copy to clipboard jQuerry","position":{"start":{"line":127,"column":5,"offset":3632},"end":{"line":127,"column":30,"offset":3657},"indent":[]}}],"position":{"start":{"line":127,"column":1,"offset":3628},"end":{"line":127,"column":30,"offset":3657},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Language: Javascript/Jquery","position":{"start":{"line":129,"column":3,"offset":3661},"end":{"line":129,"column":30,"offset":3688},"indent":[]}}],"position":{"start":{"line":129,"column":3,"offset":3661},"end":{"line":129,"column":30,"offset":3688},"indent":[]}}],"position":{"start":{"line":129,"column":1,"offset":3659},"end":{"line":129,"column":30,"offset":3688},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"In combination with the script tag : ","position":{"start":{"line":131,"column":3,"offset":3692},"end":{"line":131,"column":40,"offset":3729},"indent":[]}},{"type":"html","value":"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\">","position":{"start":{"line":131,"column":40,"offset":3729},"end":{"line":131,"column":119,"offset":3808},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":131,"column":119,"offset":3808},"end":{"line":132,"column":1,"offset":3809},"indent":[1]}},{"type":"html","value":"</script>","position":{"start":{"line":132,"column":1,"offset":3809},"end":{"line":132,"column":10,"offset":3818},"indent":[]}},{"type":"text","value":" , this snippet will add a copy to clipboard button to all of your embedded ","position":{"start":{"line":132,"column":10,"offset":3818},"end":{"line":132,"column":86,"offset":3894},"indent":[]}},{"type":"html","value":"<code>","position":{"start":{"line":132,"column":86,"offset":3894},"end":{"line":132,"column":92,"offset":3900},"indent":[]}},{"type":"text","value":" blocks.","position":{"start":{"line":132,"column":92,"offset":3900},"end":{"line":132,"column":100,"offset":3908},"indent":[]}}],"position":{"start":{"line":131,"column":3,"offset":3692},"end":{"line":132,"column":100,"offset":3908},"indent":[1]}}],"position":{"start":{"line":131,"column":1,"offset":3690},"end":{"line":132,"column":100,"offset":3908},"indent":[1]}},{"type":"code","lang":"js","meta":null,"value":"$(document).ready(function () {\n    $('code, pre').append('<span class=\"command-copy\" >\n<i class=\"fa fa-clipboard\" aria-hidden=\"true\">\n</i>\n</span>');\n    $('code span.command-copy').click(function (e) {\n        var text = $(this).parent().text().trim(); //.text();\n        var copyHex = document.createElement('input');\n        copyHex.value = text;\n        document.body.appendChild(copyHex);\n        copyHex.select();\n        document.execCommand('copy');\n        console.log(copyHex.value);\n        document.body.removeChild(copyHex);\n    });\n\n    $('pre span.command-copy').click(function (e) {\n        var text = $(this).parent().text().trim();\n        var copyHex = document.createElement('input');\n        copyHex.value = text;\n        document.body.appendChild(copyHex);\n        copyHex.select();\n        document.execCommand('copy');\n        console.log(copyHex.value);\n        document.body.removeChild(copyHex);\n    });\n});","position":{"start":{"line":134,"column":1,"offset":3910},"end":{"line":162,"column":4,"offset":4855},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":164,"column":1,"offset":4857},"end":{"line":164,"column":4,"offset":4860},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Append Files in PWD","position":{"start":{"line":166,"column":5,"offset":4866},"end":{"line":166,"column":24,"offset":4885},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":4862},"end":{"line":166,"column":24,"offset":4885},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//APPEND-DIR.js\nconst fs = require('fs');\nlet cat = require('child_process').execSync('cat *').toString('UTF-8');\nfs.writeFile('output.md', cat, (err) => {\n    if (err) throw err;\n});","position":{"start":{"line":168,"column":1,"offset":4887},"end":{"line":175,"column":4,"offset":5080},"indent":[1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":177,"column":1,"offset":5082},"end":{"line":177,"column":4,"offset":5085},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"doesUserFrequentStarbucks.js","position":{"start":{"line":179,"column":5,"offset":5091},"end":{"line":179,"column":33,"offset":5119},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":5087},"end":{"line":179,"column":33,"offset":5119},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const isAppleDevice = /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nconsole.log(isAppleDevice);\n// Result: will return true if user is on an Apple device","position":{"start":{"line":181,"column":1,"offset":5121},"end":{"line":185,"column":4,"offset":5287},"indent":[1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":187,"column":1,"offset":5289},"end":{"line":187,"column":4,"offset":5292},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"arr-intersection.js","position":{"start":{"line":189,"column":5,"offset":5298},"end":{"line":189,"column":24,"offset":5317},"indent":[]}}],"position":{"start":{"line":189,"column":1,"offset":5294},"end":{"line":189,"column":24,"offset":5317},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"/*\n function named intersection(firstArr) that takes in an array and\nreturns a function.\nWhen the function returned by intersection is invoked\npassing in an array (secondArr) it returns a new array containing the elements\ncommon to both firstArr and secondArr.\n*/\nfunction intersection(firstArr) {\n    return (secondArr) => {\n        let common = [];\n        for (let i = 0; i < firstArr.length; i++) {\n            let el = firstArr[i];\n            if (secondArr.indexOf(el) > -1) {\n                common.push(el);\n            }\n        }\n        return common;\n    };\n}\nlet abc = intersection(['a', 'b', 'c']); // returns a function\nconsole.log(abc(['b', 'd', 'c'])); // returns [ 'b', 'c' ]\n\nlet fame = intersection(['f', 'a', 'm', 'e']); // returns a function\nconsole.log(fame(['a', 'f', 'z', 'b'])); // returns [ 'f', 'a' ]","position":{"start":{"line":191,"column":1,"offset":5319},"end":{"line":216,"column":4,"offset":6157},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":218,"column":1,"offset":6159},"end":{"line":218,"column":4,"offset":6162},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"arr-of-cum-partial-sums.js","position":{"start":{"line":220,"column":5,"offset":6168},"end":{"line":220,"column":31,"offset":6194},"indent":[]}}],"position":{"start":{"line":220,"column":1,"offset":6164},"end":{"line":220,"column":31,"offset":6194},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"/*\nFirst is recurSum(arr, start) which returns the sum of the elements of arr from the index start till the very end.\nSecond is partrecurSum() that recursively concatenates the required sum into an array and when we reach the end of the array, it returns the concatenated array.\n*/\n//arr.length -1 = 5\n//                   arr   [    1,    7,    12,   6,    5,    10   ]\n//                   ind   [    0     1     2     3     4      5   ]\n//                              ↟                              ↟\n//                            start                           end\n\nfunction recurSum(arr, start = 0, sum = 0) {\n    if (start < arr.length) {\n        return recurSum(arr, start + 1, sum + arr[start]);\n    }\n    return sum;\n}\n\nfunction rPartSumsArr(arr, partSum = [], start = 0, end = arr.length - 1) {\n    if (start <= end) {\n        return rPartSumsArr(arr, partSum.concat(recurSum(arr, start)), ++start, end);\n    }\n    return partSum.reverse();\n}\n\nconsole.log('------------------------------------------------rPartSumArr------------------------------------------------');\nconsole.log('rPartSumsArr(arr)=[ 1, 1, 5, 2, 6, 10 ]: ', rPartSumsArr(arr));\nconsole.log('rPartSumsArr(arr1)=[ 1, 7, 12, 6, 5, 10 ]: ', rPartSumsArr(arr1));\nconsole.log('------------------------------------------------rPartSumArr------------------------------------------------');\n/*\n------------------------------------------------rPartSumArr------------------------------------------------\nrPartSumsArr(arr)=[ 1, 1, 5, 2, 6, 10 ]:  [ 10, 16, 18, 23, 24, 25 ]\nrPartSumsArr(arr1)=[ 1, 7, 12, 6, 5, 10 ]:  [ 10, 15, 21, 33, 40, 41 ]\n------------------------------------------------rPartSumArr------------------------------------------------\n*/","position":{"start":{"line":222,"column":1,"offset":6196},"end":{"line":257,"column":4,"offset":7928},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":259,"column":1,"offset":7930},"end":{"line":259,"column":4,"offset":7933},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"camel2Kabab.js","position":{"start":{"line":261,"column":5,"offset":7939},"end":{"line":261,"column":19,"offset":7953},"indent":[]}}],"position":{"start":{"line":261,"column":1,"offset":7935},"end":{"line":261,"column":19,"offset":7953},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":263,"column":1,"offset":7955},"end":{"line":263,"column":4,"offset":7958},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"function camelToKebab(value) {\n    return value.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}","position":{"start":{"line":265,"column":1,"offset":7960},"end":{"line":269,"column":4,"offset":8070},"indent":[1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":271,"column":1,"offset":8072},"end":{"line":271,"column":4,"offset":8075},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"camelCase.js","position":{"start":{"line":273,"column":5,"offset":8081},"end":{"line":273,"column":17,"offset":8093},"indent":[]}}],"position":{"start":{"line":273,"column":1,"offset":8077},"end":{"line":273,"column":17,"offset":8093},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":275,"column":1,"offset":8095},"end":{"line":275,"column":4,"offset":8098},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"function camel(str) {\n    return str.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function (match, index) {\n        if (+match === 0) return ''; // or if (/\\s+/.test(match)) for white spaces\n        return index === 0 ? match.toLowerCase() : match.toUpperCase();\n    });\n}","position":{"start":{"line":277,"column":1,"offset":8100},"end":{"line":284,"column":4,"offset":8372},"indent":[1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":286,"column":1,"offset":8374},"end":{"line":286,"column":4,"offset":8377},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"concatLinkedLists.js","position":{"start":{"line":288,"column":5,"offset":8383},"end":{"line":288,"column":25,"offset":8403},"indent":[]}}],"position":{"start":{"line":288,"column":1,"offset":8379},"end":{"line":288,"column":25,"offset":8403},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":290,"column":1,"offset":8405},"end":{"line":290,"column":4,"offset":8408},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"function addTwoNumbers(l1, l2) {\n    let result = new ListNode(0);\n    let currentNode = result;\n    let carryOver = 0;\n    while (l1 != null || l2 != null) {\n        let v1 = 0;\n        let v2 = 0;\n        if (l1 != null) v1 = l1.val;\n        if (l2 != null) v2 = l2.val;\n        let sum = v1 + v2 + carryOver;\n        carryOver = Math.floor(sum / 10);\n        sum = sum % 10;\n        currentNode.next = new ListNode(sum);\n        currentNode = currentNode.next;\n        if (l1 != null) l1 = l1.next;\n        if (l2 != null) l2 = l2.next;\n    }\n    if (carryOver > 0) {\n        currentNode.next = new ListNode(carryOver);\n    }\n    return result.next;\n}","position":{"start":{"line":292,"column":1,"offset":8410},"end":{"line":315,"column":4,"offset":9074},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":317,"column":1,"offset":9076},"end":{"line":317,"column":4,"offset":9079},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"fast-is-alpha-numeric.js","position":{"start":{"line":319,"column":5,"offset":9085},"end":{"line":319,"column":29,"offset":9109},"indent":[]}}],"position":{"start":{"line":319,"column":1,"offset":9081},"end":{"line":319,"column":29,"offset":9109},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Function to test if a character is alpha numeric that is faster than a regular\n//expression in JavaScript\n\nlet isAlphaNumeric = (char) => {\n    char = char.toString();\n    let id = char.charCodeAt(0);\n    if (\n        !(id > 47 && id < 58) && // if not numeric(0-9)\n        !(id > 64 && id < 91) && // if not letter(A-Z)\n        !(id > 96 && id < 123) // if not letter(a-z)\n    ) {\n        return false;\n    }\n    return true;\n};\n\nconsole.log(isAlphaNumeric('A')); //true\nconsole.log(isAlphaNumeric(2)); //true\nconsole.log(isAlphaNumeric('z')); //true\nconsole.log(isAlphaNumeric(' ')); //false\nconsole.log(isAlphaNumeric('!')); //false","position":{"start":{"line":321,"column":1,"offset":9111},"end":{"line":343,"column":4,"offset":9758},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":345,"column":1,"offset":9760},"end":{"line":345,"column":4,"offset":9763},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"find-n-replace.js","position":{"start":{"line":347,"column":5,"offset":9769},"end":{"line":347,"column":22,"offset":9786},"indent":[]}}],"position":{"start":{"line":347,"column":1,"offset":9765},"end":{"line":347,"column":22,"offset":9786},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":349,"column":1,"offset":9788},"end":{"line":349,"column":4,"offset":9791},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"function replaceWords(str, before, after) {\n    if (/^[A-Z]/.test(before)) {\n        after = after[0].toUpperCase() + after.substring(1);\n    } else {\n        after = after[0].toLowerCase() + after.substring(1);\n    }\n    return str.replace(before, after);\n}\nconsole.log(replaceWords('Let us go to the store', 'store', 'mall')); //\"Let us go to the mall\"\nconsole.log(replaceWords('He is Sleeping on the couch', 'Sleeping', 'sitting')); //\"He is Sitting on the couch\"\nconsole.log(replaceWords('His name is Tom', 'Tom', 'john'));\n//\"His name is John\"","position":{"start":{"line":351,"column":1,"offset":9793},"end":{"line":364,"column":4,"offset":10351},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":366,"column":1,"offset":10353},"end":{"line":366,"column":4,"offset":10356},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"flatten-arr.js","position":{"start":{"line":368,"column":5,"offset":10362},"end":{"line":368,"column":19,"offset":10376},"indent":[]}}],"position":{"start":{"line":368,"column":1,"offset":10358},"end":{"line":368,"column":19,"offset":10376},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"/*Simple Function to flatten an array into a single layer */\nconst flatten = (array) => array.reduce((accum, ele) => accum.concat(Array.isArray(ele) ? flatten(ele) : ele), []);","position":{"start":{"line":370,"column":1,"offset":10378},"end":{"line":373,"column":4,"offset":10564},"indent":[1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":375,"column":1,"offset":10566},"end":{"line":375,"column":4,"offset":10569},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"isWeekDay.js","position":{"start":{"line":377,"column":5,"offset":10575},"end":{"line":377,"column":17,"offset":10587},"indent":[]}}],"position":{"start":{"line":377,"column":1,"offset":10571},"end":{"line":377,"column":17,"offset":10587},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const isWeekday = (date) => date.getDay() % 6 !== 0;\nconsole.log(isWeekday(new Date(2021, 0, 11)));\n// Result: true (Monday)\nconsole.log(isWeekday(new Date(2021, 0, 10)));\n// Result: false (Sunday)","position":{"start":{"line":379,"column":1,"offset":10589},"end":{"line":385,"column":4,"offset":10796},"indent":[1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":387,"column":1,"offset":10798},"end":{"line":387,"column":4,"offset":10801},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"longest-common-prefix.js","position":{"start":{"line":389,"column":5,"offset":10807},"end":{"line":389,"column":29,"offset":10831},"indent":[]}}],"position":{"start":{"line":389,"column":1,"offset":10803},"end":{"line":389,"column":29,"offset":10831},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":391,"column":1,"offset":10833},"end":{"line":391,"column":4,"offset":10836},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"function longestCommonPrefix(strs) {\n    let prefix = '';\n    if (strs.length === 0) return prefix;\n    for (let i = 0; i < strs[0].length; i++) {\n        const character = strs[0][i];\n        for (let j = 0; j < strs.length; j++) {\n            if (strs[j][i] !== character) return prefix;\n        }\n        prefix = prefix + character;\n    }\n    return prefix;\n}","position":{"start":{"line":393,"column":1,"offset":10838},"end":{"line":406,"column":4,"offset":11211},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":407,"column":1,"offset":11212}}}}