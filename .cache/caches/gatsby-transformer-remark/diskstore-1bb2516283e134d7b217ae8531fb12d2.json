{"expireTime":9007200908527773000,"key":"transformer-remark-markdown-ast-252ccaba2e084ac97c899ee4509197dd--","val":{"type":"root","children":[{"type":"html","value":"<!--StartFragment-->","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":21,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"1. Array","position":{"start":{"line":4,"column":5,"offset":27},"end":{"line":4,"column":13,"offset":35},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":23},"end":{"line":4,"column":13,"offset":35},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The most basic of all data structures, an array stores data in memory for later use. Each array has a fixed number of cells decided on its creation, and each cell has a corresponding numeric index used to select its data. Whenever you’d like to use the array, all you need are the desired indices, and you can access any of the data within.","position":{"start":{"line":6,"column":1,"offset":37},"end":{"line":6,"column":341,"offset":377},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":37},"end":{"line":6,"column":341,"offset":377},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://camo.githubusercontent.com/ab40ae120edb6f03676fd5bd971feb1f59801ee43d90464c5f3c0ac7f5dc4c25/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f35313633353033373435373631323830","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/ab40ae120edb6f03676fd5bd971feb1f59801ee43d90464c5f3c0ac7f5dc4c25/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f35313633353033373435373631323830","alt":null,"position":{"start":{"line":8,"column":2,"offset":380},"end":{"line":8,"column":271,"offset":649},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":379},"end":{"line":8,"column":538,"offset":916},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":379},"end":{"line":8,"column":538,"offset":916},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Advantages","position":{"start":{"line":10,"column":1,"offset":918},"end":{"line":10,"column":11,"offset":928},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":918},"end":{"line":10,"column":11,"offset":928},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Simple to create and use.","position":{"start":{"line":12,"column":3,"offset":932},"end":{"line":12,"column":28,"offset":957},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":932},"end":{"line":12,"column":28,"offset":957},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":930},"end":{"line":12,"column":28,"offset":957},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Foundational building block for complex data structures","position":{"start":{"line":13,"column":3,"offset":960},"end":{"line":13,"column":58,"offset":1015},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":960},"end":{"line":13,"column":58,"offset":1015},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":958},"end":{"line":13,"column":58,"offset":1015},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":930},"end":{"line":13,"column":58,"offset":1015},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":15,"column":1,"offset":1017},"end":{"line":15,"column":14,"offset":1030},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1017},"end":{"line":15,"column":14,"offset":1030},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Fixed size","position":{"start":{"line":17,"column":3,"offset":1034},"end":{"line":17,"column":13,"offset":1044},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":1034},"end":{"line":17,"column":13,"offset":1044},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1032},"end":{"line":17,"column":13,"offset":1044},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Expensive to insert/delete or resequence values","position":{"start":{"line":18,"column":3,"offset":1047},"end":{"line":18,"column":50,"offset":1094},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":1047},"end":{"line":18,"column":50,"offset":1094},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1045},"end":{"line":18,"column":50,"offset":1094},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Inefficient to sort","position":{"start":{"line":19,"column":3,"offset":1097},"end":{"line":19,"column":22,"offset":1116},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":1097},"end":{"line":19,"column":22,"offset":1116},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1095},"end":{"line":19,"column":22,"offset":1116},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1032},"end":{"line":19,"column":22,"offset":1116},"indent":[1,1]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications","children":[],"position":{"start":{"line":21,"column":6,"offset":1123},"end":{"line":21,"column":104,"offset":1221},"indent":[]}},{"type":"text","value":"Applications","position":{"start":{"line":21,"column":104,"offset":1221},"end":{"line":21,"column":116,"offset":1233},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1118},"end":{"line":21,"column":116,"offset":1233},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Basic spreadsheets","position":{"start":{"line":23,"column":3,"offset":1237},"end":{"line":23,"column":21,"offset":1255},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":1237},"end":{"line":23,"column":21,"offset":1255},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1235},"end":{"line":23,"column":21,"offset":1255},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Within complex structures such as hash tables","position":{"start":{"line":24,"column":3,"offset":1258},"end":{"line":24,"column":48,"offset":1303},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":1258},"end":{"line":24,"column":48,"offset":1303},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1256},"end":{"line":24,"column":48,"offset":1303},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1235},"end":{"line":24,"column":48,"offset":1303},"indent":[1]}},{"type":"paragraph","children":[{"type":"break","position":{"start":{"line":26,"column":1,"offset":1305},"end":{"line":27,"column":1,"offset":1307},"indent":[1]}},{"type":"text","value":"\\","position":{"start":{"line":27,"column":1,"offset":1307},"end":{"line":27,"column":2,"offset":1308},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1305},"end":{"line":27,"column":2,"offset":1308},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#2-queues","children":[],"position":{"start":{"line":29,"column":5,"offset":1314},"end":{"line":29,"column":99,"offset":1408},"indent":[]}},{"type":"text","value":"2. Queues","position":{"start":{"line":29,"column":99,"offset":1408},"end":{"line":29,"column":108,"offset":1417},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1310},"end":{"line":29,"column":108,"offset":1417},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Queues are conceptually similar to stacks; both are sequential structures, but queues process elements in the order they were entered rather than the most recent element.","position":{"start":{"line":31,"column":1,"offset":1419},"end":{"line":31,"column":171,"offset":1589},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1419},"end":{"line":31,"column":171,"offset":1589},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As a result, queues can be thought of as a FIFO (First In, First Out) version of stacks. These are helpful as a buffer for requests, storing each request in the order it was received until it can be processed.","position":{"start":{"line":33,"column":1,"offset":1591},"end":{"line":33,"column":210,"offset":1800},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1591},"end":{"line":33,"column":210,"offset":1800},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://camo.githubusercontent.com/0e19efa8b7251690191848de4d8538c36f7619aa1a69b46a306b16b19274edb0/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34363038323536343133353332313630","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/0e19efa8b7251690191848de4d8538c36f7619aa1a69b46a306b16b19274edb0/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34363038323536343133353332313630","alt":null,"position":{"start":{"line":35,"column":2,"offset":1803},"end":{"line":35,"column":271,"offset":2072},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1802},"end":{"line":35,"column":538,"offset":2339},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1802},"end":{"line":35,"column":538,"offset":2339},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For a visual, consider a single-lane tunnel: the first car to enter is the first car to exit. If other cars should wish to exit, but the first stops, all cars will have to wait for the first to exit before they can proceed.","position":{"start":{"line":37,"column":1,"offset":2341},"end":{"line":37,"column":224,"offset":2564},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":2341},"end":{"line":37,"column":224,"offset":2564},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Advantages","position":{"start":{"line":39,"column":1,"offset":2566},"end":{"line":39,"column":11,"offset":2576},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":2566},"end":{"line":39,"column":11,"offset":2576},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Dynamic size","position":{"start":{"line":41,"column":3,"offset":2580},"end":{"line":41,"column":15,"offset":2592},"indent":[]}}],"position":{"start":{"line":41,"column":3,"offset":2580},"end":{"line":41,"column":15,"offset":2592},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":2578},"end":{"line":41,"column":15,"offset":2592},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Orders data in the order it was received","position":{"start":{"line":42,"column":3,"offset":2595},"end":{"line":42,"column":43,"offset":2635},"indent":[]}}],"position":{"start":{"line":42,"column":3,"offset":2595},"end":{"line":42,"column":43,"offset":2635},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":2593},"end":{"line":42,"column":43,"offset":2635},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Low runtime","position":{"start":{"line":43,"column":3,"offset":2638},"end":{"line":43,"column":14,"offset":2649},"indent":[]}}],"position":{"start":{"line":43,"column":3,"offset":2638},"end":{"line":43,"column":14,"offset":2649},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":2636},"end":{"line":43,"column":14,"offset":2649},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":2578},"end":{"line":43,"column":14,"offset":2649},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":45,"column":1,"offset":2651},"end":{"line":45,"column":14,"offset":2664},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":2651},"end":{"line":45,"column":14,"offset":2664},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Can only retrieve the oldest element","position":{"start":{"line":47,"column":3,"offset":2668},"end":{"line":47,"column":39,"offset":2704},"indent":[]}}],"position":{"start":{"line":47,"column":3,"offset":2668},"end":{"line":47,"column":39,"offset":2704},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":2666},"end":{"line":47,"column":39,"offset":2704},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":2666},"end":{"line":47,"column":39,"offset":2704},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications-1","children":[],"position":{"start":{"line":49,"column":6,"offset":2711},"end":{"line":49,"column":106,"offset":2811},"indent":[]}},{"type":"text","value":"Applications","position":{"start":{"line":49,"column":106,"offset":2811},"end":{"line":49,"column":118,"offset":2823},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":2706},"end":{"line":49,"column":118,"offset":2823},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Effective as a buffer when receiving frequent data","position":{"start":{"line":51,"column":3,"offset":2827},"end":{"line":51,"column":53,"offset":2877},"indent":[]}}],"position":{"start":{"line":51,"column":3,"offset":2827},"end":{"line":51,"column":53,"offset":2877},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":2825},"end":{"line":51,"column":53,"offset":2877},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Convenient way to store order-sensitive data such as stored voicemails","position":{"start":{"line":52,"column":3,"offset":2880},"end":{"line":52,"column":73,"offset":2950},"indent":[]}}],"position":{"start":{"line":52,"column":3,"offset":2880},"end":{"line":52,"column":73,"offset":2950},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":2878},"end":{"line":52,"column":73,"offset":2950},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Ensures the oldest data is processed first","position":{"start":{"line":53,"column":3,"offset":2953},"end":{"line":53,"column":45,"offset":2995},"indent":[]}}],"position":{"start":{"line":53,"column":3,"offset":2953},"end":{"line":53,"column":45,"offset":2995},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":2951},"end":{"line":53,"column":45,"offset":2995},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":2825},"end":{"line":53,"column":45,"offset":2995},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"break","position":{"start":{"line":55,"column":1,"offset":2997},"end":{"line":56,"column":1,"offset":2999},"indent":[1]}},{"type":"text","value":"\\","position":{"start":{"line":56,"column":1,"offset":2999},"end":{"line":56,"column":2,"offset":3000},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":2997},"end":{"line":56,"column":2,"offset":3000},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#3-linked-list","children":[],"position":{"start":{"line":58,"column":5,"offset":3006},"end":{"line":58,"column":104,"offset":3105},"indent":[]}},{"type":"text","value":"3. Linked List","position":{"start":{"line":58,"column":104,"offset":3105},"end":{"line":58,"column":118,"offset":3119},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":3002},"end":{"line":58,"column":118,"offset":3119},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Linked lists are a data structure which, unlike the previous three, does not use physical placement of data in memory. This means that, rather than indexes or positions, linked lists use a referencing system: elements are stored in nodes that contain a pointer to the next node, repeating until all nodes are linked.","position":{"start":{"line":60,"column":1,"offset":3121},"end":{"line":60,"column":317,"offset":3437},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":3121},"end":{"line":60,"column":317,"offset":3437},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This system allows efficient insertion and removal of items without the need for reorganization.","position":{"start":{"line":62,"column":1,"offset":3439},"end":{"line":62,"column":97,"offset":3535},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":3439},"end":{"line":62,"column":97,"offset":3535},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://camo.githubusercontent.com/c5b4f3b037de92da7118b3bbf05e9485a28507729cf9d9cffc2c17f37189971f/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34353336323436353035333038313630","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/c5b4f3b037de92da7118b3bbf05e9485a28507729cf9d9cffc2c17f37189971f/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34353336323436353035333038313630","alt":null,"position":{"start":{"line":64,"column":2,"offset":3538},"end":{"line":64,"column":271,"offset":3807},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":3537},"end":{"line":64,"column":538,"offset":4074},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":3537},"end":{"line":64,"column":538,"offset":4074},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Advantages","position":{"start":{"line":66,"column":1,"offset":4076},"end":{"line":66,"column":11,"offset":4086},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":4076},"end":{"line":66,"column":11,"offset":4086},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Efficient insertion and removal of new elements","position":{"start":{"line":68,"column":3,"offset":4090},"end":{"line":68,"column":50,"offset":4137},"indent":[]}}],"position":{"start":{"line":68,"column":3,"offset":4090},"end":{"line":68,"column":50,"offset":4137},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":4088},"end":{"line":68,"column":50,"offset":4137},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Less complex than restructuring an array","position":{"start":{"line":69,"column":3,"offset":4140},"end":{"line":69,"column":43,"offset":4180},"indent":[]}}],"position":{"start":{"line":69,"column":3,"offset":4140},"end":{"line":69,"column":43,"offset":4180},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":4138},"end":{"line":69,"column":43,"offset":4180},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":4088},"end":{"line":69,"column":43,"offset":4180},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":71,"column":1,"offset":4182},"end":{"line":71,"column":14,"offset":4195},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":4182},"end":{"line":71,"column":14,"offset":4195},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Uses more memory than arrays","position":{"start":{"line":73,"column":3,"offset":4199},"end":{"line":73,"column":31,"offset":4227},"indent":[]}}],"position":{"start":{"line":73,"column":3,"offset":4199},"end":{"line":73,"column":31,"offset":4227},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":4197},"end":{"line":73,"column":31,"offset":4227},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Inefficient to retrieve a specific element","position":{"start":{"line":74,"column":3,"offset":4230},"end":{"line":74,"column":45,"offset":4272},"indent":[]}}],"position":{"start":{"line":74,"column":3,"offset":4230},"end":{"line":74,"column":45,"offset":4272},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":4228},"end":{"line":74,"column":45,"offset":4272},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Inefficient to traverse the list backward","position":{"start":{"line":75,"column":3,"offset":4275},"end":{"line":75,"column":44,"offset":4316},"indent":[]}}],"position":{"start":{"line":75,"column":3,"offset":4275},"end":{"line":75,"column":44,"offset":4316},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":4273},"end":{"line":75,"column":44,"offset":4316},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":4197},"end":{"line":75,"column":44,"offset":4316},"indent":[1,1]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications-2","children":[],"position":{"start":{"line":77,"column":6,"offset":4323},"end":{"line":77,"column":106,"offset":4423},"indent":[]}},{"type":"text","value":"Applications","position":{"start":{"line":77,"column":106,"offset":4423},"end":{"line":77,"column":118,"offset":4435},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":4318},"end":{"line":77,"column":118,"offset":4435},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Best used when data must be added and removed in quick succession from unknown locations","position":{"start":{"line":79,"column":3,"offset":4439},"end":{"line":79,"column":91,"offset":4527},"indent":[]}}],"position":{"start":{"line":79,"column":3,"offset":4439},"end":{"line":79,"column":91,"offset":4527},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":4437},"end":{"line":79,"column":91,"offset":4527},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":4437},"end":{"line":79,"column":91,"offset":4527},"indent":[]}},{"type":"paragraph","children":[{"type":"break","position":{"start":{"line":81,"column":1,"offset":4529},"end":{"line":82,"column":1,"offset":4531},"indent":[1]}},{"type":"text","value":"\\","position":{"start":{"line":82,"column":1,"offset":4531},"end":{"line":82,"column":2,"offset":4532},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":4529},"end":{"line":82,"column":2,"offset":4532},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#4-trees","children":[],"position":{"start":{"line":84,"column":5,"offset":4538},"end":{"line":84,"column":98,"offset":4631},"indent":[]}},{"type":"text","value":"4. Trees","position":{"start":{"line":84,"column":98,"offset":4631},"end":{"line":84,"column":106,"offset":4639},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":4534},"end":{"line":84,"column":106,"offset":4639},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Trees are another relation-based data structure, which specialize in representing hierarchical structures. Like a linked list, nodes contain both elements of data and pointers marking its relation to immediate nodes.","position":{"start":{"line":86,"column":1,"offset":4641},"end":{"line":86,"column":217,"offset":4857},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":4641},"end":{"line":86,"column":217,"offset":4857},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Each tree has a “root” node, off of which all other nodes branch. The root contains references to all elements directly below it, which are known as its “child nodes”. This continues, with each child node, branching off into more child nodes.","position":{"start":{"line":88,"column":1,"offset":4859},"end":{"line":88,"column":243,"offset":5101},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":4859},"end":{"line":88,"column":243,"offset":5101},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Nodes with linked child nodes are called internal nodes while those without child nodes are external nodes. A common type of tree is the “binary search tree” which is used to easily search stored data.","position":{"start":{"line":90,"column":1,"offset":5103},"end":{"line":90,"column":202,"offset":5304},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":5103},"end":{"line":90,"column":202,"offset":5304},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"These search operations are highly efficient, as its search duration is dependent not on the number of nodes but on the number of levels down the tree.","position":{"start":{"line":92,"column":1,"offset":5306},"end":{"line":92,"column":152,"offset":5457},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":5306},"end":{"line":92,"column":152,"offset":5457},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://camo.githubusercontent.com/82cd3953e721f75e55b74c5854d64d3de002098592eba6338aa152f3ad1b4cc6/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34383630343534383739383837333630","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/82cd3953e721f75e55b74c5854d64d3de002098592eba6338aa152f3ad1b4cc6/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34383630343534383739383837333630","alt":null,"position":{"start":{"line":94,"column":2,"offset":5460},"end":{"line":94,"column":271,"offset":5729},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":5459},"end":{"line":94,"column":538,"offset":5996},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":5459},"end":{"line":94,"column":538,"offset":5996},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This type of tree is defined by four strict rules:","position":{"start":{"line":96,"column":1,"offset":5998},"end":{"line":96,"column":51,"offset":6048},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":5998},"end":{"line":96,"column":51,"offset":6048},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The left subtree contains only nodes with elements lesser than the root.","position":{"start":{"line":98,"column":4,"offset":6053},"end":{"line":98,"column":76,"offset":6125},"indent":[]}}],"position":{"start":{"line":98,"column":4,"offset":6053},"end":{"line":98,"column":76,"offset":6125},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":6050},"end":{"line":98,"column":76,"offset":6125},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The right subtree contains only nodes with elements greater than the root.","position":{"start":{"line":99,"column":4,"offset":6129},"end":{"line":99,"column":78,"offset":6203},"indent":[]}}],"position":{"start":{"line":99,"column":4,"offset":6129},"end":{"line":99,"column":78,"offset":6203},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":6126},"end":{"line":99,"column":78,"offset":6203},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Left and right subtrees must also be a binary search tree. They must follow the above rules with the “root” of their tree.","position":{"start":{"line":100,"column":4,"offset":6207},"end":{"line":100,"column":126,"offset":6329},"indent":[]}}],"position":{"start":{"line":100,"column":4,"offset":6207},"end":{"line":100,"column":126,"offset":6329},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":6204},"end":{"line":100,"column":126,"offset":6329},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"There can be no duplicate nodes, i.e. no two nodes can have the same value.","position":{"start":{"line":101,"column":4,"offset":6333},"end":{"line":101,"column":79,"offset":6408},"indent":[]}}],"position":{"start":{"line":101,"column":4,"offset":6333},"end":{"line":101,"column":79,"offset":6408},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":6330},"end":{"line":101,"column":79,"offset":6408},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":6050},"end":{"line":101,"column":79,"offset":6408},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Advantages","position":{"start":{"line":103,"column":1,"offset":6410},"end":{"line":103,"column":11,"offset":6420},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":6410},"end":{"line":103,"column":11,"offset":6420},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Ideal for storing hierarchical relationships","position":{"start":{"line":105,"column":3,"offset":6424},"end":{"line":105,"column":47,"offset":6468},"indent":[]}}],"position":{"start":{"line":105,"column":3,"offset":6424},"end":{"line":105,"column":47,"offset":6468},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":6422},"end":{"line":105,"column":47,"offset":6468},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Dynamic size","position":{"start":{"line":106,"column":3,"offset":6471},"end":{"line":106,"column":15,"offset":6483},"indent":[]}}],"position":{"start":{"line":106,"column":3,"offset":6471},"end":{"line":106,"column":15,"offset":6483},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":6469},"end":{"line":106,"column":15,"offset":6483},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Quick at insert and delete operations","position":{"start":{"line":107,"column":3,"offset":6486},"end":{"line":107,"column":40,"offset":6523},"indent":[]}}],"position":{"start":{"line":107,"column":3,"offset":6486},"end":{"line":107,"column":40,"offset":6523},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":6484},"end":{"line":107,"column":40,"offset":6523},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In a binary search tree, inserted nodes are sequenced immediately.","position":{"start":{"line":108,"column":3,"offset":6526},"end":{"line":108,"column":69,"offset":6592},"indent":[]}}],"position":{"start":{"line":108,"column":3,"offset":6526},"end":{"line":108,"column":69,"offset":6592},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":6524},"end":{"line":108,"column":69,"offset":6592},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Binary search trees are efficient at searches; length is only O(height)O(height).","position":{"start":{"line":109,"column":3,"offset":6595},"end":{"line":109,"column":84,"offset":6676},"indent":[]}}],"position":{"start":{"line":109,"column":3,"offset":6595},"end":{"line":109,"column":84,"offset":6676},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":6593},"end":{"line":109,"column":84,"offset":6676},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":6422},"end":{"line":109,"column":84,"offset":6676},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":111,"column":1,"offset":6678},"end":{"line":111,"column":14,"offset":6691},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":6678},"end":{"line":111,"column":14,"offset":6691},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Slow to rearrange nodes","position":{"start":{"line":113,"column":3,"offset":6695},"end":{"line":113,"column":26,"offset":6718},"indent":[]}}],"position":{"start":{"line":113,"column":3,"offset":6695},"end":{"line":113,"column":26,"offset":6718},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":6693},"end":{"line":113,"column":26,"offset":6718},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Child nodes hold no information about their parent node","position":{"start":{"line":114,"column":3,"offset":6721},"end":{"line":114,"column":58,"offset":6776},"indent":[]}}],"position":{"start":{"line":114,"column":3,"offset":6721},"end":{"line":114,"column":58,"offset":6776},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":6719},"end":{"line":114,"column":58,"offset":6776},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Binary search trees are not as fast as the more complicated hash table","position":{"start":{"line":115,"column":3,"offset":6779},"end":{"line":115,"column":73,"offset":6849},"indent":[]}}],"position":{"start":{"line":115,"column":3,"offset":6779},"end":{"line":115,"column":73,"offset":6849},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":6777},"end":{"line":115,"column":73,"offset":6849},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Binary search trees can degenerate into linear search (scanning all elements) if not implemented with balanced subtrees.","position":{"start":{"line":116,"column":3,"offset":6852},"end":{"line":116,"column":123,"offset":6972},"indent":[]}}],"position":{"start":{"line":116,"column":3,"offset":6852},"end":{"line":116,"column":123,"offset":6972},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":6850},"end":{"line":116,"column":123,"offset":6972},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":6693},"end":{"line":116,"column":123,"offset":6972},"indent":[1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications-3","children":[],"position":{"start":{"line":118,"column":6,"offset":6979},"end":{"line":118,"column":106,"offset":7079},"indent":[]}},{"type":"text","value":"Applications","position":{"start":{"line":118,"column":106,"offset":7079},"end":{"line":118,"column":118,"offset":7091},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":6974},"end":{"line":118,"column":118,"offset":7091},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Storing hierarchical data such as a file location.","position":{"start":{"line":120,"column":3,"offset":7095},"end":{"line":120,"column":53,"offset":7145},"indent":[]}}],"position":{"start":{"line":120,"column":3,"offset":7095},"end":{"line":120,"column":53,"offset":7145},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":7093},"end":{"line":120,"column":53,"offset":7145},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Binary search trees are excellent for tasks needing searching or ordering of data.","position":{"start":{"line":121,"column":3,"offset":7148},"end":{"line":121,"column":85,"offset":7230},"indent":[]}}],"position":{"start":{"line":121,"column":3,"offset":7148},"end":{"line":121,"column":85,"offset":7230},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":7146},"end":{"line":121,"column":85,"offset":7230},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":7093},"end":{"line":121,"column":85,"offset":7230},"indent":[1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"*","position":{"start":{"line":123,"column":5,"offset":7236},"end":{"line":123,"column":7,"offset":7238},"indent":[]}},{"type":"text","value":"Enjoying the article?","position":{"start":{"line":123,"column":7,"offset":7238},"end":{"line":123,"column":28,"offset":7259},"indent":[]}}],"position":{"start":{"line":123,"column":3,"offset":7234},"end":{"line":123,"column":30,"offset":7261},"indent":[]}},{"type":"text","value":" Scroll down to","position":{"start":{"line":123,"column":30,"offset":7261},"end":{"line":123,"column":45,"offset":7276},"indent":[]}},{"type":"text","value":"*","position":{"start":{"line":123,"column":45,"offset":7276},"end":{"line":123,"column":47,"offset":7278},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":123,"column":47,"offset":7278},"end":{"line":123,"column":48,"offset":7279},"indent":[]}},{"type":"emphasis","children":[{"type":"link","title":null,"url":"https://www.educative.io/blog/blog-newsletter-annoucement","children":[{"type":"text","value":"sign up","position":{"start":{"line":123,"column":50,"offset":7281},"end":{"line":123,"column":57,"offset":7288},"indent":[]}}],"position":{"start":{"line":123,"column":49,"offset":7280},"end":{"line":123,"column":117,"offset":7348},"indent":[]}}],"position":{"start":{"line":123,"column":48,"offset":7279},"end":{"line":123,"column":118,"offset":7349},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":123,"column":118,"offset":7349},"end":{"line":123,"column":119,"offset":7350},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"for our free, bi-monthly newsletter.","position":{"start":{"line":123,"column":120,"offset":7351},"end":{"line":123,"column":156,"offset":7387},"indent":[]}}],"position":{"start":{"line":123,"column":119,"offset":7350},"end":{"line":123,"column":157,"offset":7388},"indent":[]}}],"position":{"start":{"line":123,"column":3,"offset":7234},"end":{"line":123,"column":157,"offset":7388},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":7232},"end":{"line":123,"column":157,"offset":7388},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":125,"column":1,"offset":7390},"end":{"line":125,"column":2,"offset":7391},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":7390},"end":{"line":125,"column":2,"offset":7391},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#5-graphs","children":[],"position":{"start":{"line":127,"column":5,"offset":7397},"end":{"line":127,"column":99,"offset":7491},"indent":[]}},{"type":"text","value":"5. Graphs","position":{"start":{"line":127,"column":99,"offset":7491},"end":{"line":127,"column":108,"offset":7500},"indent":[]}}],"position":{"start":{"line":127,"column":1,"offset":7393},"end":{"line":127,"column":108,"offset":7500},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Graphs are a relation-based data structure helpful for storing web-like relationships. Each node, or vertex, as they’re called in graphs, has a title (A, B, C, etc.), a value contained within, and a list of links (called edges) it has with other vertices.","position":{"start":{"line":129,"column":1,"offset":7502},"end":{"line":129,"column":256,"offset":7757},"indent":[]}}],"position":{"start":{"line":129,"column":1,"offset":7502},"end":{"line":129,"column":256,"offset":7757},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://camo.githubusercontent.com/615c0612c32e8d319d2c79e596885e4aceb6ce7dc64ac235ede92637fac589f9/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34393132363931303737343437363830","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/615c0612c32e8d319d2c79e596885e4aceb6ce7dc64ac235ede92637fac589f9/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34393132363931303737343437363830","alt":null,"position":{"start":{"line":131,"column":2,"offset":7760},"end":{"line":131,"column":271,"offset":8029},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":7759},"end":{"line":131,"column":538,"offset":8296},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":7759},"end":{"line":131,"column":538,"offset":8296},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the above example, each circle is a vertex, and each line is an edge. If produced in writing, this structure would look like:","position":{"start":{"line":133,"column":1,"offset":8298},"end":{"line":133,"column":129,"offset":8426},"indent":[]}}],"position":{"start":{"line":133,"column":1,"offset":8298},"end":{"line":133,"column":129,"offset":8426},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"V = {a, b, c, d}","position":{"start":{"line":135,"column":2,"offset":8429},"end":{"line":135,"column":18,"offset":8445},"indent":[]}}],"position":{"start":{"line":135,"column":1,"offset":8428},"end":{"line":135,"column":19,"offset":8446},"indent":[]}}],"position":{"start":{"line":135,"column":1,"offset":8428},"end":{"line":135,"column":19,"offset":8446},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"E = {ab, ac, bc, cd}","position":{"start":{"line":137,"column":2,"offset":8449},"end":{"line":137,"column":22,"offset":8469},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":8448},"end":{"line":137,"column":23,"offset":8470},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":8448},"end":{"line":137,"column":23,"offset":8470},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"While hard to visualize at first, this structure is invaluable in conveying relationship charts in textual form, anything from circuitry to train networks.","position":{"start":{"line":139,"column":1,"offset":8472},"end":{"line":139,"column":156,"offset":8627},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":8472},"end":{"line":139,"column":156,"offset":8627},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Advantages","position":{"start":{"line":141,"column":1,"offset":8629},"end":{"line":141,"column":11,"offset":8639},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":8629},"end":{"line":141,"column":11,"offset":8639},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Can quickly convey visuals over text","position":{"start":{"line":143,"column":3,"offset":8643},"end":{"line":143,"column":39,"offset":8679},"indent":[]}}],"position":{"start":{"line":143,"column":3,"offset":8643},"end":{"line":143,"column":39,"offset":8679},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":8641},"end":{"line":143,"column":39,"offset":8679},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Usable to model a diverse number of subjects so long as they contain a relational structure","position":{"start":{"line":144,"column":3,"offset":8682},"end":{"line":144,"column":94,"offset":8773},"indent":[]}}],"position":{"start":{"line":144,"column":3,"offset":8682},"end":{"line":144,"column":94,"offset":8773},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":8680},"end":{"line":144,"column":94,"offset":8773},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":8641},"end":{"line":144,"column":94,"offset":8773},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":146,"column":1,"offset":8775},"end":{"line":146,"column":14,"offset":8788},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":8775},"end":{"line":146,"column":14,"offset":8788},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"At a higher level, text can be time-consuming to convert to an image.","position":{"start":{"line":148,"column":3,"offset":8792},"end":{"line":148,"column":72,"offset":8861},"indent":[]}}],"position":{"start":{"line":148,"column":3,"offset":8792},"end":{"line":148,"column":72,"offset":8861},"indent":[]}}],"position":{"start":{"line":148,"column":1,"offset":8790},"end":{"line":148,"column":72,"offset":8861},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"It can be difficult to see the existing edges or how many edges a given vertex has connected to it","position":{"start":{"line":149,"column":3,"offset":8864},"end":{"line":149,"column":101,"offset":8962},"indent":[]}}],"position":{"start":{"line":149,"column":3,"offset":8864},"end":{"line":149,"column":101,"offset":8962},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":8862},"end":{"line":149,"column":101,"offset":8962},"indent":[]}}],"position":{"start":{"line":148,"column":1,"offset":8790},"end":{"line":149,"column":101,"offset":8962},"indent":[1]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications-4","children":[],"position":{"start":{"line":151,"column":6,"offset":8969},"end":{"line":151,"column":106,"offset":9069},"indent":[]}},{"type":"text","value":"Applications","position":{"start":{"line":151,"column":106,"offset":9069},"end":{"line":151,"column":118,"offset":9081},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":8964},"end":{"line":151,"column":118,"offset":9081},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Network representations","position":{"start":{"line":153,"column":3,"offset":9085},"end":{"line":153,"column":26,"offset":9108},"indent":[]}}],"position":{"start":{"line":153,"column":3,"offset":9085},"end":{"line":153,"column":26,"offset":9108},"indent":[]}}],"position":{"start":{"line":153,"column":1,"offset":9083},"end":{"line":153,"column":26,"offset":9108},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Modeling social networks, such as Facebook.","position":{"start":{"line":154,"column":3,"offset":9111},"end":{"line":154,"column":46,"offset":9154},"indent":[]}}],"position":{"start":{"line":154,"column":3,"offset":9111},"end":{"line":154,"column":46,"offset":9154},"indent":[]}}],"position":{"start":{"line":154,"column":1,"offset":9109},"end":{"line":154,"column":46,"offset":9154},"indent":[]}}],"position":{"start":{"line":153,"column":1,"offset":9083},"end":{"line":154,"column":46,"offset":9154},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":156,"column":1,"offset":9156},"end":{"line":156,"column":2,"offset":9157},"indent":[]}}],"position":{"start":{"line":156,"column":1,"offset":9156},"end":{"line":156,"column":2,"offset":9157},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#6-hash-tables-map","children":[],"position":{"start":{"line":158,"column":5,"offset":9163},"end":{"line":158,"column":108,"offset":9266},"indent":[]}},{"type":"text","value":"6. Hash Tables (Map)","position":{"start":{"line":158,"column":108,"offset":9266},"end":{"line":158,"column":128,"offset":9286},"indent":[]}}],"position":{"start":{"line":158,"column":1,"offset":9159},"end":{"line":158,"column":128,"offset":9286},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hash tables are a complex data structure capable of storing large amounts of information and retrieving specific elements efficiently. This data structure relies on the concept of key/value pairs, where the “key” is a searched string and the “value” is the data paired with that key.","position":{"start":{"line":160,"column":1,"offset":9288},"end":{"line":160,"column":284,"offset":9571},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":9288},"end":{"line":160,"column":284,"offset":9571},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://camo.githubusercontent.com/ed02956a5f707a017dc59966166c26835374fa0b48a9b6d0aaec06367d4dae10/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36373435393131313633303932393932","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/ed02956a5f707a017dc59966166c26835374fa0b48a9b6d0aaec06367d4dae10/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36373435393131313633303932393932","alt":null,"position":{"start":{"line":162,"column":2,"offset":9574},"end":{"line":162,"column":271,"offset":9843},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":9573},"end":{"line":162,"column":538,"offset":10110},"indent":[]}},{"type":"text","value":" Each searched key is converted from its string form into a numerical value, called a hash, using a predefined hash function. This hash then points to a storage bucket – a smaller subgroup within the table. It then searches the bucket for the originally entered key and returns the value associated with that key.","position":{"start":{"line":162,"column":538,"offset":10110},"end":{"line":162,"column":851,"offset":10423},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":9573},"end":{"line":162,"column":851,"offset":10423},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Advantages","position":{"start":{"line":164,"column":1,"offset":10425},"end":{"line":164,"column":11,"offset":10435},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":10425},"end":{"line":164,"column":11,"offset":10435},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Key can be in any form, while array’s indices must be integers","position":{"start":{"line":166,"column":3,"offset":10439},"end":{"line":166,"column":65,"offset":10501},"indent":[]}}],"position":{"start":{"line":166,"column":3,"offset":10439},"end":{"line":166,"column":65,"offset":10501},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":10437},"end":{"line":166,"column":65,"offset":10501},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Highly efficient search function","position":{"start":{"line":167,"column":3,"offset":10504},"end":{"line":167,"column":35,"offset":10536},"indent":[]}}],"position":{"start":{"line":167,"column":3,"offset":10504},"end":{"line":167,"column":35,"offset":10536},"indent":[]}}],"position":{"start":{"line":167,"column":1,"offset":10502},"end":{"line":167,"column":35,"offset":10536},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Constant number of operations for each search","position":{"start":{"line":168,"column":3,"offset":10539},"end":{"line":168,"column":48,"offset":10584},"indent":[]}}],"position":{"start":{"line":168,"column":3,"offset":10539},"end":{"line":168,"column":48,"offset":10584},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":10537},"end":{"line":168,"column":48,"offset":10584},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Constant cost for insertion or deletion operations","position":{"start":{"line":169,"column":3,"offset":10587},"end":{"line":169,"column":53,"offset":10637},"indent":[]}}],"position":{"start":{"line":169,"column":3,"offset":10587},"end":{"line":169,"column":53,"offset":10637},"indent":[]}}],"position":{"start":{"line":169,"column":1,"offset":10585},"end":{"line":169,"column":53,"offset":10637},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":10437},"end":{"line":169,"column":53,"offset":10637},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":171,"column":1,"offset":10639},"end":{"line":171,"column":14,"offset":10652},"indent":[]}}],"position":{"start":{"line":171,"column":1,"offset":10639},"end":{"line":171,"column":14,"offset":10652},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Collisions: an error caused when two keys convert to the same hash code or two hash codes point to the same value.","position":{"start":{"line":173,"column":3,"offset":10656},"end":{"line":173,"column":117,"offset":10770},"indent":[]}}],"position":{"start":{"line":173,"column":3,"offset":10656},"end":{"line":173,"column":117,"offset":10770},"indent":[]}}],"position":{"start":{"line":173,"column":1,"offset":10654},"end":{"line":173,"column":117,"offset":10770},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"These errors can be common and often require an overhaul of the hash function.","position":{"start":{"line":174,"column":3,"offset":10773},"end":{"line":174,"column":81,"offset":10851},"indent":[]}}],"position":{"start":{"line":174,"column":3,"offset":10773},"end":{"line":174,"column":81,"offset":10851},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":10771},"end":{"line":174,"column":81,"offset":10851},"indent":[]}}],"position":{"start":{"line":173,"column":1,"offset":10654},"end":{"line":174,"column":81,"offset":10851},"indent":[1]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications-5","children":[],"position":{"start":{"line":176,"column":6,"offset":10858},"end":{"line":176,"column":106,"offset":10958},"indent":[]}},{"type":"text","value":"Applications","position":{"start":{"line":176,"column":106,"offset":10958},"end":{"line":176,"column":118,"offset":10970},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":10853},"end":{"line":176,"column":118,"offset":10970},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Database storage","position":{"start":{"line":178,"column":3,"offset":10974},"end":{"line":178,"column":19,"offset":10990},"indent":[]}}],"position":{"start":{"line":178,"column":3,"offset":10974},"end":{"line":178,"column":19,"offset":10990},"indent":[]}}],"position":{"start":{"line":178,"column":1,"offset":10972},"end":{"line":178,"column":19,"offset":10990},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Address lookups by name","position":{"start":{"line":179,"column":3,"offset":10993},"end":{"line":179,"column":26,"offset":11016},"indent":[]}}],"position":{"start":{"line":179,"column":3,"offset":10993},"end":{"line":179,"column":26,"offset":11016},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":10991},"end":{"line":179,"column":26,"offset":11016},"indent":[]}}],"position":{"start":{"line":178,"column":1,"offset":10972},"end":{"line":179,"column":26,"offset":11016},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Each hash table can be very different, from the types of the keys and values, to the way their hash functions work. Due to these differences and the multi-layered aspects of a hash table, it is nearly impossible to encapsulate so generally.","position":{"start":{"line":181,"column":1,"offset":11018},"end":{"line":181,"column":241,"offset":11258},"indent":[]}}],"position":{"start":{"line":181,"column":1,"offset":11018},"end":{"line":181,"column":241,"offset":11258},"indent":[]}},{"type":"paragraph","children":[{"type":"break","position":{"start":{"line":183,"column":1,"offset":11260},"end":{"line":184,"column":1,"offset":11262},"indent":[1]}},{"type":"text","value":"\\","position":{"start":{"line":184,"column":1,"offset":11262},"end":{"line":184,"column":2,"offset":11263},"indent":[]}}],"position":{"start":{"line":183,"column":1,"offset":11260},"end":{"line":184,"column":2,"offset":11263},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#data-structure-interview-questions","children":[],"position":{"start":{"line":186,"column":5,"offset":11269},"end":{"line":186,"column":125,"offset":11389},"indent":[]}},{"type":"text","value":"Data structure interview questions","position":{"start":{"line":186,"column":125,"offset":11389},"end":{"line":186,"column":159,"offset":11423},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":11265},"end":{"line":186,"column":159,"offset":11423},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For many developers and programmers, data structures are most important for ","position":{"start":{"line":188,"column":1,"offset":11425},"end":{"line":188,"column":77,"offset":11501},"indent":[]}},{"type":"link","title":null,"url":"https://www.educative.io/blog/acing-the-javascript-interview-top-questions-explained","children":[{"type":"text","value":"cracking Javascript coding interviews","position":{"start":{"line":188,"column":78,"offset":11502},"end":{"line":188,"column":115,"offset":11539},"indent":[]}}],"position":{"start":{"line":188,"column":77,"offset":11501},"end":{"line":188,"column":202,"offset":11626},"indent":[]}},{"type":"text","value":". Questions and problems on data structures are fundamental to modern-day coding interviews. In fact, they have a lot to say over your hireability and entry-level rate as a candidate.","position":{"start":{"line":188,"column":202,"offset":11626},"end":{"line":188,"column":385,"offset":11809},"indent":[]}}],"position":{"start":{"line":188,"column":1,"offset":11425},"end":{"line":188,"column":385,"offset":11809},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Today, we will be going over seven common coding interview questions for JavaScript data structures, one for each of the data structures we discussed above. Each will also discuss its time complexity based on the ","position":{"start":{"line":190,"column":1,"offset":11811},"end":{"line":190,"column":214,"offset":12024},"indent":[]}},{"type":"link","title":null,"url":"https://www.educative.io/blog/a-big-o-primer-for-beginning-devs","children":[{"type":"text","value":"BigO notation","position":{"start":{"line":190,"column":215,"offset":12025},"end":{"line":190,"column":228,"offset":12038},"indent":[]}}],"position":{"start":{"line":190,"column":214,"offset":12024},"end":{"line":190,"column":294,"offset":12104},"indent":[]}},{"type":"text","value":" theory.","position":{"start":{"line":190,"column":294,"offset":12104},"end":{"line":190,"column":302,"offset":12112},"indent":[]}}],"position":{"start":{"line":190,"column":1,"offset":11811},"end":{"line":190,"column":302,"offset":12112},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":192,"column":1,"offset":12114},"end":{"line":192,"column":2,"offset":12115},"indent":[]}}],"position":{"start":{"line":192,"column":1,"offset":12114},"end":{"line":192,"column":2,"offset":12115},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#array-remove-all-even-integers-from-an-array","children":[],"position":{"start":{"line":194,"column":6,"offset":12122},"end":{"line":194,"column":136,"offset":12252},"indent":[]}},{"type":"text","value":"Array: Remove all even integers from an array","position":{"start":{"line":194,"column":136,"offset":12252},"end":{"line":194,"column":181,"offset":12297},"indent":[]}}],"position":{"start":{"line":194,"column":1,"offset":12117},"end":{"line":194,"column":181,"offset":12297},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":196,"column":3,"offset":12301},"end":{"line":196,"column":21,"offset":12319},"indent":[]}}],"position":{"start":{"line":196,"column":1,"offset":12299},"end":{"line":196,"column":23,"offset":12321},"indent":[]}},{"type":"text","value":" Implement a function ","position":{"start":{"line":196,"column":23,"offset":12321},"end":{"line":196,"column":45,"offset":12343},"indent":[]}},{"type":"inlineCode","value":"removeEven(arr)","position":{"start":{"line":196,"column":45,"offset":12343},"end":{"line":196,"column":62,"offset":12360},"indent":[]}},{"type":"text","value":", which takes an array arr in its input and removes all the even elements from a given array.","position":{"start":{"line":196,"column":62,"offset":12360},"end":{"line":196,"column":155,"offset":12453},"indent":[]}}],"position":{"start":{"line":196,"column":1,"offset":12299},"end":{"line":196,"column":155,"offset":12453},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Input:","position":{"start":{"line":198,"column":3,"offset":12457},"end":{"line":198,"column":9,"offset":12463},"indent":[]}}],"position":{"start":{"line":198,"column":1,"offset":12455},"end":{"line":198,"column":11,"offset":12465},"indent":[]}},{"type":"text","value":" An array of random integers","position":{"start":{"line":198,"column":11,"offset":12465},"end":{"line":198,"column":39,"offset":12493},"indent":[]}}],"position":{"start":{"line":198,"column":1,"offset":12455},"end":{"line":198,"column":39,"offset":12493},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"","position":{"start":{"line":200,"column":1,"offset":12495},"end":{"line":202,"column":4,"offset":12503},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Output:","position":{"start":{"line":204,"column":3,"offset":12507},"end":{"line":204,"column":10,"offset":12514},"indent":[]}}],"position":{"start":{"line":204,"column":1,"offset":12505},"end":{"line":204,"column":12,"offset":12516},"indent":[]}},{"type":"text","value":" an array containing only odd integers","position":{"start":{"line":204,"column":12,"offset":12516},"end":{"line":204,"column":50,"offset":12554},"indent":[]}}],"position":{"start":{"line":204,"column":1,"offset":12505},"end":{"line":204,"column":50,"offset":12554},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"","position":{"start":{"line":206,"column":1,"offset":12556},"end":{"line":208,"column":4,"offset":12564},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"There are two ways you could solve this coding problem in an interview. Let’s discuss each.","position":{"start":{"line":210,"column":1,"offset":12566},"end":{"line":210,"column":92,"offset":12657},"indent":[]}}],"position":{"start":{"line":210,"column":1,"offset":12566},"end":{"line":210,"column":92,"offset":12657},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":212,"column":1,"offset":12659},"end":{"line":212,"column":2,"offset":12660},"indent":[]}}],"position":{"start":{"line":212,"column":1,"offset":12659},"end":{"line":212,"column":2,"offset":12660},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Solution #1: Doing it “by hand”","position":{"start":{"line":214,"column":3,"offset":12664},"end":{"line":214,"column":34,"offset":12695},"indent":[]}}],"position":{"start":{"line":214,"column":1,"offset":12662},"end":{"line":214,"column":36,"offset":12697},"indent":[]}}],"position":{"start":{"line":214,"column":1,"offset":12662},"end":{"line":214,"column":36,"offset":12697},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"123456789function removeEven(arr) { var odds = ","position":{"start":{"line":216,"column":1,"offset":12699},"end":{"line":216,"column":48,"offset":12746},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":216,"column":48,"offset":12746},"end":{"line":216,"column":50,"offset":12748},"indent":[]}},{"type":"text","value":"] for (let number of arr) { if (number % 2 != 0) // Check if the item in the list is NOT even ('%' is the modulus symbol!) odds.push(number) //If it isn't even append it to the empty list } return odds // Return the new list}console.log(removeEven(","position":{"start":{"line":216,"column":50,"offset":12748},"end":{"line":216,"column":298,"offset":12996},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":216,"column":298,"offset":12996},"end":{"line":216,"column":300,"offset":12998},"indent":[]}},{"type":"text","value":"3, 2, 41, 3, 34]))Run","position":{"start":{"line":216,"column":300,"offset":12998},"end":{"line":216,"column":321,"offset":13019},"indent":[]}}],"position":{"start":{"line":216,"column":1,"offset":12699},"end":{"line":216,"column":321,"offset":13019},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This approach starts with the first element of the array. If that current element is not even, it pushes this element into a new array. If it is even, it will move to the next element, repeating until it reaches the end of the array. In regards to time complexity, since the entire array has to be iterated over, this solution is in ","position":{"start":{"line":218,"column":1,"offset":13021},"end":{"line":218,"column":334,"offset":13354},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"O(n)O(n).","position":{"start":{"line":218,"column":335,"offset":13355},"end":{"line":218,"column":344,"offset":13364},"indent":[]}}],"position":{"start":{"line":218,"column":334,"offset":13354},"end":{"line":218,"column":345,"offset":13365},"indent":[]}}],"position":{"start":{"line":218,"column":1,"offset":13021},"end":{"line":218,"column":345,"offset":13365},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":220,"column":1,"offset":13367},"end":{"line":220,"column":2,"offset":13368},"indent":[]}}],"position":{"start":{"line":220,"column":1,"offset":13367},"end":{"line":220,"column":2,"offset":13368},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Solution #2: Using filter() and lambda function","position":{"start":{"line":222,"column":3,"offset":13372},"end":{"line":222,"column":50,"offset":13419},"indent":[]}}],"position":{"start":{"line":222,"column":1,"offset":13370},"end":{"line":222,"column":52,"offset":13421},"indent":[]}}],"position":{"start":{"line":222,"column":1,"offset":13370},"end":{"line":222,"column":52,"offset":13421},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"1234function removeEven(arr) { return arr.filter((v => (v % 2) != 0))}console.log(removeEven(","position":{"start":{"line":224,"column":1,"offset":13423},"end":{"line":224,"column":94,"offset":13516},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":224,"column":94,"offset":13516},"end":{"line":224,"column":96,"offset":13518},"indent":[]}},{"type":"text","value":"3,2,41,3,34]))","position":{"start":{"line":224,"column":96,"offset":13518},"end":{"line":224,"column":110,"offset":13532},"indent":[]}}],"position":{"start":{"line":224,"column":1,"offset":13423},"end":{"line":224,"column":110,"offset":13532},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This solution also begins with the first element and checks if it is even. If it is even, it filters out this element. If not, skips to the next element, repeating this process until it reaches the end of the array.","position":{"start":{"line":226,"column":1,"offset":13534},"end":{"line":226,"column":216,"offset":13749},"indent":[]}}],"position":{"start":{"line":226,"column":1,"offset":13534},"end":{"line":226,"column":216,"offset":13749},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The filter function uses lambda or arrow functions, which use shorter, simpler syntax. The filter filters out the element for which the lambda function returns false. The time complexity of this is the same as the time complexity of the previous solution.","position":{"start":{"line":228,"column":1,"offset":13751},"end":{"line":228,"column":256,"offset":14006},"indent":[]}}],"position":{"start":{"line":228,"column":1,"offset":13751},"end":{"line":228,"column":256,"offset":14006},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":230,"column":1,"offset":14008},"end":{"line":230,"column":2,"offset":14009},"indent":[]}}],"position":{"start":{"line":230,"column":1,"offset":14008},"end":{"line":230,"column":2,"offset":14009},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#stack-check-for-balanced-parentheses-using-a-stack","children":[],"position":{"start":{"line":232,"column":6,"offset":14016},"end":{"line":232,"column":142,"offset":14152},"indent":[]}},{"type":"text","value":"Stack: Check for balanced parentheses using a stack","position":{"start":{"line":232,"column":142,"offset":14152},"end":{"line":232,"column":193,"offset":14203},"indent":[]}}],"position":{"start":{"line":232,"column":1,"offset":14011},"end":{"line":232,"column":193,"offset":14203},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":234,"column":3,"offset":14207},"end":{"line":234,"column":21,"offset":14225},"indent":[]}}],"position":{"start":{"line":234,"column":1,"offset":14205},"end":{"line":234,"column":23,"offset":14227},"indent":[]}},{"type":"text","value":" Implement the ","position":{"start":{"line":234,"column":23,"offset":14227},"end":{"line":234,"column":38,"offset":14242},"indent":[]}},{"type":"inlineCode","value":"isBalanced()","position":{"start":{"line":234,"column":38,"offset":14242},"end":{"line":234,"column":52,"offset":14256},"indent":[]}},{"type":"text","value":" function to take a string containing only curly ","position":{"start":{"line":234,"column":52,"offset":14256},"end":{"line":234,"column":101,"offset":14305},"indent":[]}},{"type":"inlineCode","value":"{}","position":{"start":{"line":234,"column":101,"offset":14305},"end":{"line":234,"column":105,"offset":14309},"indent":[]}},{"type":"text","value":", square ","position":{"start":{"line":234,"column":105,"offset":14309},"end":{"line":234,"column":114,"offset":14318},"indent":[]}},{"type":"inlineCode","value":"[]","position":{"start":{"line":234,"column":114,"offset":14318},"end":{"line":234,"column":118,"offset":14322},"indent":[]}},{"type":"text","value":", and round ","position":{"start":{"line":234,"column":118,"offset":14322},"end":{"line":234,"column":130,"offset":14334},"indent":[]}},{"type":"inlineCode","value":"()","position":{"start":{"line":234,"column":130,"offset":14334},"end":{"line":234,"column":134,"offset":14338},"indent":[]}},{"type":"text","value":" parentheses. The function should tell us if all the parentheses in the string are balanced. This means that every opening parenthesis will have a closing one. For example, ","position":{"start":{"line":234,"column":134,"offset":14338},"end":{"line":234,"column":307,"offset":14511},"indent":[]}},{"type":"inlineCode","value":"{[]}","position":{"start":{"line":234,"column":307,"offset":14511},"end":{"line":234,"column":313,"offset":14517},"indent":[]}},{"type":"text","value":" is balanced, but ","position":{"start":{"line":234,"column":313,"offset":14517},"end":{"line":234,"column":331,"offset":14535},"indent":[]}},{"type":"inlineCode","value":"{[}]","position":{"start":{"line":234,"column":331,"offset":14535},"end":{"line":234,"column":337,"offset":14541},"indent":[]}},{"type":"text","value":" is not.","position":{"start":{"line":234,"column":337,"offset":14541},"end":{"line":234,"column":345,"offset":14549},"indent":[]}}],"position":{"start":{"line":234,"column":1,"offset":14205},"end":{"line":234,"column":345,"offset":14549},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Input:","position":{"start":{"line":236,"column":3,"offset":14553},"end":{"line":236,"column":9,"offset":14559},"indent":[]}}],"position":{"start":{"line":236,"column":1,"offset":14551},"end":{"line":236,"column":11,"offset":14561},"indent":[]}},{"type":"text","value":" A string consisting solely of ","position":{"start":{"line":236,"column":11,"offset":14561},"end":{"line":236,"column":42,"offset":14592},"indent":[]}},{"type":"inlineCode","value":"(","position":{"start":{"line":236,"column":42,"offset":14592},"end":{"line":236,"column":45,"offset":14595},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":236,"column":45,"offset":14595},"end":{"line":236,"column":47,"offset":14597},"indent":[]}},{"type":"inlineCode","value":")","position":{"start":{"line":236,"column":47,"offset":14597},"end":{"line":236,"column":50,"offset":14600},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":236,"column":50,"offset":14600},"end":{"line":236,"column":52,"offset":14602},"indent":[]}},{"type":"inlineCode","value":"{","position":{"start":{"line":236,"column":52,"offset":14602},"end":{"line":236,"column":55,"offset":14605},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":236,"column":55,"offset":14605},"end":{"line":236,"column":57,"offset":14607},"indent":[]}},{"type":"inlineCode","value":"}","position":{"start":{"line":236,"column":57,"offset":14607},"end":{"line":236,"column":60,"offset":14610},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":236,"column":60,"offset":14610},"end":{"line":236,"column":62,"offset":14612},"indent":[]}},{"type":"inlineCode","value":"[","position":{"start":{"line":236,"column":62,"offset":14612},"end":{"line":236,"column":65,"offset":14615},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":236,"column":65,"offset":14615},"end":{"line":236,"column":70,"offset":14620},"indent":[]}},{"type":"inlineCode","value":"]","position":{"start":{"line":236,"column":70,"offset":14620},"end":{"line":236,"column":73,"offset":14623},"indent":[]}}],"position":{"start":{"line":236,"column":1,"offset":14551},"end":{"line":236,"column":73,"offset":14623},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"","position":{"start":{"line":238,"column":1,"offset":14625},"end":{"line":240,"column":4,"offset":14633},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Output:","position":{"start":{"line":242,"column":3,"offset":14637},"end":{"line":242,"column":10,"offset":14644},"indent":[]}}],"position":{"start":{"line":242,"column":1,"offset":14635},"end":{"line":242,"column":12,"offset":14646},"indent":[]}},{"type":"text","value":" Returns ","position":{"start":{"line":242,"column":12,"offset":14646},"end":{"line":242,"column":21,"offset":14655},"indent":[]}},{"type":"inlineCode","value":"False","position":{"start":{"line":242,"column":21,"offset":14655},"end":{"line":242,"column":28,"offset":14662},"indent":[]}},{"type":"text","value":" if the expression doesn’t have balanced parentheses. If it does, the function returns ","position":{"start":{"line":242,"column":28,"offset":14662},"end":{"line":242,"column":115,"offset":14749},"indent":[]}},{"type":"inlineCode","value":"True","position":{"start":{"line":242,"column":115,"offset":14749},"end":{"line":242,"column":121,"offset":14755},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":242,"column":121,"offset":14755},"end":{"line":242,"column":122,"offset":14756},"indent":[]}}],"position":{"start":{"line":242,"column":1,"offset":14635},"end":{"line":242,"column":122,"offset":14756},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"","position":{"start":{"line":244,"column":1,"offset":14758},"end":{"line":246,"column":4,"offset":14766},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To solve this problem, we can simply use a stack of characters. Look below at the code to see how it works.","position":{"start":{"line":248,"column":1,"offset":14768},"end":{"line":248,"column":108,"offset":14875},"indent":[]}}],"position":{"start":{"line":248,"column":1,"offset":14768},"end":{"line":248,"column":108,"offset":14875},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"index.jsStack.js12345678910111213141516171819202122232425262728293031\"use strict\";module.exports = class Stack { constructor() { this.items = ","position":{"start":{"line":250,"column":1,"offset":14877},"end":{"line":250,"column":143,"offset":15019},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":250,"column":143,"offset":15019},"end":{"line":250,"column":145,"offset":15021},"indent":[]}},{"type":"text","value":"]; this.top = null; } getTop() { if (this.items.length == 0) return null; return this.top; } isEmpty() { return this.items.length == 0; } size() { return this.items.length; } push(element) { this.items.push(element); this.top = element; } pop() { if (this.items.length != 0) { if (this.items.length == 1) { this.top = null; return this.items.pop();Run","position":{"start":{"line":250,"column":145,"offset":15021},"end":{"line":250,"column":496,"offset":15372},"indent":[]}}],"position":{"start":{"line":250,"column":1,"offset":14877},"end":{"line":250,"column":496,"offset":15372},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This process will iterate over the string one character at a time. We can determine that the string is unbalanced based on two factors:","position":{"start":{"line":252,"column":1,"offset":15374},"end":{"line":252,"column":136,"offset":15509},"indent":[]}}],"position":{"start":{"line":252,"column":1,"offset":15374},"end":{"line":252,"column":136,"offset":15509},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The stack is empty.","position":{"start":{"line":254,"column":4,"offset":15514},"end":{"line":254,"column":23,"offset":15533},"indent":[]}}],"position":{"start":{"line":254,"column":4,"offset":15514},"end":{"line":254,"column":23,"offset":15533},"indent":[]}}],"position":{"start":{"line":254,"column":1,"offset":15511},"end":{"line":254,"column":23,"offset":15533},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The top element in the stack is not the right type.","position":{"start":{"line":255,"column":4,"offset":15537},"end":{"line":255,"column":55,"offset":15588},"indent":[]}}],"position":{"start":{"line":255,"column":4,"offset":15537},"end":{"line":255,"column":55,"offset":15588},"indent":[]}}],"position":{"start":{"line":255,"column":1,"offset":15534},"end":{"line":255,"column":55,"offset":15588},"indent":[]}}],"position":{"start":{"line":254,"column":1,"offset":15511},"end":{"line":255,"column":55,"offset":15588},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"If either of these conditions is true, we return ","position":{"start":{"line":257,"column":1,"offset":15590},"end":{"line":257,"column":50,"offset":15639},"indent":[]}},{"type":"inlineCode","value":"False","position":{"start":{"line":257,"column":50,"offset":15639},"end":{"line":257,"column":57,"offset":15646},"indent":[]}},{"type":"text","value":". If the parenthesis is an opening parenthesis, it is pushed into the stack. If by the end all are balanced, the stack will be empty. If it is not empty, we return ","position":{"start":{"line":257,"column":57,"offset":15646},"end":{"line":257,"column":221,"offset":15810},"indent":[]}},{"type":"inlineCode","value":"False","position":{"start":{"line":257,"column":221,"offset":15810},"end":{"line":257,"column":228,"offset":15817},"indent":[]}},{"type":"text","value":". Since we traverse the string exp only once, the time complexity is ","position":{"start":{"line":257,"column":228,"offset":15817},"end":{"line":257,"column":297,"offset":15886},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"O(n)","position":{"start":{"line":257,"column":298,"offset":15887},"end":{"line":257,"column":302,"offset":15891},"indent":[]}}],"position":{"start":{"line":257,"column":297,"offset":15886},"end":{"line":257,"column":303,"offset":15892},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":257,"column":303,"offset":15892},"end":{"line":257,"column":304,"offset":15893},"indent":[]}}],"position":{"start":{"line":257,"column":1,"offset":15590},"end":{"line":257,"column":304,"offset":15893},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":259,"column":1,"offset":15895},"end":{"line":259,"column":2,"offset":15896},"indent":[]}}],"position":{"start":{"line":259,"column":1,"offset":15895},"end":{"line":259,"column":2,"offset":15896},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#queue-generate-binary-numbers-from-1-to-n","children":[],"position":{"start":{"line":261,"column":6,"offset":15903},"end":{"line":261,"column":133,"offset":16030},"indent":[]}},{"type":"text","value":"Queue: Generate Binary Numbers from 1 to n","position":{"start":{"line":261,"column":133,"offset":16030},"end":{"line":261,"column":175,"offset":16072},"indent":[]}}],"position":{"start":{"line":261,"column":1,"offset":15898},"end":{"line":261,"column":175,"offset":16072},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":263,"column":3,"offset":16076},"end":{"line":263,"column":21,"offset":16094},"indent":[]}}],"position":{"start":{"line":263,"column":1,"offset":16074},"end":{"line":263,"column":23,"offset":16096},"indent":[]}},{"type":"text","value":" Implement a function ","position":{"start":{"line":263,"column":23,"offset":16096},"end":{"line":263,"column":45,"offset":16118},"indent":[]}},{"type":"inlineCode","value":"findBin(n)","position":{"start":{"line":263,"column":45,"offset":16118},"end":{"line":263,"column":57,"offset":16130},"indent":[]}},{"type":"text","value":", which will generate binary numbers from ","position":{"start":{"line":263,"column":57,"offset":16130},"end":{"line":263,"column":99,"offset":16172},"indent":[]}},{"type":"inlineCode","value":"1","position":{"start":{"line":263,"column":99,"offset":16172},"end":{"line":263,"column":102,"offset":16175},"indent":[]}},{"type":"text","value":" to ","position":{"start":{"line":263,"column":102,"offset":16175},"end":{"line":263,"column":106,"offset":16179},"indent":[]}},{"type":"inlineCode","value":"n","position":{"start":{"line":263,"column":106,"offset":16179},"end":{"line":263,"column":109,"offset":16182},"indent":[]}},{"type":"text","value":" in the form of a string using a queue.","position":{"start":{"line":263,"column":109,"offset":16182},"end":{"line":263,"column":148,"offset":16221},"indent":[]}}],"position":{"start":{"line":263,"column":1,"offset":16074},"end":{"line":263,"column":148,"offset":16221},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Input:","position":{"start":{"line":265,"column":3,"offset":16225},"end":{"line":265,"column":9,"offset":16231},"indent":[]}}],"position":{"start":{"line":265,"column":1,"offset":16223},"end":{"line":265,"column":11,"offset":16233},"indent":[]}},{"type":"text","value":" A positive integer n","position":{"start":{"line":265,"column":11,"offset":16233},"end":{"line":265,"column":32,"offset":16254},"indent":[]}}],"position":{"start":{"line":265,"column":1,"offset":16223},"end":{"line":265,"column":32,"offset":16254},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"","position":{"start":{"line":267,"column":1,"offset":16256},"end":{"line":269,"column":4,"offset":16264},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Output:","position":{"start":{"line":271,"column":3,"offset":16268},"end":{"line":271,"column":10,"offset":16275},"indent":[]}}],"position":{"start":{"line":271,"column":1,"offset":16266},"end":{"line":271,"column":12,"offset":16277},"indent":[]}},{"type":"text","value":" Returns binary numbers in the form of strings from ","position":{"start":{"line":271,"column":12,"offset":16277},"end":{"line":271,"column":64,"offset":16329},"indent":[]}},{"type":"inlineCode","value":"1","position":{"start":{"line":271,"column":64,"offset":16329},"end":{"line":271,"column":67,"offset":16332},"indent":[]}},{"type":"text","value":" up to ","position":{"start":{"line":271,"column":67,"offset":16332},"end":{"line":271,"column":74,"offset":16339},"indent":[]}},{"type":"inlineCode","value":"n","position":{"start":{"line":271,"column":74,"offset":16339},"end":{"line":271,"column":77,"offset":16342},"indent":[]}}],"position":{"start":{"line":271,"column":1,"offset":16266},"end":{"line":271,"column":77,"offset":16342},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"","position":{"start":{"line":273,"column":1,"offset":16344},"end":{"line":275,"column":4,"offset":16352},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The easiest way to solve this problem is using a queue to generate new numbers from previous numbers. Let’s break that down.","position":{"start":{"line":277,"column":1,"offset":16354},"end":{"line":277,"column":125,"offset":16478},"indent":[]}}],"position":{"start":{"line":277,"column":1,"offset":16354},"end":{"line":277,"column":125,"offset":16478},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"index.jsQueue.js12345678910111213141516171819202122232425262728293031\"use strict\";module.exports = class Queue { constructor() { this.items = ","position":{"start":{"line":279,"column":1,"offset":16480},"end":{"line":279,"column":143,"offset":16622},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":279,"column":143,"offset":16622},"end":{"line":279,"column":145,"offset":16624},"indent":[]}},{"type":"text","value":"]; this.front = null; this.back = null; } isEmpty() { return this.items.length == 0; } getFront() { if (this.items.length != 0) { return this.items","position":{"start":{"line":279,"column":145,"offset":16624},"end":{"line":279,"column":292,"offset":16771},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":279,"column":292,"offset":16771},"end":{"line":279,"column":294,"offset":16773},"indent":[]}},{"type":"text","value":"0]; } else return null; } size() { return this.items.length; } enqueue(element) { this.items.push(element); }Run","position":{"start":{"line":279,"column":294,"offset":16773},"end":{"line":279,"column":406,"offset":16885},"indent":[]}}],"position":{"start":{"line":279,"column":1,"offset":16480},"end":{"line":279,"column":406,"offset":16885},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The key is to generate consecutive binary numbers by appending 0 and 1 to previous binary numbers. To clarify,","position":{"start":{"line":281,"column":1,"offset":16887},"end":{"line":281,"column":111,"offset":16997},"indent":[]}}],"position":{"start":{"line":281,"column":1,"offset":16887},"end":{"line":281,"column":111,"offset":16997},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"10 and 11 can be generated if 0 and 1 are appended to 1.","position":{"start":{"line":283,"column":3,"offset":17001},"end":{"line":283,"column":59,"offset":17057},"indent":[]}}],"position":{"start":{"line":283,"column":3,"offset":17001},"end":{"line":283,"column":59,"offset":17057},"indent":[]}}],"position":{"start":{"line":283,"column":1,"offset":16999},"end":{"line":283,"column":59,"offset":17057},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"100 and 101 are generated if 0 and 1 are appended to 10.","position":{"start":{"line":284,"column":3,"offset":17060},"end":{"line":284,"column":59,"offset":17116},"indent":[]}}],"position":{"start":{"line":284,"column":3,"offset":17060},"end":{"line":284,"column":59,"offset":17116},"indent":[]}}],"position":{"start":{"line":284,"column":1,"offset":17058},"end":{"line":284,"column":59,"offset":17116},"indent":[]}}],"position":{"start":{"line":283,"column":1,"offset":16999},"end":{"line":284,"column":59,"offset":17116},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Once we generate a binary number, it is then enqueued to a queue so that new binary numbers can be generated if we append 0 and 1 when that number will be enqueued.","position":{"start":{"line":286,"column":1,"offset":17118},"end":{"line":286,"column":165,"offset":17282},"indent":[]}}],"position":{"start":{"line":286,"column":1,"offset":17118},"end":{"line":286,"column":165,"offset":17282},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Since a queue follows the ","position":{"start":{"line":288,"column":1,"offset":17284},"end":{"line":288,"column":27,"offset":17310},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"First-In First-Out","position":{"start":{"line":288,"column":28,"offset":17311},"end":{"line":288,"column":46,"offset":17329},"indent":[]}}],"position":{"start":{"line":288,"column":27,"offset":17310},"end":{"line":288,"column":47,"offset":17330},"indent":[]}},{"type":"text","value":" property, the enqueued binary numbers are dequeued so that the resulting array is mathematically correct.","position":{"start":{"line":288,"column":47,"offset":17330},"end":{"line":288,"column":153,"offset":17436},"indent":[]}}],"position":{"start":{"line":288,"column":1,"offset":17284},"end":{"line":288,"column":153,"offset":17436},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Look at the code above. On line 7, ","position":{"start":{"line":290,"column":1,"offset":17438},"end":{"line":290,"column":36,"offset":17473},"indent":[]}},{"type":"inlineCode","value":"1","position":{"start":{"line":290,"column":36,"offset":17473},"end":{"line":290,"column":39,"offset":17476},"indent":[]}},{"type":"text","value":" is enqueued. To generate the sequence of binary numbers, a number is dequeued and stored in the array ","position":{"start":{"line":290,"column":39,"offset":17476},"end":{"line":290,"column":142,"offset":17579},"indent":[]}},{"type":"inlineCode","value":"result","position":{"start":{"line":290,"column":142,"offset":17579},"end":{"line":290,"column":150,"offset":17587},"indent":[]}},{"type":"text","value":". On lines 11-12, we append ","position":{"start":{"line":290,"column":150,"offset":17587},"end":{"line":290,"column":178,"offset":17615},"indent":[]}},{"type":"inlineCode","value":"0","position":{"start":{"line":290,"column":178,"offset":17615},"end":{"line":290,"column":181,"offset":17618},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":290,"column":181,"offset":17618},"end":{"line":290,"column":186,"offset":17623},"indent":[]}},{"type":"inlineCode","value":"1","position":{"start":{"line":290,"column":186,"offset":17623},"end":{"line":290,"column":189,"offset":17626},"indent":[]}},{"type":"text","value":" to produce the next numbers.","position":{"start":{"line":290,"column":189,"offset":17626},"end":{"line":290,"column":218,"offset":17655},"indent":[]}}],"position":{"start":{"line":290,"column":1,"offset":17438},"end":{"line":290,"column":218,"offset":17655},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Those new numbers are also enqueued at lines 14-15. The queue will take integer values, so it converts the string to an integer as it is enqueued.","position":{"start":{"line":292,"column":1,"offset":17657},"end":{"line":292,"column":147,"offset":17803},"indent":[]}}],"position":{"start":{"line":292,"column":1,"offset":17657},"end":{"line":292,"column":147,"offset":17803},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The time complexity of this solution is in ","position":{"start":{"line":294,"column":1,"offset":17805},"end":{"line":294,"column":44,"offset":17848},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"O(n)O(n)","position":{"start":{"line":294,"column":45,"offset":17849},"end":{"line":294,"column":53,"offset":17857},"indent":[]}}],"position":{"start":{"line":294,"column":44,"offset":17848},"end":{"line":294,"column":54,"offset":17858},"indent":[]}},{"type":"text","value":" since constant-time operations are executed for n times.","position":{"start":{"line":294,"column":54,"offset":17858},"end":{"line":294,"column":111,"offset":17915},"indent":[]}}],"position":{"start":{"line":294,"column":1,"offset":17805},"end":{"line":294,"column":111,"offset":17915},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":296,"column":1,"offset":17917},"end":{"line":296,"column":2,"offset":17918},"indent":[]}}],"position":{"start":{"line":296,"column":1,"offset":17917},"end":{"line":296,"column":2,"offset":17918},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#linked-list-reverse-a-linked-list","children":[],"position":{"start":{"line":298,"column":6,"offset":17925},"end":{"line":298,"column":125,"offset":18044},"indent":[]}},{"type":"text","value":"Linked List: Reverse a linked list","position":{"start":{"line":298,"column":125,"offset":18044},"end":{"line":298,"column":159,"offset":18078},"indent":[]}}],"position":{"start":{"line":298,"column":1,"offset":17920},"end":{"line":298,"column":159,"offset":18078},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":300,"column":3,"offset":18082},"end":{"line":300,"column":21,"offset":18100},"indent":[]}}],"position":{"start":{"line":300,"column":1,"offset":18080},"end":{"line":300,"column":23,"offset":18102},"indent":[]}},{"type":"text","value":" Write the ","position":{"start":{"line":300,"column":23,"offset":18102},"end":{"line":300,"column":34,"offset":18113},"indent":[]}},{"type":"inlineCode","value":"reverse","position":{"start":{"line":300,"column":34,"offset":18113},"end":{"line":300,"column":43,"offset":18122},"indent":[]}},{"type":"text","value":" function to take a singly linked list and reverse it in place.","position":{"start":{"line":300,"column":43,"offset":18122},"end":{"line":300,"column":106,"offset":18185},"indent":[]}}],"position":{"start":{"line":300,"column":1,"offset":18080},"end":{"line":300,"column":106,"offset":18185},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Input:","position":{"start":{"line":302,"column":3,"offset":18189},"end":{"line":302,"column":9,"offset":18195},"indent":[]}}],"position":{"start":{"line":302,"column":1,"offset":18187},"end":{"line":302,"column":11,"offset":18197},"indent":[]}},{"type":"text","value":" a singly linked list","position":{"start":{"line":302,"column":11,"offset":18197},"end":{"line":302,"column":32,"offset":18218},"indent":[]}}],"position":{"start":{"line":302,"column":1,"offset":18187},"end":{"line":302,"column":32,"offset":18218},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"","position":{"start":{"line":304,"column":1,"offset":18220},"end":{"line":306,"column":4,"offset":18228},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Output:","position":{"start":{"line":308,"column":3,"offset":18232},"end":{"line":308,"column":10,"offset":18239},"indent":[]}}],"position":{"start":{"line":308,"column":1,"offset":18230},"end":{"line":308,"column":12,"offset":18241},"indent":[]}},{"type":"text","value":" a reverse linked list","position":{"start":{"line":308,"column":12,"offset":18241},"end":{"line":308,"column":34,"offset":18263},"indent":[]}}],"position":{"start":{"line":308,"column":1,"offset":18230},"end":{"line":308,"column":34,"offset":18263},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"","position":{"start":{"line":310,"column":1,"offset":18265},"end":{"line":312,"column":4,"offset":18273},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The easiest way to solve this problem is by using iterative pointer manipulation. Let’s take a look.","position":{"start":{"line":314,"column":1,"offset":18275},"end":{"line":314,"column":101,"offset":18375},"indent":[]}}],"position":{"start":{"line":314,"column":1,"offset":18275},"end":{"line":314,"column":101,"offset":18375},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"index.jsLinkedList.jsNode.js12345678910111213141516171819202122232425262728293031\"use strict\";const Node = require('./Node.js');module.exports = class LinkedList { constructor() { this.head = null; } //Insertion At Head insertAtHead(newData) { let tempNode = new Node(newData); tempNode.nextElement = this.head; this.head = tempNode; return this; //returning the updated list } isEmpty() { return (this.head == null); } //function to print the linked list printList() { if (this.isEmpty()) { console.log(\"Empty List\"); return false; } else { let temp = this.head; while (temp != null) { process.stdout.write(String(temp.data)); process.stdout.write(\" -> \"); temp = temp.nextElement;Run","position":{"start":{"line":316,"column":1,"offset":18377},"end":{"line":316,"column":686,"offset":19062},"indent":[]}}],"position":{"start":{"line":316,"column":1,"offset":18377},"end":{"line":316,"column":686,"offset":19062},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We use a loop to iterate through the input list. For a ","position":{"start":{"line":318,"column":1,"offset":19064},"end":{"line":318,"column":56,"offset":19119},"indent":[]}},{"type":"inlineCode","value":"current","position":{"start":{"line":318,"column":56,"offset":19119},"end":{"line":318,"column":65,"offset":19128},"indent":[]}},{"type":"text","value":" node, its link with the ","position":{"start":{"line":318,"column":65,"offset":19128},"end":{"line":318,"column":90,"offset":19153},"indent":[]}},{"type":"inlineCode","value":"previous","position":{"start":{"line":318,"column":90,"offset":19153},"end":{"line":318,"column":100,"offset":19163},"indent":[]}},{"type":"text","value":" node is reversed. then, ","position":{"start":{"line":318,"column":100,"offset":19163},"end":{"line":318,"column":125,"offset":19188},"indent":[]}},{"type":"inlineCode","value":"next","position":{"start":{"line":318,"column":125,"offset":19188},"end":{"line":318,"column":131,"offset":19194},"indent":[]}},{"type":"text","value":" stores the next node in the list. Let’s break that down by line.","position":{"start":{"line":318,"column":131,"offset":19194},"end":{"line":318,"column":196,"offset":19259},"indent":[]}}],"position":{"start":{"line":318,"column":1,"offset":19064},"end":{"line":318,"column":196,"offset":19259},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Line 22- Store the ","position":{"start":{"line":320,"column":3,"offset":19263},"end":{"line":320,"column":22,"offset":19282},"indent":[]}},{"type":"inlineCode","value":"current","position":{"start":{"line":320,"column":22,"offset":19282},"end":{"line":320,"column":31,"offset":19291},"indent":[]}},{"type":"text","value":" node’s ","position":{"start":{"line":320,"column":31,"offset":19291},"end":{"line":320,"column":39,"offset":19299},"indent":[]}},{"type":"inlineCode","value":"nextElement","position":{"start":{"line":320,"column":39,"offset":19299},"end":{"line":320,"column":52,"offset":19312},"indent":[]}},{"type":"text","value":" in ","position":{"start":{"line":320,"column":52,"offset":19312},"end":{"line":320,"column":56,"offset":19316},"indent":[]}},{"type":"inlineCode","value":"next","position":{"start":{"line":320,"column":56,"offset":19316},"end":{"line":320,"column":62,"offset":19322},"indent":[]}}],"position":{"start":{"line":320,"column":3,"offset":19263},"end":{"line":320,"column":62,"offset":19322},"indent":[]}}],"position":{"start":{"line":320,"column":1,"offset":19261},"end":{"line":320,"column":62,"offset":19322},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Line 23 - Set ","position":{"start":{"line":321,"column":3,"offset":19325},"end":{"line":321,"column":17,"offset":19339},"indent":[]}},{"type":"inlineCode","value":"current","position":{"start":{"line":321,"column":17,"offset":19339},"end":{"line":321,"column":26,"offset":19348},"indent":[]}},{"type":"text","value":" node’s ","position":{"start":{"line":321,"column":26,"offset":19348},"end":{"line":321,"column":34,"offset":19356},"indent":[]}},{"type":"inlineCode","value":"nextElement","position":{"start":{"line":321,"column":34,"offset":19356},"end":{"line":321,"column":47,"offset":19369},"indent":[]}},{"type":"text","value":" to ","position":{"start":{"line":321,"column":47,"offset":19369},"end":{"line":321,"column":51,"offset":19373},"indent":[]}},{"type":"inlineCode","value":"previous","position":{"start":{"line":321,"column":51,"offset":19373},"end":{"line":321,"column":61,"offset":19383},"indent":[]}}],"position":{"start":{"line":321,"column":3,"offset":19325},"end":{"line":321,"column":61,"offset":19383},"indent":[]}}],"position":{"start":{"line":321,"column":1,"offset":19323},"end":{"line":321,"column":61,"offset":19383},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Line 24 - Make the ","position":{"start":{"line":322,"column":3,"offset":19386},"end":{"line":322,"column":22,"offset":19405},"indent":[]}},{"type":"inlineCode","value":"current","position":{"start":{"line":322,"column":22,"offset":19405},"end":{"line":322,"column":31,"offset":19414},"indent":[]}},{"type":"text","value":" node the new ","position":{"start":{"line":322,"column":31,"offset":19414},"end":{"line":322,"column":45,"offset":19428},"indent":[]}},{"type":"inlineCode","value":"previous","position":{"start":{"line":322,"column":45,"offset":19428},"end":{"line":322,"column":55,"offset":19438},"indent":[]}},{"type":"text","value":" for the next iteration","position":{"start":{"line":322,"column":55,"offset":19438},"end":{"line":322,"column":78,"offset":19461},"indent":[]}}],"position":{"start":{"line":322,"column":3,"offset":19386},"end":{"line":322,"column":78,"offset":19461},"indent":[]}}],"position":{"start":{"line":322,"column":1,"offset":19384},"end":{"line":322,"column":78,"offset":19461},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Line 25 - Use ","position":{"start":{"line":323,"column":3,"offset":19464},"end":{"line":323,"column":17,"offset":19478},"indent":[]}},{"type":"inlineCode","value":"next","position":{"start":{"line":323,"column":17,"offset":19478},"end":{"line":323,"column":23,"offset":19484},"indent":[]}},{"type":"text","value":" to go to the next node","position":{"start":{"line":323,"column":23,"offset":19484},"end":{"line":323,"column":46,"offset":19507},"indent":[]}}],"position":{"start":{"line":323,"column":3,"offset":19464},"end":{"line":323,"column":46,"offset":19507},"indent":[]}}],"position":{"start":{"line":323,"column":1,"offset":19462},"end":{"line":323,"column":46,"offset":19507},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Line 29 - We reset the ","position":{"start":{"line":324,"column":3,"offset":19510},"end":{"line":324,"column":26,"offset":19533},"indent":[]}},{"type":"inlineCode","value":"head","position":{"start":{"line":324,"column":26,"offset":19533},"end":{"line":324,"column":32,"offset":19539},"indent":[]}},{"type":"text","value":" pointer to point at the last node","position":{"start":{"line":324,"column":32,"offset":19539},"end":{"line":324,"column":66,"offset":19573},"indent":[]}}],"position":{"start":{"line":324,"column":3,"offset":19510},"end":{"line":324,"column":66,"offset":19573},"indent":[]}}],"position":{"start":{"line":324,"column":1,"offset":19508},"end":{"line":324,"column":66,"offset":19573},"indent":[]}}],"position":{"start":{"line":320,"column":1,"offset":19261},"end":{"line":324,"column":66,"offset":19573},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Since the list is traversed only once, the algorithm runs in ","position":{"start":{"line":326,"column":1,"offset":19575},"end":{"line":326,"column":62,"offset":19636},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"O(n)","position":{"start":{"line":326,"column":63,"offset":19637},"end":{"line":326,"column":67,"offset":19641},"indent":[]}}],"position":{"start":{"line":326,"column":62,"offset":19636},"end":{"line":326,"column":68,"offset":19642},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":326,"column":68,"offset":19642},"end":{"line":326,"column":69,"offset":19643},"indent":[]}}],"position":{"start":{"line":326,"column":1,"offset":19575},"end":{"line":326,"column":69,"offset":19643},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":328,"column":1,"offset":19645},"end":{"line":328,"column":2,"offset":19646},"indent":[]}}],"position":{"start":{"line":328,"column":1,"offset":19645},"end":{"line":328,"column":2,"offset":19646},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#tree-find-the-minimum-value-in-a-binary-search-tree","children":[],"position":{"start":{"line":330,"column":6,"offset":19653},"end":{"line":330,"column":143,"offset":19790},"indent":[]}},{"type":"text","value":"Tree: Find the Minimum Value in a Binary Search Tree","position":{"start":{"line":330,"column":143,"offset":19790},"end":{"line":330,"column":195,"offset":19842},"indent":[]}}],"position":{"start":{"line":330,"column":1,"offset":19648},"end":{"line":330,"column":195,"offset":19842},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":332,"column":3,"offset":19846},"end":{"line":332,"column":21,"offset":19864},"indent":[]}}],"position":{"start":{"line":332,"column":1,"offset":19844},"end":{"line":332,"column":23,"offset":19866},"indent":[]}},{"type":"text","value":" Use the ","position":{"start":{"line":332,"column":23,"offset":19866},"end":{"line":332,"column":32,"offset":19875},"indent":[]}},{"type":"inlineCode","value":"findMin(root)","position":{"start":{"line":332,"column":32,"offset":19875},"end":{"line":332,"column":47,"offset":19890},"indent":[]}},{"type":"text","value":" function to find the minimum value in a Binary Search Tree.","position":{"start":{"line":332,"column":47,"offset":19890},"end":{"line":332,"column":107,"offset":19950},"indent":[]}}],"position":{"start":{"line":332,"column":1,"offset":19844},"end":{"line":332,"column":107,"offset":19950},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Input:","position":{"start":{"line":334,"column":3,"offset":19954},"end":{"line":334,"column":9,"offset":19960},"indent":[]}}],"position":{"start":{"line":334,"column":1,"offset":19952},"end":{"line":334,"column":11,"offset":19962},"indent":[]}},{"type":"text","value":" a root node for a binary search tree","position":{"start":{"line":334,"column":11,"offset":19962},"end":{"line":334,"column":48,"offset":19999},"indent":[]}}],"position":{"start":{"line":334,"column":1,"offset":19952},"end":{"line":334,"column":48,"offset":19999},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"","position":{"start":{"line":336,"column":1,"offset":20001},"end":{"line":338,"column":4,"offset":20009},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Output:","position":{"start":{"line":340,"column":3,"offset":20013},"end":{"line":340,"column":10,"offset":20020},"indent":[]}}],"position":{"start":{"line":340,"column":1,"offset":20011},"end":{"line":340,"column":12,"offset":20022},"indent":[]}},{"type":"text","value":" the smallest integer value from that binary search tree","position":{"start":{"line":340,"column":12,"offset":20022},"end":{"line":340,"column":68,"offset":20078},"indent":[]}}],"position":{"start":{"line":340,"column":1,"offset":20011},"end":{"line":340,"column":68,"offset":20078},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"","position":{"start":{"line":342,"column":1,"offset":20080},"end":{"line":344,"column":4,"offset":20088},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Let’s look at an easy solution for this problem.","position":{"start":{"line":346,"column":1,"offset":20090},"end":{"line":346,"column":49,"offset":20138},"indent":[]}}],"position":{"start":{"line":346,"column":1,"offset":20090},"end":{"line":346,"column":49,"offset":20138},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":348,"column":1,"offset":20140},"end":{"line":348,"column":2,"offset":20141},"indent":[]}}],"position":{"start":{"line":348,"column":1,"offset":20140},"end":{"line":348,"column":2,"offset":20141},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Solution: Iterative ","position":{"start":{"line":350,"column":3,"offset":20145},"end":{"line":350,"column":23,"offset":20165},"indent":[]}},{"type":"inlineCode","value":"findMin( )","position":{"start":{"line":350,"column":23,"offset":20165},"end":{"line":350,"column":35,"offset":20177},"indent":[]}}],"position":{"start":{"line":350,"column":1,"offset":20143},"end":{"line":350,"column":37,"offset":20179},"indent":[]}}],"position":{"start":{"line":350,"column":1,"offset":20143},"end":{"line":350,"column":37,"offset":20179},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This solution begins by checking if the root is ","position":{"start":{"line":352,"column":1,"offset":20181},"end":{"line":352,"column":49,"offset":20229},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":352,"column":49,"offset":20229},"end":{"line":352,"column":55,"offset":20235},"indent":[]}},{"type":"text","value":". It returns ","position":{"start":{"line":352,"column":55,"offset":20235},"end":{"line":352,"column":68,"offset":20248},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":352,"column":68,"offset":20248},"end":{"line":352,"column":74,"offset":20254},"indent":[]}},{"type":"text","value":" if so. It then moves to the left subtree and continues with each node’s left child until the left-most child is reached.","position":{"start":{"line":352,"column":74,"offset":20254},"end":{"line":352,"column":195,"offset":20375},"indent":[]}}],"position":{"start":{"line":352,"column":1,"offset":20181},"end":{"line":352,"column":195,"offset":20375},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"index.jsBinarySearchTree.jsNode.js12345678910111213141516171819202122232425262728293031\"use strict\";const Node = require('./Node.js');module.exports = class BinarySearchTree { constructor(rootValue) { this.root = new Node(rootValue); } insert(currentNode, newValue) { if (currentNode === null) { currentNode = new Node(newValue); } else if (newValue < currentNode.val) { currentNode.leftChild = this.insert(currentNode.leftChild, newValue); } else { currentNode.rightChild = this.insert(currentNode.rightChild, newValue); } return currentNode; } insertBST(newValue) { if(this.root==null){ this.root=new Node(newValue); return; } this.insert(this.root, newValue); } preOrderPrint(currentNode) { if (currentNode !== null) { console.log(currentNode.val); this.preOrderPrint(currentNode.leftChild);Run\\","position":{"start":{"line":354,"column":1,"offset":20377},"end":{"line":354,"column":799,"offset":21175},"indent":[]}}],"position":{"start":{"line":354,"column":1,"offset":20377},"end":{"line":354,"column":799,"offset":21175},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#graph-remove-edge","children":[],"position":{"start":{"line":356,"column":6,"offset":21182},"end":{"line":356,"column":109,"offset":21285},"indent":[]}},{"type":"text","value":"Graph: Remove Edge","position":{"start":{"line":356,"column":109,"offset":21285},"end":{"line":356,"column":127,"offset":21303},"indent":[]}}],"position":{"start":{"line":356,"column":1,"offset":21177},"end":{"line":356,"column":127,"offset":21303},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":358,"column":3,"offset":21307},"end":{"line":358,"column":21,"offset":21325},"indent":[]}}],"position":{"start":{"line":358,"column":1,"offset":21305},"end":{"line":358,"column":23,"offset":21327},"indent":[]}},{"type":"text","value":" Implement the removeEdge function to take a source and a destination as arguments. It should detect if an edge exists between them.","position":{"start":{"line":358,"column":23,"offset":21327},"end":{"line":358,"column":155,"offset":21459},"indent":[]}}],"position":{"start":{"line":358,"column":1,"offset":21305},"end":{"line":358,"column":155,"offset":21459},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Input:","position":{"start":{"line":360,"column":3,"offset":21463},"end":{"line":360,"column":9,"offset":21469},"indent":[]}}],"position":{"start":{"line":360,"column":1,"offset":21461},"end":{"line":360,"column":11,"offset":21471},"indent":[]}},{"type":"text","value":" A graph, a source, and a destination","position":{"start":{"line":360,"column":11,"offset":21471},"end":{"line":360,"column":48,"offset":21508},"indent":[]}}],"position":{"start":{"line":360,"column":1,"offset":21461},"end":{"line":360,"column":48,"offset":21508},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md","children":[{"type":"image","title":null,"url":"","alt":null,"position":{"start":{"line":362,"column":2,"offset":21511},"end":{"line":362,"column":7,"offset":21516},"indent":[]}}],"position":{"start":{"line":362,"column":1,"offset":21510},"end":{"line":362,"column":91,"offset":21600},"indent":[]}},{"type":"link","title":null,"url":"https://camo.githubusercontent.com/428156ffac3c84ccdc035827728a34648c3fb537f5967696fff27d5625f9fc18/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3630302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36353736313335363639323834383634","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/428156ffac3c84ccdc035827728a34648c3fb537f5967696fff27d5625f9fc18/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3630302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36353736313335363639323834383634","alt":"widget","position":{"start":{"line":362,"column":92,"offset":21601},"end":{"line":362,"column":445,"offset":21954},"indent":[]}}],"position":{"start":{"line":362,"column":91,"offset":21600},"end":{"line":362,"column":790,"offset":22299},"indent":[]}},{"type":"link","title":null,"url":"https://camo.githubusercontent.com/bab248d2d24b5387823fe7b0259e5ce89b5b38e322500cae5fe67b5a379dad90/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3330302c713d31302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36353736313335363639323834383634","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/bab248d2d24b5387823fe7b0259e5ce89b5b38e322500cae5fe67b5a379dad90/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3330302c713d31302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36353736313335363639323834383634","alt":"widget","position":{"start":{"line":362,"column":791,"offset":22300},"end":{"line":362,"column":1154,"offset":22663},"indent":[]}}],"position":{"start":{"line":362,"column":790,"offset":22299},"end":{"line":362,"column":1509,"offset":23018},"indent":[]}}],"position":{"start":{"line":362,"column":1,"offset":21510},"end":{"line":362,"column":1509,"offset":23018},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Output:","position":{"start":{"line":364,"column":3,"offset":23022},"end":{"line":364,"column":10,"offset":23029},"indent":[]}}],"position":{"start":{"line":364,"column":1,"offset":23020},"end":{"line":364,"column":12,"offset":23031},"indent":[]}},{"type":"text","value":" A graph with the edge between the source and the destination removed.","position":{"start":{"line":364,"column":12,"offset":23031},"end":{"line":364,"column":82,"offset":23101},"indent":[]}}],"position":{"start":{"line":364,"column":1,"offset":23020},"end":{"line":364,"column":82,"offset":23101},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"","position":{"start":{"line":366,"column":1,"offset":23103},"end":{"line":368,"column":4,"offset":23111},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md","children":[{"type":"image","title":null,"url":"","alt":null,"position":{"start":{"line":370,"column":2,"offset":23114},"end":{"line":370,"column":7,"offset":23119},"indent":[]}}],"position":{"start":{"line":370,"column":1,"offset":23113},"end":{"line":370,"column":91,"offset":23203},"indent":[]}},{"type":"link","title":null,"url":"https://camo.githubusercontent.com/3c66578e7e5a92a7e8bbe6957356049a8d4206d6d9a91ed2fd6460c7b9fb8ff5/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3630302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36303338353930393834323930333034","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/3c66578e7e5a92a7e8bbe6957356049a8d4206d6d9a91ed2fd6460c7b9fb8ff5/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3630302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36303338353930393834323930333034","alt":"widget","position":{"start":{"line":370,"column":92,"offset":23204},"end":{"line":370,"column":445,"offset":23557},"indent":[]}}],"position":{"start":{"line":370,"column":91,"offset":23203},"end":{"line":370,"column":790,"offset":23902},"indent":[]}},{"type":"link","title":null,"url":"https://camo.githubusercontent.com/da5b513fd1a1678e0b6d6209a9673acb5555e3a7f863eb1580ff38d71f6bbfed/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3330302c713d31302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36303338353930393834323930333034","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/da5b513fd1a1678e0b6d6209a9673acb5555e3a7f863eb1580ff38d71f6bbfed/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3330302c713d31302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36303338353930393834323930333034","alt":"widget","position":{"start":{"line":370,"column":791,"offset":23903},"end":{"line":370,"column":1154,"offset":24266},"indent":[]}}],"position":{"start":{"line":370,"column":790,"offset":23902},"end":{"line":370,"column":1509,"offset":24621},"indent":[]}}],"position":{"start":{"line":370,"column":1,"offset":23113},"end":{"line":370,"column":1509,"offset":24621},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The solution to this problem is fairly simple: we use Indexing and deletion. Take a look","position":{"start":{"line":372,"column":1,"offset":24623},"end":{"line":372,"column":89,"offset":24711},"indent":[]}}],"position":{"start":{"line":372,"column":1,"offset":24623},"end":{"line":372,"column":89,"offset":24711},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"index.jsGraph.jsLinkedList.jsNode.js12345678910111213141516171819202122232425262728293031\"use strict\";const LinkedList = require('./LinkedList.js');const Node = require('./Node.js');module.exports = class Graph { constructor(vertices) { this.vertices = vertices; this.list = ","position":{"start":{"line":374,"column":1,"offset":24713},"end":{"line":374,"column":276,"offset":24988},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":374,"column":276,"offset":24988},"end":{"line":374,"column":278,"offset":24990},"indent":[]}},{"type":"text","value":"]; var it; for (it = 0; it < vertices; it++) { let temp = new LinkedList(); this.list.push(temp); } } addEdge(source, destination) { if (source < this.vertices && destination < this.vertices) this.list","position":{"start":{"line":374,"column":278,"offset":24990},"end":{"line":374,"column":479,"offset":25191},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":374,"column":479,"offset":25191},"end":{"line":374,"column":481,"offset":25193},"indent":[]}},{"type":"text","value":"source].insertAtHead(destination); return this; } printGraph() { console.log(\">>Adjacency List of Directed Graph<<\"); var i; for (i = 0; i < this.list.length; i++) { process.stdout.write(\"|\" + String(i) + \"| => \");Run","position":{"start":{"line":374,"column":481,"offset":25193},"end":{"line":374,"column":698,"offset":25410},"indent":[]}}],"position":{"start":{"line":374,"column":1,"offset":24713},"end":{"line":374,"column":698,"offset":25410},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Since our vertices are stored in an array, we can access the ","position":{"start":{"line":376,"column":1,"offset":25412},"end":{"line":376,"column":62,"offset":25473},"indent":[]}},{"type":"inlineCode","value":"source","position":{"start":{"line":376,"column":62,"offset":25473},"end":{"line":376,"column":70,"offset":25481},"indent":[]}},{"type":"text","value":" linked list. We then call the ","position":{"start":{"line":376,"column":70,"offset":25481},"end":{"line":376,"column":101,"offset":25512},"indent":[]}},{"type":"inlineCode","value":"delete","position":{"start":{"line":376,"column":101,"offset":25512},"end":{"line":376,"column":109,"offset":25520},"indent":[]}},{"type":"text","value":" function for linked lists. The time complexity for this solution is O(E) since we may have to traverse E edges.","position":{"start":{"line":376,"column":109,"offset":25520},"end":{"line":376,"column":221,"offset":25632},"indent":[]}}],"position":{"start":{"line":376,"column":1,"offset":25412},"end":{"line":376,"column":221,"offset":25632},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":378,"column":1,"offset":25634},"end":{"line":378,"column":2,"offset":25635},"indent":[]}}],"position":{"start":{"line":378,"column":1,"offset":25634},"end":{"line":378,"column":2,"offset":25635},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#hash-table-convert-max-heap-to-min-heap","children":[],"position":{"start":{"line":380,"column":6,"offset":25642},"end":{"line":380,"column":131,"offset":25767},"indent":[]}},{"type":"text","value":"Hash Table: Convert Max-Heap to Min-Heap","position":{"start":{"line":380,"column":131,"offset":25767},"end":{"line":380,"column":171,"offset":25807},"indent":[]}}],"position":{"start":{"line":380,"column":1,"offset":25637},"end":{"line":380,"column":171,"offset":25807},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":382,"column":3,"offset":25811},"end":{"line":382,"column":21,"offset":25829},"indent":[]}}],"position":{"start":{"line":382,"column":1,"offset":25809},"end":{"line":382,"column":23,"offset":25831},"indent":[]}},{"type":"text","value":" Implement the function ","position":{"start":{"line":382,"column":23,"offset":25831},"end":{"line":382,"column":47,"offset":25855},"indent":[]}},{"type":"inlineCode","value":"convertMax(maxHeap)","position":{"start":{"line":382,"column":47,"offset":25855},"end":{"line":382,"column":68,"offset":25876},"indent":[]}},{"type":"text","value":" to convert a binary max-heap into a binary min-heap. ","position":{"start":{"line":382,"column":68,"offset":25876},"end":{"line":382,"column":122,"offset":25930},"indent":[]}},{"type":"inlineCode","value":"maxHeap","position":{"start":{"line":382,"column":122,"offset":25930},"end":{"line":382,"column":131,"offset":25939},"indent":[]}},{"type":"text","value":" should be an array in the ","position":{"start":{"line":382,"column":131,"offset":25939},"end":{"line":382,"column":158,"offset":25966},"indent":[]}},{"type":"inlineCode","value":"maxHeap","position":{"start":{"line":382,"column":158,"offset":25966},"end":{"line":382,"column":167,"offset":25975},"indent":[]}},{"type":"text","value":" format, i.e the parent is greater than its children.","position":{"start":{"line":382,"column":167,"offset":25975},"end":{"line":382,"column":220,"offset":26028},"indent":[]}}],"position":{"start":{"line":382,"column":1,"offset":25809},"end":{"line":382,"column":220,"offset":26028},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Input:","position":{"start":{"line":384,"column":3,"offset":26032},"end":{"line":384,"column":9,"offset":26038},"indent":[]}}],"position":{"start":{"line":384,"column":1,"offset":26030},"end":{"line":384,"column":11,"offset":26040},"indent":[]}},{"type":"text","value":" a Max-Heap","position":{"start":{"line":384,"column":11,"offset":26040},"end":{"line":384,"column":22,"offset":26051},"indent":[]}}],"position":{"start":{"line":384,"column":1,"offset":26030},"end":{"line":384,"column":22,"offset":26051},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"","position":{"start":{"line":386,"column":1,"offset":26053},"end":{"line":388,"column":4,"offset":26061},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Output:","position":{"start":{"line":390,"column":3,"offset":26065},"end":{"line":390,"column":10,"offset":26072},"indent":[]}}],"position":{"start":{"line":390,"column":1,"offset":26063},"end":{"line":390,"column":12,"offset":26074},"indent":[]}},{"type":"text","value":" returns the converted array","position":{"start":{"line":390,"column":12,"offset":26074},"end":{"line":390,"column":40,"offset":26102},"indent":[]}}],"position":{"start":{"line":390,"column":1,"offset":26063},"end":{"line":390,"column":40,"offset":26102},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"","position":{"start":{"line":392,"column":1,"offset":26104},"end":{"line":394,"column":4,"offset":26112},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To solve this problem, we must min heapify all parent nodes. Take a look.","position":{"start":{"line":396,"column":1,"offset":26114},"end":{"line":396,"column":74,"offset":26187},"indent":[]}}],"position":{"start":{"line":396,"column":1,"offset":26114},"end":{"line":396,"column":74,"offset":26187},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"123456789101112131415161718192021222324252627function minHeapify(heap, index) { var left = index ","position":{"start":{"line":398,"column":1,"offset":26189},"end":{"line":398,"column":98,"offset":26286},"indent":[]}},{"type":"text","value":"*","position":{"start":{"line":398,"column":98,"offset":26286},"end":{"line":398,"column":100,"offset":26288},"indent":[]}},{"type":"text","value":" 2; var right = (index ","position":{"start":{"line":398,"column":100,"offset":26288},"end":{"line":398,"column":123,"offset":26311},"indent":[]}},{"type":"text","value":"*","position":{"start":{"line":398,"column":123,"offset":26311},"end":{"line":398,"column":125,"offset":26313},"indent":[]}},{"type":"text","value":" 2) + 1; var smallest = index; if ((heap.length > left) && (heap","position":{"start":{"line":398,"column":125,"offset":26313},"end":{"line":398,"column":189,"offset":26377},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":189,"offset":26377},"end":{"line":398,"column":191,"offset":26379},"indent":[]}},{"type":"text","value":"smallest] > heap","position":{"start":{"line":398,"column":191,"offset":26379},"end":{"line":398,"column":207,"offset":26395},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":207,"offset":26395},"end":{"line":398,"column":209,"offset":26397},"indent":[]}},{"type":"text","value":"left])) { smallest = left } if ((heap.length > right) && (heap","position":{"start":{"line":398,"column":209,"offset":26397},"end":{"line":398,"column":271,"offset":26459},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":271,"offset":26459},"end":{"line":398,"column":273,"offset":26461},"indent":[]}},{"type":"text","value":"smallest] > heap","position":{"start":{"line":398,"column":273,"offset":26461},"end":{"line":398,"column":289,"offset":26477},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":289,"offset":26477},"end":{"line":398,"column":291,"offset":26479},"indent":[]}},{"type":"text","value":"right])) smallest = right if (smallest != index) { var tmp = heap","position":{"start":{"line":398,"column":291,"offset":26479},"end":{"line":398,"column":356,"offset":26544},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":356,"offset":26544},"end":{"line":398,"column":358,"offset":26546},"indent":[]}},{"type":"text","value":"smallest] heap","position":{"start":{"line":398,"column":358,"offset":26546},"end":{"line":398,"column":372,"offset":26560},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":372,"offset":26560},"end":{"line":398,"column":374,"offset":26562},"indent":[]}},{"type":"text","value":"smallest] = heap","position":{"start":{"line":398,"column":374,"offset":26562},"end":{"line":398,"column":390,"offset":26578},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":390,"offset":26578},"end":{"line":398,"column":392,"offset":26580},"indent":[]}},{"type":"text","value":"index] heap","position":{"start":{"line":398,"column":392,"offset":26580},"end":{"line":398,"column":403,"offset":26591},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":403,"offset":26591},"end":{"line":398,"column":405,"offset":26593},"indent":[]}},{"type":"text","value":"index] = tmp minHeapify(heap, smallest) } return heap;}function convertMax(maxHeap) { for (var i = Math.floor((maxHeap.length) / 2); i > -1; i--) maxHeap = minHeapify(maxHeap, i) return maxHeap}var maxHeap = ","position":{"start":{"line":398,"column":405,"offset":26593},"end":{"line":398,"column":613,"offset":26801},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":613,"offset":26801},"end":{"line":398,"column":615,"offset":26803},"indent":[]}},{"type":"text","value":"9,4,7,1,-2,6,5]console.log(convertMax(maxHeap))Run","position":{"start":{"line":398,"column":615,"offset":26803},"end":{"line":398,"column":665,"offset":26853},"indent":[]}}],"position":{"start":{"line":398,"column":1,"offset":26189},"end":{"line":398,"column":665,"offset":26853},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We consider ","position":{"start":{"line":400,"column":1,"offset":26855},"end":{"line":400,"column":13,"offset":26867},"indent":[]}},{"type":"inlineCode","value":"maxHeap","position":{"start":{"line":400,"column":13,"offset":26867},"end":{"line":400,"column":22,"offset":26876},"indent":[]}},{"type":"text","value":" to be a regular array and reorder it to accurately represent a min-heap. You can see this done in the code above. The ","position":{"start":{"line":400,"column":22,"offset":26876},"end":{"line":400,"column":141,"offset":26995},"indent":[]}},{"type":"inlineCode","value":"convertMax()","position":{"start":{"line":400,"column":141,"offset":26995},"end":{"line":400,"column":155,"offset":27009},"indent":[]}},{"type":"text","value":" function then restores the heap property on all nodes from the lowest parent node by calling the ","position":{"start":{"line":400,"column":155,"offset":27009},"end":{"line":400,"column":253,"offset":27107},"indent":[]}},{"type":"inlineCode","value":"minHeapify()","position":{"start":{"line":400,"column":253,"offset":27107},"end":{"line":400,"column":267,"offset":27121},"indent":[]}},{"type":"text","value":" function. In regards to time complexity, this solution takes ","position":{"start":{"line":400,"column":267,"offset":27121},"end":{"line":400,"column":329,"offset":27183},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"O(nlog(n))O(nlog(n))","position":{"start":{"line":400,"column":330,"offset":27184},"end":{"line":400,"column":350,"offset":27204},"indent":[]}}],"position":{"start":{"line":400,"column":329,"offset":27183},"end":{"line":400,"column":351,"offset":27205},"indent":[]}},{"type":"text","value":" time.","position":{"start":{"line":400,"column":351,"offset":27205},"end":{"line":400,"column":357,"offset":27211},"indent":[]}}],"position":{"start":{"line":400,"column":1,"offset":26855},"end":{"line":400,"column":357,"offset":27211},"indent":[]}},{"type":"html","value":"<!--EndFragment-->","position":{"start":{"line":402,"column":1,"offset":27213},"end":{"line":402,"column":19,"offset":27231},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":403,"column":1,"offset":27232}}}}