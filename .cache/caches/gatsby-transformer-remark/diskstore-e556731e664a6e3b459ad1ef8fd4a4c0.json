{"expireTime":9007200907909664000,"key":"transformer-remark-markdown-ast-69183542960e810d7141b7549c70f512--","val":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Gist Archive","position":{"start":{"line":3,"column":4,"offset":5},"end":{"line":3,"column":16,"offset":17},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":16,"offset":17},"indent":[]}},{"type":"html","value":"<h2>Gist Archive</h2>","position":{"start":{"line":5,"column":1,"offset":19},"end":{"line":5,"column":22,"offset":40},"indent":[]}},{"type":"html","value":"<iframe sandbox=\"allow-scripts\" style=\"resize:both; overflow:scroll;\"    src=\"https://bgoonzgist.netlify.app/\" height=\"800px\" width=\"1000px\" scrolling=\"yes\"   frameborder=\"yes\" loading=\"lazy\"  allowfullscreen=\"true\"  frameborder=\"0\" ></iframe>","position":{"start":{"line":7,"column":1,"offset":42},"end":{"line":7,"column":244,"offset":285},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":9,"column":1,"offset":287},"end":{"line":9,"column":5,"offset":291},"indent":[]}},{"type":"html","value":"<br>\n<br>\n<br>\n<br>","position":{"start":{"line":12,"column":1,"offset":294},"end":{"line":15,"column":5,"offset":313},"indent":[1,1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":18,"column":1,"offset":316},"end":{"line":18,"column":5,"offset":320},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":20,"column":1,"offset":322},"end":{"line":20,"column":4,"offset":325},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Featured Gists:","position":{"start":{"line":22,"column":4,"offset":330},"end":{"line":22,"column":19,"offset":345},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":327},"end":{"line":22,"column":19,"offset":345},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const Promise = require('bluebird');\nconst fs = Promise.promisifyAll(require('fs'));\nconst crypto = require('crypto');\nconst path = require('path');\nconst pathA = '.';\nconst pathB = '/path/to/the/directory/you/want/to/compare/it/to';\nlet hashes = [];\nfunction hashDirIn(folder) {\n    var pathPromiseA = fs\n        .readdirAsync(folder)\n        .map(function (fileName) {\n            var workPath = path.join(folder, fileName);\n            var statPromise = fs.statAsync(workPath);\n            return Promise.join(statPromise, fileName, function (statPromise, fileName) {\n                if (statPromise.isFile()) {\n                    function makeStream(file, callback) {\n                        var result = fs.createReadStream(workPath);\n                        return callback(result);\n                    }\n                    function process(stream) {\n                        var hash = crypto.createHash('md5');\n                        return new Promise(function (resolve, reject) {\n                            stream.on('data', function updateProcess(chunk) {\n                                hash.update(chunk, 'utf8');\n                            });\n                            stream.on('end', resolve);\n                        }).then(function publish() {\n                            var digest = hash.digest('hex');\n                            hashes.push({ digest: digest, path: workPath });\n                        });\n                    }\n                    return makeStream(fileName, process);\n                }\n            });\n        })\n        .then(function () {\n            if (i == 1) {\n                hashes.sort(function (a, b) {\n                    if (a.digest < b.digest) {\n                        return -1;\n                    }\n                    if (a.digest > b.digest) {\n                        return 1;\n                    }\n                    return 0;\n                });\n                var dupe = 1;\n                hashes.map(function (obj, index) {\n                    if (index - 1 >= 0) {\n                        if (obj.digest == hashes[index - 1].digest) {\n                            console.log('Dupe ' + dupe + ' found:');\n                            console.log(obj.path);\n                            console.log('Equal to:');\n                            console.log(hashes[index - 1].path + '\\n');\n                            dupe++;\n                        }\n                    }\n                });\n            }\n            i++;\n        });\n}\nvar i = 0;\nhashDirIn(pathA);\nhashDirIn(pathB);","position":{"start":{"line":24,"column":1,"offset":347},"end":{"line":90,"column":4,"offset":2909},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":92,"column":1,"offset":2911},"end":{"line":92,"column":4,"offset":2914},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":94,"column":1,"offset":2916},"end":{"line":94,"column":4,"offset":2919},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"will replace any spaces in file names with an underscore!","position":{"start":{"line":96,"column":3,"offset":2923},"end":{"line":96,"column":60,"offset":2980},"indent":[]}}],"position":{"start":{"line":96,"column":3,"offset":2923},"end":{"line":96,"column":60,"offset":2980},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":2921},"end":{"line":96,"column":60,"offset":2980},"indent":[]}},{"type":"code","lang":"sh","meta":null,"value":" for file in *; do mv \"$file\" `echo $file | tr ' ' '_'` ; done\n  ## TAKING IT A STEP FURTHER:\n # Let's do it recursivley:\n  function RecurseDirs ()\n{\n    oldIFS=$IFS\n    IFS=$'\\n'\n    for f in \"$@\"\n    do\n  # YOUR CODE HERE!\n\n[![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png)]\n\nfor file in \\*; do mv \"$file\" `echo $file | tr ' ' '_'` ; done\n        if [[ -d \"${f}\" ]]; then\ncd \"${f}\"\n            RecurseDirs $(ls -1 \".\")\n            cd ..\n        fi\n    done\n    IFS=$oldIFS\n}\nRecurseDirs \"./\"","position":{"start":{"line":98,"column":1,"offset":2982},"end":{"line":124,"column":4,"offset":3579},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":126,"column":1,"offset":3581},"end":{"line":126,"column":4,"offset":3584},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Copy to clipboard jQuerry","position":{"start":{"line":128,"column":5,"offset":3590},"end":{"line":128,"column":30,"offset":3615},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":3586},"end":{"line":128,"column":30,"offset":3615},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Language: Javascript/Jquery","position":{"start":{"line":130,"column":3,"offset":3619},"end":{"line":130,"column":30,"offset":3646},"indent":[]}}],"position":{"start":{"line":130,"column":3,"offset":3619},"end":{"line":130,"column":30,"offset":3646},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":3617},"end":{"line":130,"column":30,"offset":3646},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"In combination with the script tag : ","position":{"start":{"line":132,"column":3,"offset":3650},"end":{"line":132,"column":40,"offset":3687},"indent":[]}},{"type":"html","value":"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\">","position":{"start":{"line":132,"column":40,"offset":3687},"end":{"line":132,"column":119,"offset":3766},"indent":[]}},{"type":"html","value":"</script>","position":{"start":{"line":132,"column":119,"offset":3766},"end":{"line":132,"column":128,"offset":3775},"indent":[]}},{"type":"text","value":" , this snippet will add a copy to clipboard button to all of your embedded ","position":{"start":{"line":132,"column":128,"offset":3775},"end":{"line":132,"column":204,"offset":3851},"indent":[]}},{"type":"html","value":"<code>","position":{"start":{"line":132,"column":204,"offset":3851},"end":{"line":132,"column":210,"offset":3857},"indent":[]}},{"type":"text","value":" blocks.","position":{"start":{"line":132,"column":210,"offset":3857},"end":{"line":132,"column":218,"offset":3865},"indent":[]}}],"position":{"start":{"line":132,"column":3,"offset":3650},"end":{"line":132,"column":218,"offset":3865},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":3648},"end":{"line":132,"column":218,"offset":3865},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"$(document).ready(function () {\n    $('code, pre').append('<span class=\"command-copy\" ><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></span>');\n    $('code span.command-copy').click(function (e) {\n        var text = $(this).parent().text().trim(); //.text();\n        var copyHex = document.createElement('input');\n        copyHex.value = text;\n        document.body.appendChild(copyHex);\n        copyHex.select();\n        document.execCommand('copy');\n        console.log(copyHex.value);\n        document.body.removeChild(copyHex);\n    });\n\n    $('pre span.command-copy').click(function (e) {\n        var text = $(this).parent().text().trim();\n        var copyHex = document.createElement('input');\n        copyHex.value = text;\n        document.body.appendChild(copyHex);\n        copyHex.select();\n        document.execCommand('copy');\n        console.log(copyHex.value);\n        document.body.removeChild(copyHex);\n    });\n});","position":{"start":{"line":134,"column":1,"offset":3867},"end":{"line":159,"column":4,"offset":4809},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":161,"column":1,"offset":4811},"end":{"line":161,"column":4,"offset":4814},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Append Files in PWD","position":{"start":{"line":163,"column":5,"offset":4820},"end":{"line":163,"column":24,"offset":4839},"indent":[]}}],"position":{"start":{"line":163,"column":1,"offset":4816},"end":{"line":163,"column":24,"offset":4839},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//APPEND-DIR.js\nconst fs = require('fs');\nlet cat = require('child_process').execSync('cat *').toString('UTF-8');\nfs.writeFile('output.md', cat, (err) => {\n    if (err) throw err;\n});","position":{"start":{"line":165,"column":1,"offset":4841},"end":{"line":172,"column":4,"offset":5034},"indent":[1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":174,"column":1,"offset":5036},"end":{"line":174,"column":4,"offset":5039},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"doesUserFrequentStarbucks.js","position":{"start":{"line":176,"column":5,"offset":5045},"end":{"line":176,"column":33,"offset":5073},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":5041},"end":{"line":176,"column":33,"offset":5073},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const isAppleDevice = /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nconsole.log(isAppleDevice);\n// Result: will return true if user is on an Apple device","position":{"start":{"line":178,"column":1,"offset":5075},"end":{"line":182,"column":4,"offset":5241},"indent":[1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":184,"column":1,"offset":5243},"end":{"line":184,"column":4,"offset":5246},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"arr-intersection.js","position":{"start":{"line":186,"column":5,"offset":5252},"end":{"line":186,"column":24,"offset":5271},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":5248},"end":{"line":186,"column":24,"offset":5271},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"/*\n function named intersection(firstArr) that takes in an array and\nreturns a function.\nWhen the function returned by intersection is invoked\npassing in an array (secondArr) it returns a new array containing the elements\ncommon to both firstArr and secondArr.\n*/\nfunction intersection(firstArr) {\n    return (secondArr) => {\n        let common = [];\n        for (let i = 0; i < firstArr.length; i++) {\n            let el = firstArr[i];\n            if (secondArr.indexOf(el) > -1) {\n                common.push(el);\n            }\n        }\n        return common;\n    };\n}\nlet abc = intersection(['a', 'b', 'c']); // returns a function\nconsole.log(abc(['b', 'd', 'c'])); // returns [ 'b', 'c' ]\n\nlet fame = intersection(['f', 'a', 'm', 'e']); // returns a function\nconsole.log(fame(['a', 'f', 'z', 'b'])); // returns [ 'f', 'a' ]","position":{"start":{"line":188,"column":1,"offset":5273},"end":{"line":213,"column":4,"offset":6111},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":215,"column":1,"offset":6113},"end":{"line":215,"column":4,"offset":6116},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"arr-of-cum-partial-sums.js","position":{"start":{"line":217,"column":5,"offset":6122},"end":{"line":217,"column":31,"offset":6148},"indent":[]}}],"position":{"start":{"line":217,"column":1,"offset":6118},"end":{"line":217,"column":31,"offset":6148},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"/*\nFirst is recurSum(arr, start) which returns the sum of the elements of arr from the index start till the very end.\nSecond is partrecurSum() that recursively concatenates the required sum into an array and when we reach the end of the array, it returns the concatenated array.\n*/\n//arr.length -1 = 5\n//                   arr   [    1,    7,    12,   6,    5,    10   ]\n//                   ind   [    0     1     2     3     4      5   ]\n//                              ↟                              ↟\n//                            start                           end\n\nfunction recurSum(arr, start = 0, sum = 0) {\n    if (start < arr.length) {\n        return recurSum(arr, start + 1, sum + arr[start]);\n    }\n    return sum;\n}\n\nfunction rPartSumsArr(arr, partSum = [], start = 0, end = arr.length - 1) {\n    if (start <= end) {\n        return rPartSumsArr(arr, partSum.concat(recurSum(arr, start)), ++start, end);\n    }\n    return partSum.reverse();\n}\n\nconsole.log('------------------------------------------------rPartSumArr------------------------------------------------');\nconsole.log('rPartSumsArr(arr)=[ 1, 1, 5, 2, 6, 10 ]: ', rPartSumsArr(arr));\nconsole.log('rPartSumsArr(arr1)=[ 1, 7, 12, 6, 5, 10 ]: ', rPartSumsArr(arr1));\nconsole.log('------------------------------------------------rPartSumArr------------------------------------------------');\n/*\n------------------------------------------------rPartSumArr------------------------------------------------\nrPartSumsArr(arr)=[ 1, 1, 5, 2, 6, 10 ]:  [ 10, 16, 18, 23, 24, 25 ]\nrPartSumsArr(arr1)=[ 1, 7, 12, 6, 5, 10 ]:  [ 10, 15, 21, 33, 40, 41 ]\n------------------------------------------------rPartSumArr------------------------------------------------\n*/","position":{"start":{"line":219,"column":1,"offset":6150},"end":{"line":254,"column":4,"offset":7882},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":256,"column":1,"offset":7884},"end":{"line":256,"column":4,"offset":7887},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"camel2Kabab.js","position":{"start":{"line":258,"column":5,"offset":7893},"end":{"line":258,"column":19,"offset":7907},"indent":[]}}],"position":{"start":{"line":258,"column":1,"offset":7889},"end":{"line":258,"column":19,"offset":7907},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":260,"column":1,"offset":7909},"end":{"line":260,"column":4,"offset":7912},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"function camelToKebab(value) {\n    return value.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}","position":{"start":{"line":263,"column":1,"offset":7915},"end":{"line":269,"column":4,"offset":8027},"indent":[1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":271,"column":1,"offset":8029},"end":{"line":271,"column":4,"offset":8032},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"camelCase.js","position":{"start":{"line":273,"column":5,"offset":8038},"end":{"line":273,"column":17,"offset":8050},"indent":[]}}],"position":{"start":{"line":273,"column":1,"offset":8034},"end":{"line":273,"column":17,"offset":8050},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":275,"column":1,"offset":8052},"end":{"line":275,"column":4,"offset":8055},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"function camel(str) {\n    return str.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function (match, index) {\n        if (+match === 0) return ''; // or if (/\\s+/.test(match)) for white spaces\n        return index === 0 ? match.toLowerCase() : match.toUpperCase();\n    });\n}","position":{"start":{"line":278,"column":1,"offset":8058},"end":{"line":287,"column":4,"offset":8332},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":289,"column":1,"offset":8334},"end":{"line":289,"column":4,"offset":8337},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"concatLinkedLists.js","position":{"start":{"line":291,"column":5,"offset":8343},"end":{"line":291,"column":25,"offset":8363},"indent":[]}}],"position":{"start":{"line":291,"column":1,"offset":8339},"end":{"line":291,"column":25,"offset":8363},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":293,"column":1,"offset":8365},"end":{"line":293,"column":4,"offset":8368},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"function addTwoNumbers(l1, l2) {\n    let result = new ListNode(0);\n    let currentNode = result;\n    let carryOver = 0;\n    while (l1 != null || l2 != null) {\n        let v1 = 0;\n        let v2 = 0;\n        if (l1 != null) v1 = l1.val;\n        if (l2 != null) v2 = l2.val;\n        let sum = v1 + v2 + carryOver;\n        carryOver = Math.floor(sum / 10);\n        sum = sum % 10;\n        currentNode.next = new ListNode(sum);\n        currentNode = currentNode.next;\n        if (l1 != null) l1 = l1.next;\n        if (l2 != null) l2 = l2.next;\n    }\n    if (carryOver > 0) {\n        currentNode.next = new ListNode(carryOver);\n    }\n    return result.next;\n}","position":{"start":{"line":296,"column":1,"offset":8371},"end":{"line":321,"column":4,"offset":9037},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":323,"column":1,"offset":9039},"end":{"line":323,"column":4,"offset":9042},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"fast-is-alpha-numeric.js","position":{"start":{"line":325,"column":5,"offset":9048},"end":{"line":325,"column":29,"offset":9072},"indent":[]}}],"position":{"start":{"line":325,"column":1,"offset":9044},"end":{"line":325,"column":29,"offset":9072},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Function to test if a character is alpha numeric that is faster than a regular\n//expression in JavaScript\n\nlet isAlphaNumeric = (char) => {\n    char = char.toString();\n    let id = char.charCodeAt(0);\n    if (\n        !(id > 47 && id < 58) && // if not numeric(0-9)\n        !(id > 64 && id < 91) && // if not letter(A-Z)\n        !(id > 96 && id < 123) // if not letter(a-z)\n    ) {\n        return false;\n    }\n    return true;\n};\n\nconsole.log(isAlphaNumeric('A')); //true\nconsole.log(isAlphaNumeric(2)); //true\nconsole.log(isAlphaNumeric('z')); //true\nconsole.log(isAlphaNumeric(' ')); //false\nconsole.log(isAlphaNumeric('!')); //false","position":{"start":{"line":327,"column":1,"offset":9074},"end":{"line":349,"column":4,"offset":9721},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":351,"column":1,"offset":9723},"end":{"line":351,"column":4,"offset":9726},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"find-n-replace.js","position":{"start":{"line":353,"column":5,"offset":9732},"end":{"line":353,"column":22,"offset":9749},"indent":[]}}],"position":{"start":{"line":353,"column":1,"offset":9728},"end":{"line":353,"column":22,"offset":9749},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":355,"column":1,"offset":9751},"end":{"line":355,"column":4,"offset":9754},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"function replaceWords(str, before, after) {\n    if (/^[A-Z]/.test(before)) {\n        after = after[0].toUpperCase() + after.substring(1);\n    } else {\n        after = after[0].toLowerCase() + after.substring(1);\n    }\n    return str.replace(before, after);\n}\nconsole.log(replaceWords('Let us go to the store', 'store', 'mall')); //\"Let us go to the mall\"\nconsole.log(replaceWords('He is Sleeping on the couch', 'Sleeping', 'sitting')); //\"He is Sitting on the couch\"\nconsole.log(replaceWords('His name is Tom', 'Tom', 'john'));\n//\"His name is John\"","position":{"start":{"line":358,"column":1,"offset":9757},"end":{"line":373,"column":4,"offset":10317},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":375,"column":1,"offset":10319},"end":{"line":375,"column":4,"offset":10322},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"flatten-arr.js","position":{"start":{"line":377,"column":5,"offset":10328},"end":{"line":377,"column":19,"offset":10342},"indent":[]}}],"position":{"start":{"line":377,"column":1,"offset":10324},"end":{"line":377,"column":19,"offset":10342},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"/*Simple Function to flatten an array into a single layer */\nconst flatten = (array) => array.reduce((accum, ele) => accum.concat(Array.isArray(ele) ? flatten(ele) : ele), []);","position":{"start":{"line":379,"column":1,"offset":10344},"end":{"line":382,"column":4,"offset":10530},"indent":[1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":384,"column":1,"offset":10532},"end":{"line":384,"column":4,"offset":10535},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"isWeekDay.js","position":{"start":{"line":386,"column":5,"offset":10541},"end":{"line":386,"column":17,"offset":10553},"indent":[]}}],"position":{"start":{"line":386,"column":1,"offset":10537},"end":{"line":386,"column":17,"offset":10553},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const isWeekday = (date) => date.getDay() % 6 !== 0;\nconsole.log(isWeekday(new Date(2021, 0, 11)));\n// Result: true (Monday)\nconsole.log(isWeekday(new Date(2021, 0, 10)));\n// Result: false (Sunday)","position":{"start":{"line":388,"column":1,"offset":10555},"end":{"line":394,"column":4,"offset":10762},"indent":[1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":396,"column":1,"offset":10764},"end":{"line":396,"column":4,"offset":10767},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"longest-common-prefix.js","position":{"start":{"line":398,"column":5,"offset":10773},"end":{"line":398,"column":29,"offset":10797},"indent":[]}}],"position":{"start":{"line":398,"column":1,"offset":10769},"end":{"line":398,"column":29,"offset":10797},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":400,"column":1,"offset":10799},"end":{"line":400,"column":4,"offset":10802},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"function longestCommonPrefix(strs) {\n    let prefix = '';\n    if (strs.length === 0) return prefix;\n    for (let i = 0; i < strs[0].length; i++) {\n        const character = strs[0][i];\n        for (let j = 0; j < strs.length; j++) {\n            if (strs[j][i] !== character) return prefix;\n        }\n        prefix = prefix + character;\n    }\n    return prefix;\n}","position":{"start":{"line":403,"column":1,"offset":10805},"end":{"line":418,"column":4,"offset":11180},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":419,"column":1,"offset":11181}}}}