{"expireTime":9007200908525415000,"key":"transformer-remark-markdown-html-872f25817cbf375e01fac7cbce3ea987--","val":"<p>By default you cannot pass arguments to a callback function. For example:</p>\n<pre><code class=\"language-js\">function callback() {\n    console.log('Hi human');\n}\n\ndocument.getElementById('someelem').addEventListener('click', callback);\n</code></pre>\n<p>You can take advantage of the closure scope in Javascript to pass arguments to callback functions. Check this example:</p>\n<pre><code class=\"language-js\">function callback(a, b) {\n    return function () {\n        console.log('sum = ', a + b);\n    };\n}\n\nvar x = 1,\n    y = 2;\ndocument.getElementById('someelem').addEventListener('click', callback(x, y));\n</code></pre>\n<h3>What are closures?</h3>\n<p>Closures are functions that refer to independent (free) variables. In other words, the function defined in the closure 'remembers' the environment in which it was created. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\">Check MDN Documentation</a> to learn more.</p>\n<p>So this way the arguments <code>x</code> and <code>y</code> are in scope of the callback function when it is called.</p>\n<p>Another method to do this is using the <code>bind</code> method. For example:</p>\n<pre><code class=\"language-js\">var alertText = function (text) {\n  alert(text);\n};\n\ndocument\n  .getElementById(\"someelem\")\n  .addEventListener(\"click\", alertText.bind(this, \"hello\"));\n</code></pre>"}